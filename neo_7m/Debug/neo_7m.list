
neo_7m.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d88  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  08006f10  08006f10  00016f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073cc  080073cc  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  080073cc  080073cc  000173cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073d4  080073d4  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073d4  080073d4  000173d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073d8  080073d8  000173d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080073dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          00002370  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002398  20002398  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f392  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002470  00000000  00000000  0002f3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c90  00000000  00000000  00031860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b98  00000000  00000000  000324f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000221cb  00000000  00000000  00033088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011c65  00000000  00000000  00055253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6170  00000000  00000000  00066eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012d028  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032bc  00000000  00000000  0012d078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006ef8 	.word	0x08006ef8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08006ef8 	.word	0x08006ef8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004d6:	4804      	ldr	r0, [pc, #16]	; (80004e8 <SELECT+0x1c>)
 80004d8:	f001 fbe2 	bl	8001ca0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80004dc:	2001      	movs	r0, #1
 80004de:	f001 f87b 	bl	80015d8 <HAL_Delay>
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40020400 	.word	0x40020400

080004ec <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f6:	4804      	ldr	r0, [pc, #16]	; (8000508 <DESELECT+0x1c>)
 80004f8:	f001 fbd2 	bl	8001ca0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80004fc:	2001      	movs	r0, #1
 80004fe:	f001 f86b 	bl	80015d8 <HAL_Delay>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40020400 	.word	0x40020400

0800050c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000516:	bf00      	nop
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <SPI_TxByte+0x30>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	f003 0302 	and.w	r3, r3, #2
 8000522:	2b02      	cmp	r3, #2
 8000524:	d1f8      	bne.n	8000518 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000526:	1df9      	adds	r1, r7, #7
 8000528:	2364      	movs	r3, #100	; 0x64
 800052a:	2201      	movs	r2, #1
 800052c:	4803      	ldr	r0, [pc, #12]	; (800053c <SPI_TxByte+0x30>)
 800052e:	f002 f924 	bl	800277a <HAL_SPI_Transmit>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	2000004c 	.word	0x2000004c

08000540 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	460b      	mov	r3, r1
 800054a:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800054c:	bf00      	nop
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <SPI_TxBuffer+0x30>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	f003 0302 	and.w	r3, r3, #2
 8000558:	2b02      	cmp	r3, #2
 800055a:	d1f8      	bne.n	800054e <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800055c:	887a      	ldrh	r2, [r7, #2]
 800055e:	2364      	movs	r3, #100	; 0x64
 8000560:	6879      	ldr	r1, [r7, #4]
 8000562:	4803      	ldr	r0, [pc, #12]	; (8000570 <SPI_TxBuffer+0x30>)
 8000564:	f002 f909 	bl	800277a <HAL_SPI_Transmit>
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	2000004c 	.word	0x2000004c

08000574 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800057a:	23ff      	movs	r3, #255	; 0xff
 800057c:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800057e:	bf00      	nop
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <SPI_RxByte+0x34>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	2b02      	cmp	r3, #2
 800058c:	d1f8      	bne.n	8000580 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800058e:	1dba      	adds	r2, r7, #6
 8000590:	1df9      	adds	r1, r7, #7
 8000592:	2364      	movs	r3, #100	; 0x64
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2301      	movs	r3, #1
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <SPI_RxByte+0x34>)
 800059a:	f002 fa2a 	bl	80029f2 <HAL_SPI_TransmitReceive>

  return data;
 800059e:	79bb      	ldrb	r3, [r7, #6]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	2000004c 	.word	0x2000004c

080005ac <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80005b4:	f7ff ffde 	bl	8000574 <SPI_RxByte>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	701a      	strb	r2, [r3, #0]
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <SD_ReadyWait+0x30>)
 80005d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005d4:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80005d6:	f7ff ffcd 	bl	8000574 <SPI_RxByte>
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2bff      	cmp	r3, #255	; 0xff
 80005e2:	d003      	beq.n	80005ec <SD_ReadyWait+0x24>
 80005e4:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <SD_ReadyWait+0x30>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d1f4      	bne.n	80005d6 <SD_ReadyWait+0xe>

  return res;
 80005ec:	79fb      	ldrb	r3, [r7, #7]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000046 	.word	0x20000046

080005fc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8000602:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000606:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8000608:	f7ff ff70 	bl	80004ec <DESELECT>
  for(int i = 0; i < 10; i++)
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	e005      	b.n	800061e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000612:	20ff      	movs	r0, #255	; 0xff
 8000614:	f7ff ff7a 	bl	800050c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	3301      	adds	r3, #1
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	2b09      	cmp	r3, #9
 8000622:	ddf6      	ble.n	8000612 <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8000624:	f7ff ff52 	bl	80004cc <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8000628:	2340      	movs	r3, #64	; 0x40
 800062a:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 800063c:	2395      	movs	r3, #149	; 0x95
 800063e:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8000640:	463b      	mov	r3, r7
 8000642:	2106      	movs	r1, #6
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ff7b 	bl	8000540 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800064a:	e002      	b.n	8000652 <SD_PowerOn+0x56>
  {
    cnt--;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3b01      	subs	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8000652:	f7ff ff8f 	bl	8000574 <SPI_RxByte>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	d002      	beq.n	8000662 <SD_PowerOn+0x66>
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d1f4      	bne.n	800064c <SD_PowerOn+0x50>
  }

  DESELECT();
 8000662:	f7ff ff43 	bl	80004ec <DESELECT>
  SPI_TxByte(0XFF);
 8000666:	20ff      	movs	r0, #255	; 0xff
 8000668:	f7ff ff50 	bl	800050c <SPI_TxByte>

  PowerFlag = 1;
 800066c:	4b03      	ldr	r3, [pc, #12]	; (800067c <SD_PowerOn+0x80>)
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000049 	.word	0x20000049

08000680 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <SD_PowerOff+0x14>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	20000049 	.word	0x20000049

08000698 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  return PowerFlag;
 800069c:	4b03      	ldr	r3, [pc, #12]	; (80006ac <SD_CheckPower+0x14>)
 800069e:	781b      	ldrb	r3, [r3, #0]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000049 	.word	0x20000049

080006b0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <SD_RxDataBlock+0x58>)
 80006bc:	22c8      	movs	r2, #200	; 0xc8
 80006be:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80006c0:	f7ff ff58 	bl	8000574 <SPI_RxByte>
 80006c4:	4603      	mov	r3, r0
 80006c6:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	2bff      	cmp	r3, #255	; 0xff
 80006cc:	d103      	bne.n	80006d6 <SD_RxDataBlock+0x26>
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <SD_RxDataBlock+0x58>)
 80006d0:	881b      	ldrh	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1f4      	bne.n	80006c0 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	2bfe      	cmp	r3, #254	; 0xfe
 80006da:	d001      	beq.n	80006e0 <SD_RxDataBlock+0x30>
 80006dc:	2300      	movs	r3, #0
 80006de:	e00f      	b.n	8000700 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	607a      	str	r2, [r7, #4]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff60 	bl	80005ac <SPI_RxBytePtr>
  } while(len--);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	1e5a      	subs	r2, r3, #1
 80006f0:	603a      	str	r2, [r7, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d1f4      	bne.n	80006e0 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 80006f6:	f7ff ff3d 	bl	8000574 <SPI_RxByte>
  SPI_RxByte();
 80006fa:	f7ff ff3b 	bl	8000574 <SPI_RxByte>

  return TRUE;
 80006fe:	2301      	movs	r3, #1
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000044 	.word	0x20000044

0800070c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 800071c:	f7ff ff54 	bl	80005c8 <SD_ReadyWait>
 8000720:	4603      	mov	r3, r0
 8000722:	2bff      	cmp	r3, #255	; 0xff
 8000724:	d001      	beq.n	800072a <SD_TxDataBlock+0x1e>
 8000726:	2300      	movs	r3, #0
 8000728:	e02f      	b.n	800078a <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 800072a:	78fb      	ldrb	r3, [r7, #3]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff feed 	bl	800050c <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8000732:	78fb      	ldrb	r3, [r7, #3]
 8000734:	2bfd      	cmp	r3, #253	; 0xfd
 8000736:	d020      	beq.n	800077a <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8000738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff feff 	bl	8000540 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 8000742:	f7ff ff17 	bl	8000574 <SPI_RxByte>
    SPI_RxByte();
 8000746:	f7ff ff15 	bl	8000574 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 800074a:	e00b      	b.n	8000764 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 800074c:	f7ff ff12 	bl	8000574 <SPI_RxByte>
 8000750:	4603      	mov	r3, r0
 8000752:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	f003 031f 	and.w	r3, r3, #31
 800075a:	2b05      	cmp	r3, #5
 800075c:	d006      	beq.n	800076c <SD_TxDataBlock+0x60>
      i++;
 800075e:	7bbb      	ldrb	r3, [r7, #14]
 8000760:	3301      	adds	r3, #1
 8000762:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000764:	7bbb      	ldrb	r3, [r7, #14]
 8000766:	2b40      	cmp	r3, #64	; 0x40
 8000768:	d9f0      	bls.n	800074c <SD_TxDataBlock+0x40>
 800076a:	e000      	b.n	800076e <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800076c:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800076e:	bf00      	nop
 8000770:	f7ff ff00 	bl	8000574 <SPI_RxByte>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d0fa      	beq.n	8000770 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	f003 031f 	and.w	r3, r3, #31
 8000780:	2b05      	cmp	r3, #5
 8000782:	d101      	bne.n	8000788 <SD_TxDataBlock+0x7c>
 8000784:	2301      	movs	r3, #1
 8000786:	e000      	b.n	800078a <SD_TxDataBlock+0x7e>

  return FALSE;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b084      	sub	sp, #16
 8000796:	af00      	add	r7, sp, #0
 8000798:	4603      	mov	r3, r0
 800079a:	6039      	str	r1, [r7, #0]
 800079c:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800079e:	f7ff ff13 	bl	80005c8 <SD_ReadyWait>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2bff      	cmp	r3, #255	; 0xff
 80007a6:	d001      	beq.n	80007ac <SD_SendCmd+0x1a>
 80007a8:	23ff      	movs	r3, #255	; 0xff
 80007aa:	e042      	b.n	8000832 <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff feac 	bl	800050c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	0e1b      	lsrs	r3, r3, #24
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fea6 	bl	800050c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	0c1b      	lsrs	r3, r3, #16
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fea0 	bl	800050c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	0a1b      	lsrs	r3, r3, #8
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fe9a 	bl	800050c <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fe95 	bl	800050c <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b40      	cmp	r3, #64	; 0x40
 80007e6:	d102      	bne.n	80007ee <SD_SendCmd+0x5c>
 80007e8:	2395      	movs	r3, #149	; 0x95
 80007ea:	73fb      	strb	r3, [r7, #15]
 80007ec:	e007      	b.n	80007fe <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b48      	cmp	r3, #72	; 0x48
 80007f2:	d102      	bne.n	80007fa <SD_SendCmd+0x68>
 80007f4:	2387      	movs	r3, #135	; 0x87
 80007f6:	73fb      	strb	r3, [r7, #15]
 80007f8:	e001      	b.n	80007fe <SD_SendCmd+0x6c>
  else crc = 1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fe83 	bl	800050c <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b4c      	cmp	r3, #76	; 0x4c
 800080a:	d101      	bne.n	8000810 <SD_SendCmd+0x7e>
 800080c:	f7ff feb2 	bl	8000574 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 8000810:	230a      	movs	r3, #10
 8000812:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8000814:	f7ff feae 	bl	8000574 <SPI_RxByte>
 8000818:	4603      	mov	r3, r0
 800081a:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800081c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000820:	2b00      	cmp	r3, #0
 8000822:	da05      	bge.n	8000830 <SD_SendCmd+0x9e>
 8000824:	7bbb      	ldrb	r3, [r7, #14]
 8000826:	3b01      	subs	r3, #1
 8000828:	73bb      	strb	r3, [r7, #14]
 800082a:	7bbb      	ldrb	r3, [r7, #14]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d1f1      	bne.n	8000814 <SD_SendCmd+0x82>

  return res;
 8000830:	7b7b      	ldrb	r3, [r7, #13]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SD_disk_initialize+0x14>
 800084c:	2301      	movs	r3, #1
 800084e:	e0d1      	b.n	80009f4 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8000850:	4b6a      	ldr	r3, [pc, #424]	; (80009fc <SD_disk_initialize+0x1c0>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	2b00      	cmp	r3, #0
 800085c:	d003      	beq.n	8000866 <SD_disk_initialize+0x2a>
 800085e:	4b67      	ldr	r3, [pc, #412]	; (80009fc <SD_disk_initialize+0x1c0>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	e0c6      	b.n	80009f4 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8000866:	f7ff fec9 	bl	80005fc <SD_PowerOn>

  /* slave select */
  SELECT();
 800086a:	f7ff fe2f 	bl	80004cc <SELECT>

  /* check disk type */
  type = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000872:	2100      	movs	r1, #0
 8000874:	2040      	movs	r0, #64	; 0x40
 8000876:	f7ff ff8c 	bl	8000792 <SD_SendCmd>
 800087a:	4603      	mov	r3, r0
 800087c:	2b01      	cmp	r3, #1
 800087e:	f040 80a1 	bne.w	80009c4 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8000882:	4b5f      	ldr	r3, [pc, #380]	; (8000a00 <SD_disk_initialize+0x1c4>)
 8000884:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000888:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800088a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800088e:	2048      	movs	r0, #72	; 0x48
 8000890:	f7ff ff7f 	bl	8000792 <SD_SendCmd>
 8000894:	4603      	mov	r3, r0
 8000896:	2b01      	cmp	r3, #1
 8000898:	d155      	bne.n	8000946 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800089a:	2300      	movs	r3, #0
 800089c:	73fb      	strb	r3, [r7, #15]
 800089e:	e00c      	b.n	80008ba <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 80008a0:	7bfc      	ldrb	r4, [r7, #15]
 80008a2:	f7ff fe67 	bl	8000574 <SPI_RxByte>
 80008a6:	4603      	mov	r3, r0
 80008a8:	461a      	mov	r2, r3
 80008aa:	f104 0310 	add.w	r3, r4, #16
 80008ae:	443b      	add	r3, r7
 80008b0:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	3301      	adds	r3, #1
 80008b8:	73fb      	strb	r3, [r7, #15]
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	2b03      	cmp	r3, #3
 80008be:	d9ef      	bls.n	80008a0 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008c0:	7abb      	ldrb	r3, [r7, #10]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d17e      	bne.n	80009c4 <SD_disk_initialize+0x188>
 80008c6:	7afb      	ldrb	r3, [r7, #11]
 80008c8:	2baa      	cmp	r3, #170	; 0xaa
 80008ca:	d17b      	bne.n	80009c4 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008cc:	2100      	movs	r1, #0
 80008ce:	2077      	movs	r0, #119	; 0x77
 80008d0:	f7ff ff5f 	bl	8000792 <SD_SendCmd>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d807      	bhi.n	80008ea <SD_disk_initialize+0xae>
 80008da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008de:	2069      	movs	r0, #105	; 0x69
 80008e0:	f7ff ff57 	bl	8000792 <SD_SendCmd>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d004      	beq.n	80008f4 <SD_disk_initialize+0xb8>
        } while (Timer1);
 80008ea:	4b45      	ldr	r3, [pc, #276]	; (8000a00 <SD_disk_initialize+0x1c4>)
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d1ec      	bne.n	80008cc <SD_disk_initialize+0x90>
 80008f2:	e000      	b.n	80008f6 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008f4:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80008f6:	4b42      	ldr	r3, [pc, #264]	; (8000a00 <SD_disk_initialize+0x1c4>)
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d062      	beq.n	80009c4 <SD_disk_initialize+0x188>
 80008fe:	2100      	movs	r1, #0
 8000900:	207a      	movs	r0, #122	; 0x7a
 8000902:	f7ff ff46 	bl	8000792 <SD_SendCmd>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d15b      	bne.n	80009c4 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800090c:	2300      	movs	r3, #0
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	e00c      	b.n	800092c <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8000912:	7bfc      	ldrb	r4, [r7, #15]
 8000914:	f7ff fe2e 	bl	8000574 <SPI_RxByte>
 8000918:	4603      	mov	r3, r0
 800091a:	461a      	mov	r2, r3
 800091c:	f104 0310 	add.w	r3, r4, #16
 8000920:	443b      	add	r3, r7
 8000922:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	3301      	adds	r3, #1
 800092a:	73fb      	strb	r3, [r7, #15]
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	2b03      	cmp	r3, #3
 8000930:	d9ef      	bls.n	8000912 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000932:	7a3b      	ldrb	r3, [r7, #8]
 8000934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SD_disk_initialize+0x104>
 800093c:	230c      	movs	r3, #12
 800093e:	e000      	b.n	8000942 <SD_disk_initialize+0x106>
 8000940:	2304      	movs	r3, #4
 8000942:	73bb      	strb	r3, [r7, #14]
 8000944:	e03e      	b.n	80009c4 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000946:	2100      	movs	r1, #0
 8000948:	2077      	movs	r0, #119	; 0x77
 800094a:	f7ff ff22 	bl	8000792 <SD_SendCmd>
 800094e:	4603      	mov	r3, r0
 8000950:	2b01      	cmp	r3, #1
 8000952:	d808      	bhi.n	8000966 <SD_disk_initialize+0x12a>
 8000954:	2100      	movs	r1, #0
 8000956:	2069      	movs	r0, #105	; 0x69
 8000958:	f7ff ff1b 	bl	8000792 <SD_SendCmd>
 800095c:	4603      	mov	r3, r0
 800095e:	2b01      	cmp	r3, #1
 8000960:	d801      	bhi.n	8000966 <SD_disk_initialize+0x12a>
 8000962:	2302      	movs	r3, #2
 8000964:	e000      	b.n	8000968 <SD_disk_initialize+0x12c>
 8000966:	2301      	movs	r3, #1
 8000968:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 800096a:	7bbb      	ldrb	r3, [r7, #14]
 800096c:	2b02      	cmp	r3, #2
 800096e:	d10e      	bne.n	800098e <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000970:	2100      	movs	r1, #0
 8000972:	2077      	movs	r0, #119	; 0x77
 8000974:	f7ff ff0d 	bl	8000792 <SD_SendCmd>
 8000978:	4603      	mov	r3, r0
 800097a:	2b01      	cmp	r3, #1
 800097c:	d80e      	bhi.n	800099c <SD_disk_initialize+0x160>
 800097e:	2100      	movs	r1, #0
 8000980:	2069      	movs	r0, #105	; 0x69
 8000982:	f7ff ff06 	bl	8000792 <SD_SendCmd>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d107      	bne.n	800099c <SD_disk_initialize+0x160>
 800098c:	e00c      	b.n	80009a8 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800098e:	2100      	movs	r1, #0
 8000990:	2041      	movs	r0, #65	; 0x41
 8000992:	f7ff fefe 	bl	8000792 <SD_SendCmd>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d004      	beq.n	80009a6 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 800099c:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <SD_disk_initialize+0x1c4>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d1e2      	bne.n	800096a <SD_disk_initialize+0x12e>
 80009a4:	e000      	b.n	80009a8 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009a6:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <SD_disk_initialize+0x1c4>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d007      	beq.n	80009c0 <SD_disk_initialize+0x184>
 80009b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b4:	2050      	movs	r0, #80	; 0x50
 80009b6:	f7ff feec 	bl	8000792 <SD_SendCmd>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SD_disk_initialize+0x188>
 80009c0:	2300      	movs	r3, #0
 80009c2:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 80009c4:	4a0f      	ldr	r2, [pc, #60]	; (8000a04 <SD_disk_initialize+0x1c8>)
 80009c6:	7bbb      	ldrb	r3, [r7, #14]
 80009c8:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 80009ca:	f7ff fd8f 	bl	80004ec <DESELECT>
  SPI_RxByte();
 80009ce:	f7ff fdd1 	bl	8000574 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 80009d2:	7bbb      	ldrb	r3, [r7, #14]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d008      	beq.n	80009ea <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <SD_disk_initialize+0x1c0>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	f023 0301 	bic.w	r3, r3, #1
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <SD_disk_initialize+0x1c0>)
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	e001      	b.n	80009ee <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80009ea:	f7ff fe49 	bl	8000680 <SD_PowerOff>
  }

  return Stat;
 80009ee:	4b03      	ldr	r3, [pc, #12]	; (80009fc <SD_disk_initialize+0x1c0>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b2db      	uxtb	r3, r3
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd90      	pop	{r4, r7, pc}
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000044 	.word	0x20000044
 8000a04:	20000048 	.word	0x20000048

08000a08 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SD_disk_status+0x14>
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e002      	b.n	8000a22 <SD_disk_status+0x1a>
  return Stat;
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <SD_disk_status+0x28>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b2db      	uxtb	r3, r3
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000000 	.word	0x20000000

08000a34 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	4603      	mov	r3, r0
 8000a42:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d102      	bne.n	8000a50 <SD_disk_read+0x1c>
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d101      	bne.n	8000a54 <SD_disk_read+0x20>
 8000a50:	2304      	movs	r3, #4
 8000a52:	e051      	b.n	8000af8 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a54:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <SD_disk_read+0xcc>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SD_disk_read+0x32>
 8000a62:	2303      	movs	r3, #3
 8000a64:	e048      	b.n	8000af8 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000a66:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <SD_disk_read+0xd0>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <SD_disk_read+0x44>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	025b      	lsls	r3, r3, #9
 8000a76:	607b      	str	r3, [r7, #4]

  SELECT();
 8000a78:	f7ff fd28 	bl	80004cc <SELECT>

  if (count == 1)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d111      	bne.n	8000aa6 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	2051      	movs	r0, #81	; 0x51
 8000a86:	f7ff fe84 	bl	8000792 <SD_SendCmd>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d129      	bne.n	8000ae4 <SD_disk_read+0xb0>
 8000a90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a94:	68b8      	ldr	r0, [r7, #8]
 8000a96:	f7ff fe0b 	bl	80006b0 <SD_RxDataBlock>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d021      	beq.n	8000ae4 <SD_disk_read+0xb0>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	e01e      	b.n	8000ae4 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	2052      	movs	r0, #82	; 0x52
 8000aaa:	f7ff fe72 	bl	8000792 <SD_SendCmd>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d117      	bne.n	8000ae4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8000ab4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab8:	68b8      	ldr	r0, [r7, #8]
 8000aba:	f7ff fdf9 	bl	80006b0 <SD_RxDataBlock>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d00a      	beq.n	8000ada <SD_disk_read+0xa6>
        buff += 512;
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000aca:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d1ed      	bne.n	8000ab4 <SD_disk_read+0x80>
 8000ad8:	e000      	b.n	8000adc <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8000ada:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8000adc:	2100      	movs	r1, #0
 8000ade:	204c      	movs	r0, #76	; 0x4c
 8000ae0:	f7ff fe57 	bl	8000792 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8000ae4:	f7ff fd02 	bl	80004ec <DESELECT>
  SPI_RxByte();
 8000ae8:	f7ff fd44 	bl	8000574 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	bf14      	ite	ne
 8000af2:	2301      	movne	r3, #1
 8000af4:	2300      	moveq	r3, #0
 8000af6:	b2db      	uxtb	r3, r3
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000048 	.word	0x20000048

08000b08 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	4603      	mov	r3, r0
 8000b16:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d102      	bne.n	8000b24 <SD_disk_write+0x1c>
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d101      	bne.n	8000b28 <SD_disk_write+0x20>
 8000b24:	2304      	movs	r3, #4
 8000b26:	e06b      	b.n	8000c00 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b28:	4b37      	ldr	r3, [pc, #220]	; (8000c08 <SD_disk_write+0x100>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SD_disk_write+0x32>
 8000b36:	2303      	movs	r3, #3
 8000b38:	e062      	b.n	8000c00 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b3a:	4b33      	ldr	r3, [pc, #204]	; (8000c08 <SD_disk_write+0x100>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SD_disk_write+0x44>
 8000b48:	2302      	movs	r3, #2
 8000b4a:	e059      	b.n	8000c00 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	; (8000c0c <SD_disk_write+0x104>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	f003 0304 	and.w	r3, r3, #4
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <SD_disk_write+0x56>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	025b      	lsls	r3, r3, #9
 8000b5c:	607b      	str	r3, [r7, #4]

  SELECT();
 8000b5e:	f7ff fcb5 	bl	80004cc <SELECT>

  if (count == 1)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d110      	bne.n	8000b8a <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b68:	6879      	ldr	r1, [r7, #4]
 8000b6a:	2058      	movs	r0, #88	; 0x58
 8000b6c:	f7ff fe11 	bl	8000792 <SD_SendCmd>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d13a      	bne.n	8000bec <SD_disk_write+0xe4>
 8000b76:	21fe      	movs	r1, #254	; 0xfe
 8000b78:	68b8      	ldr	r0, [r7, #8]
 8000b7a:	f7ff fdc7 	bl	800070c <SD_TxDataBlock>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d033      	beq.n	8000bec <SD_disk_write+0xe4>
      count = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	e030      	b.n	8000bec <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8000b8a:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <SD_disk_write+0x104>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d007      	beq.n	8000ba6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000b96:	2100      	movs	r1, #0
 8000b98:	2077      	movs	r0, #119	; 0x77
 8000b9a:	f7ff fdfa 	bl	8000792 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000b9e:	6839      	ldr	r1, [r7, #0]
 8000ba0:	2057      	movs	r0, #87	; 0x57
 8000ba2:	f7ff fdf6 	bl	8000792 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	2059      	movs	r0, #89	; 0x59
 8000baa:	f7ff fdf2 	bl	8000792 <SD_SendCmd>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d11b      	bne.n	8000bec <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bb4:	21fc      	movs	r1, #252	; 0xfc
 8000bb6:	68b8      	ldr	r0, [r7, #8]
 8000bb8:	f7ff fda8 	bl	800070c <SD_TxDataBlock>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d00a      	beq.n	8000bd8 <SD_disk_write+0xd0>
        buff += 512;
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000bc8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1ee      	bne.n	8000bb4 <SD_disk_write+0xac>
 8000bd6:	e000      	b.n	8000bda <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bd8:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8000bda:	21fd      	movs	r1, #253	; 0xfd
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff fd95 	bl	800070c <SD_TxDataBlock>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d101      	bne.n	8000bec <SD_disk_write+0xe4>
      {
        count = 1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8000bec:	f7ff fc7e 	bl	80004ec <DESELECT>
  SPI_RxByte();
 8000bf0:	f7ff fcc0 	bl	8000574 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	bf14      	ite	ne
 8000bfa:	2301      	movne	r3, #1
 8000bfc:	2300      	moveq	r3, #0
 8000bfe:	b2db      	uxtb	r3, r3
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000048 	.word	0x20000048

08000c10 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b08b      	sub	sp, #44	; 0x2c
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	603a      	str	r2, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SD_disk_ioctl+0x1e>
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	e115      	b.n	8000e5a <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000c34:	79bb      	ldrb	r3, [r7, #6]
 8000c36:	2b05      	cmp	r3, #5
 8000c38:	d124      	bne.n	8000c84 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d012      	beq.n	8000c68 <SD_disk_ioctl+0x58>
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	dc1a      	bgt.n	8000c7c <SD_disk_ioctl+0x6c>
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d002      	beq.n	8000c50 <SD_disk_ioctl+0x40>
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d006      	beq.n	8000c5c <SD_disk_ioctl+0x4c>
 8000c4e:	e015      	b.n	8000c7c <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8000c50:	f7ff fd16 	bl	8000680 <SD_PowerOff>
      res = RES_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000c5a:	e0fc      	b.n	8000e56 <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 8000c5c:	f7ff fcce 	bl	80005fc <SD_PowerOn>
      res = RES_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000c66:	e0f6      	b.n	8000e56 <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8000c68:	6a3b      	ldr	r3, [r7, #32]
 8000c6a:	1c5c      	adds	r4, r3, #1
 8000c6c:	f7ff fd14 	bl	8000698 <SD_CheckPower>
 8000c70:	4603      	mov	r3, r0
 8000c72:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000c7a:	e0ec      	b.n	8000e56 <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c82:	e0e8      	b.n	8000e56 <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c84:	4b77      	ldr	r3, [pc, #476]	; (8000e64 <SD_disk_ioctl+0x254>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <SD_disk_ioctl+0x86>
 8000c92:	2303      	movs	r3, #3
 8000c94:	e0e1      	b.n	8000e5a <SD_disk_ioctl+0x24a>

    SELECT();
 8000c96:	f7ff fc19 	bl	80004cc <SELECT>

    switch (ctrl)
 8000c9a:	79bb      	ldrb	r3, [r7, #6]
 8000c9c:	2b0d      	cmp	r3, #13
 8000c9e:	f200 80cb 	bhi.w	8000e38 <SD_disk_ioctl+0x228>
 8000ca2:	a201      	add	r2, pc, #4	; (adr r2, 8000ca8 <SD_disk_ioctl+0x98>)
 8000ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca8:	08000da3 	.word	0x08000da3
 8000cac:	08000ce1 	.word	0x08000ce1
 8000cb0:	08000d93 	.word	0x08000d93
 8000cb4:	08000e39 	.word	0x08000e39
 8000cb8:	08000e39 	.word	0x08000e39
 8000cbc:	08000e39 	.word	0x08000e39
 8000cc0:	08000e39 	.word	0x08000e39
 8000cc4:	08000e39 	.word	0x08000e39
 8000cc8:	08000e39 	.word	0x08000e39
 8000ccc:	08000e39 	.word	0x08000e39
 8000cd0:	08000e39 	.word	0x08000e39
 8000cd4:	08000db5 	.word	0x08000db5
 8000cd8:	08000dd9 	.word	0x08000dd9
 8000cdc:	08000dfd 	.word	0x08000dfd
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2049      	movs	r0, #73	; 0x49
 8000ce4:	f7ff fd55 	bl	8000792 <SD_SendCmd>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f040 80a8 	bne.w	8000e40 <SD_disk_ioctl+0x230>
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2110      	movs	r1, #16
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fcda 	bl	80006b0 <SD_RxDataBlock>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f000 809e 	beq.w	8000e40 <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 8000d04:	7b3b      	ldrb	r3, [r7, #12]
 8000d06:	099b      	lsrs	r3, r3, #6
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d10e      	bne.n	8000d2c <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d0e:	7d7b      	ldrb	r3, [r7, #21]
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	7d3b      	ldrb	r3, [r7, #20]
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	021b      	lsls	r3, r3, #8
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	4413      	add	r3, r2
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	3301      	adds	r3, #1
 8000d20:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000d22:	8bfb      	ldrh	r3, [r7, #30]
 8000d24:	029a      	lsls	r2, r3, #10
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e02e      	b.n	8000d8a <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d2c:	7c7b      	ldrb	r3, [r7, #17]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	7dbb      	ldrb	r3, [r7, #22]
 8000d36:	09db      	lsrs	r3, r3, #7
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	4413      	add	r3, r2
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	7d7b      	ldrb	r3, [r7, #21]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	f003 0306 	and.w	r3, r3, #6
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	3302      	adds	r3, #2
 8000d50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d54:	7d3b      	ldrb	r3, [r7, #20]
 8000d56:	099b      	lsrs	r3, r3, #6
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	7cfb      	ldrb	r3, [r7, #19]
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	4413      	add	r3, r2
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	7cbb      	ldrb	r3, [r7, #18]
 8000d6a:	029b      	lsls	r3, r3, #10
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	4413      	add	r3, r2
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	3301      	adds	r3, #1
 8000d7a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d7c:	8bfa      	ldrh	r2, [r7, #30]
 8000d7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d82:	3b09      	subs	r3, #9
 8000d84:	409a      	lsls	r2, r3
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000d90:	e056      	b.n	8000e40 <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d98:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000da0:	e055      	b.n	8000e4e <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000da2:	f7ff fc11 	bl	80005c8 <SD_ReadyWait>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2bff      	cmp	r3, #255	; 0xff
 8000daa:	d14b      	bne.n	8000e44 <SD_disk_ioctl+0x234>
 8000dac:	2300      	movs	r3, #0
 8000dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000db2:	e047      	b.n	8000e44 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000db4:	2100      	movs	r1, #0
 8000db6:	2049      	movs	r0, #73	; 0x49
 8000db8:	f7ff fceb 	bl	8000792 <SD_SendCmd>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d142      	bne.n	8000e48 <SD_disk_ioctl+0x238>
 8000dc2:	2110      	movs	r1, #16
 8000dc4:	6a38      	ldr	r0, [r7, #32]
 8000dc6:	f7ff fc73 	bl	80006b0 <SD_RxDataBlock>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d03b      	beq.n	8000e48 <SD_disk_ioctl+0x238>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000dd6:	e037      	b.n	8000e48 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000dd8:	2100      	movs	r1, #0
 8000dda:	204a      	movs	r0, #74	; 0x4a
 8000ddc:	f7ff fcd9 	bl	8000792 <SD_SendCmd>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d132      	bne.n	8000e4c <SD_disk_ioctl+0x23c>
 8000de6:	2110      	movs	r1, #16
 8000de8:	6a38      	ldr	r0, [r7, #32]
 8000dea:	f7ff fc61 	bl	80006b0 <SD_RxDataBlock>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d02b      	beq.n	8000e4c <SD_disk_ioctl+0x23c>
 8000df4:	2300      	movs	r3, #0
 8000df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000dfa:	e027      	b.n	8000e4c <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	207a      	movs	r0, #122	; 0x7a
 8000e00:	f7ff fcc7 	bl	8000792 <SD_SendCmd>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d116      	bne.n	8000e38 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e10:	e00b      	b.n	8000e2a <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 8000e12:	6a3c      	ldr	r4, [r7, #32]
 8000e14:	1c63      	adds	r3, r4, #1
 8000e16:	623b      	str	r3, [r7, #32]
 8000e18:	f7ff fbac 	bl	8000574 <SPI_RxByte>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000e20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e24:	3301      	adds	r3, #1
 8000e26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d9ef      	bls.n	8000e12 <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e3e:	e006      	b.n	8000e4e <SD_disk_ioctl+0x23e>
      break;
 8000e40:	bf00      	nop
 8000e42:	e004      	b.n	8000e4e <SD_disk_ioctl+0x23e>
      break;
 8000e44:	bf00      	nop
 8000e46:	e002      	b.n	8000e4e <SD_disk_ioctl+0x23e>
      break;
 8000e48:	bf00      	nop
 8000e4a:	e000      	b.n	8000e4e <SD_disk_ioctl+0x23e>
      break;
 8000e4c:	bf00      	nop
    }

    DESELECT();
 8000e4e:	f7ff fb4d 	bl	80004ec <DESELECT>
    SPI_RxByte();
 8000e52:	f7ff fb8f 	bl	8000574 <SPI_RxByte>
  }

  return res;
 8000e56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	372c      	adds	r7, #44	; 0x2c
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd90      	pop	{r4, r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000000 	.word	0x20000000

08000e68 <HAL_UART_RxCpltCallback>:
uint8_t new_byte=0u;
const char* start="\nstart\n\0";
//PC10-TX; PC11-RX, PA7-MOSI;PA6_MISO;PA5-SCK;PA4-CS

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	new_byte=1;
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <HAL_UART_RxCpltCallback+0x1c>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	701a      	strb	r2, [r3, #0]
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20002154 	.word	0x20002154

08000e88 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80fb      	strh	r3, [r7, #6]
	if(!active)
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d10b      	bne.n	8000eb4 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		active=1;
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
		measurement_done=0;
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x50>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000ea8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eac:	480b      	ldr	r0, [pc, #44]	; (8000edc <HAL_GPIO_EXTI_Callback+0x54>)
 8000eae:	f000 ff10 	bl	8001cd2 <HAL_GPIO_TogglePin>
	}else{
		active=0;
		measurement_done=1;
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
	}
}
 8000eb2:	e00a      	b.n	8000eca <HAL_GPIO_EXTI_Callback+0x42>
		active=0;
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
		measurement_done=1;
 8000eba:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x50>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000ec0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <HAL_GPIO_EXTI_Callback+0x54>)
 8000ec6:	f000 ff04 	bl	8001cd2 <HAL_GPIO_TogglePin>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200000e9 	.word	0x200000e9
 8000ed8:	200000ea 	.word	0x200000ea
 8000edc:	40020c00 	.word	0x40020c00

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee4:	f000 fb06 	bl	80014f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee8:	f000 f868 	bl	8000fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eec:	f000 f930 	bl	8001150 <MX_GPIO_Init>
  MX_UART4_Init();
 8000ef0:	f000 f904 	bl	80010fc <MX_UART4_Init>
  MX_SPI1_Init();
 8000ef4:	f000 f8cc 	bl	8001090 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000ef8:	f002 ff60 	bl	8003dbc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart4, &uart_data, 1);
 8000efc:	2201      	movs	r2, #1
 8000efe:	4924      	ldr	r1, [pc, #144]	; (8000f90 <main+0xb0>)
 8000f00:	4824      	ldr	r0, [pc, #144]	; (8000f94 <main+0xb4>)
 8000f02:	f002 f830 	bl	8002f66 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(fres!=FR_OK)
 8000f06:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <main+0xb8>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d027      	beq.n	8000f5e <main+0x7e>
	  {
		  f_mount(&FatFs, "", 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	4922      	ldr	r1, [pc, #136]	; (8000f9c <main+0xbc>)
 8000f12:	4823      	ldr	r0, [pc, #140]	; (8000fa0 <main+0xc0>)
 8000f14:	f005 f99c 	bl	8006250 <f_mount>
		  fres = f_open(&fil, "test.txt", FA_OPEN_APPEND | FA_WRITE);
 8000f18:	2232      	movs	r2, #50	; 0x32
 8000f1a:	4922      	ldr	r1, [pc, #136]	; (8000fa4 <main+0xc4>)
 8000f1c:	4822      	ldr	r0, [pc, #136]	; (8000fa8 <main+0xc8>)
 8000f1e:	f005 f9dd 	bl	80062dc <f_open>
 8000f22:	4603      	mov	r3, r0
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <main+0xb8>)
 8000f28:	701a      	strb	r2, [r3, #0]
		  f_puts(start,&fil);
 8000f2a:	4b20      	ldr	r3, [pc, #128]	; (8000fac <main+0xcc>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	491e      	ldr	r1, [pc, #120]	; (8000fa8 <main+0xc8>)
 8000f30:	4618      	mov	r0, r3
 8000f32:	f005 fe6f 	bl	8006c14 <f_puts>

	  }
	  while(active)
 8000f36:	e012      	b.n	8000f5e <main+0x7e>
	  {
		  if(new_byte)
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <main+0xd0>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00e      	beq.n	8000f5e <main+0x7e>
		  {
			f_putc(uart_data, &fil);
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <main+0xb0>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	4918      	ldr	r1, [pc, #96]	; (8000fa8 <main+0xc8>)
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f005 fe46 	bl	8006bda <f_putc>
			new_byte=0;
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <main+0xd0>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart4, &uart_data, 1);
 8000f54:	2201      	movs	r2, #1
 8000f56:	490e      	ldr	r1, [pc, #56]	; (8000f90 <main+0xb0>)
 8000f58:	480e      	ldr	r0, [pc, #56]	; (8000f94 <main+0xb4>)
 8000f5a:	f002 f804 	bl	8002f66 <HAL_UART_Receive_IT>
	  while(active)
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <main+0xd4>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1e7      	bne.n	8000f38 <main+0x58>
		  }
	  }
	  if(measurement_done)
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <main+0xd8>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0c9      	beq.n	8000f06 <main+0x26>
	  {
		  f_close(&fil);
 8000f72:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <main+0xc8>)
 8000f74:	f005 fd90 	bl	8006a98 <f_close>
		  f_mount(NULL, "", 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	4908      	ldr	r1, [pc, #32]	; (8000f9c <main+0xbc>)
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f005 f967 	bl	8006250 <f_mount>
		  fres=FR_NOT_READY;
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <main+0xb8>)
 8000f84:	2203      	movs	r2, #3
 8000f86:	701a      	strb	r2, [r3, #0]
		  measurement_done=0;
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <main+0xd8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
	  if(fres!=FR_OK)
 8000f8e:	e7ba      	b.n	8000f06 <main+0x26>
 8000f90:	200000e8 	.word	0x200000e8
 8000f94:	200000a4 	.word	0x200000a4
 8000f98:	20000001 	.word	0x20000001
 8000f9c:	08006f1c 	.word	0x08006f1c
 8000fa0:	200000ec 	.word	0x200000ec
 8000fa4:	08006f20 	.word	0x08006f20
 8000fa8:	20001124 	.word	0x20001124
 8000fac:	20000004 	.word	0x20000004
 8000fb0:	20002154 	.word	0x20002154
 8000fb4:	200000e9 	.word	0x200000e9
 8000fb8:	200000ea 	.word	0x200000ea

08000fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b094      	sub	sp, #80	; 0x50
 8000fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc2:	f107 0320 	add.w	r3, r7, #32
 8000fc6:	2230      	movs	r2, #48	; 0x30
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f005 ff8c 	bl	8006ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	4b28      	ldr	r3, [pc, #160]	; (8001088 <SystemClock_Config+0xcc>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	4a27      	ldr	r2, [pc, #156]	; (8001088 <SystemClock_Config+0xcc>)
 8000fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fee:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff0:	4b25      	ldr	r3, [pc, #148]	; (8001088 <SystemClock_Config+0xcc>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	4b22      	ldr	r3, [pc, #136]	; (800108c <SystemClock_Config+0xd0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a21      	ldr	r2, [pc, #132]	; (800108c <SystemClock_Config+0xd0>)
 8001006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	4b1f      	ldr	r3, [pc, #124]	; (800108c <SystemClock_Config+0xd0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001018:	2302      	movs	r3, #2
 800101a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800101c:	2301      	movs	r3, #1
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001020:	2310      	movs	r3, #16
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001024:	2302      	movs	r3, #2
 8001026:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001028:	2300      	movs	r3, #0
 800102a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800102c:	2308      	movs	r3, #8
 800102e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001030:	2340      	movs	r3, #64	; 0x40
 8001032:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001034:	2302      	movs	r3, #2
 8001036:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001038:	2307      	movs	r3, #7
 800103a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103c:	f107 0320 	add.w	r3, r7, #32
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fe79 	bl	8001d38 <HAL_RCC_OscConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800104c:	f000 f8fc 	bl	8001248 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001050:	230f      	movs	r3, #15
 8001052:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001054:	2302      	movs	r3, #2
 8001056:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001058:	2390      	movs	r3, #144	; 0x90
 800105a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800105c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001060:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001062:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001066:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f001 f8da 	bl	8002228 <HAL_RCC_ClockConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800107a:	f000 f8e5 	bl	8001248 <Error_Handler>
  }
}
 800107e:	bf00      	nop
 8001080:	3750      	adds	r7, #80	; 0x50
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40007000 	.word	0x40007000

08001090 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <MX_SPI1_Init+0x64>)
 8001096:	4a18      	ldr	r2, [pc, #96]	; (80010f8 <MX_SPI1_Init+0x68>)
 8001098:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MX_SPI1_Init+0x64>)
 800109c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <MX_SPI1_Init+0x64>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MX_SPI1_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_SPI1_Init+0x64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_SPI1_Init+0x64>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_SPI1_Init+0x64>)
 80010bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_SPI1_Init+0x64>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <MX_SPI1_Init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_SPI1_Init+0x64>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <MX_SPI1_Init+0x64>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_SPI1_Init+0x64>)
 80010dc:	220a      	movs	r2, #10
 80010de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <MX_SPI1_Init+0x64>)
 80010e2:	f001 fac1 	bl	8002668 <HAL_SPI_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010ec:	f000 f8ac 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	2000004c 	.word	0x2000004c
 80010f8:	40013000 	.word	0x40013000

080010fc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_UART4_Init+0x4c>)
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <MX_UART4_Init+0x50>)
 8001104:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <MX_UART4_Init+0x4c>)
 8001108:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800110c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_UART4_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_UART4_Init+0x4c>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <MX_UART4_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_UART4_Init+0x4c>)
 8001122:	220c      	movs	r2, #12
 8001124:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MX_UART4_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_UART4_Init+0x4c>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_UART4_Init+0x4c>)
 8001134:	f001 feca 	bl	8002ecc <HAL_UART_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800113e:	f000 f883 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200000a4 	.word	0x200000a4
 800114c:	40004c00 	.word	0x40004c00

08001150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	4b34      	ldr	r3, [pc, #208]	; (800123c <MX_GPIO_Init+0xec>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a33      	ldr	r2, [pc, #204]	; (800123c <MX_GPIO_Init+0xec>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b31      	ldr	r3, [pc, #196]	; (800123c <MX_GPIO_Init+0xec>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	4b2d      	ldr	r3, [pc, #180]	; (800123c <MX_GPIO_Init+0xec>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a2c      	ldr	r2, [pc, #176]	; (800123c <MX_GPIO_Init+0xec>)
 800118c:	f043 0308 	orr.w	r3, r3, #8
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b2a      	ldr	r3, [pc, #168]	; (800123c <MX_GPIO_Init+0xec>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <MX_GPIO_Init+0xec>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a25      	ldr	r2, [pc, #148]	; (800123c <MX_GPIO_Init+0xec>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <MX_GPIO_Init+0xec>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2110      	movs	r1, #16
 80011be:	4820      	ldr	r0, [pc, #128]	; (8001240 <MX_GPIO_Init+0xf0>)
 80011c0:	f000 fd6e 	bl	8001ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ca:	481e      	ldr	r0, [pc, #120]	; (8001244 <MX_GPIO_Init+0xf4>)
 80011cc:	f000 fd68 	bl	8001ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011d0:	2301      	movs	r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	4619      	mov	r1, r3
 80011e4:	4816      	ldr	r0, [pc, #88]	; (8001240 <MX_GPIO_Init+0xf0>)
 80011e6:	f000 fbbf 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011ea:	2310      	movs	r3, #16
 80011ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	4619      	mov	r1, r3
 8001200:	480f      	ldr	r0, [pc, #60]	; (8001240 <MX_GPIO_Init+0xf0>)
 8001202:	f000 fbb1 	bl	8001968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800120a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	4619      	mov	r1, r3
 800121e:	4809      	ldr	r0, [pc, #36]	; (8001244 <MX_GPIO_Init+0xf4>)
 8001220:	f000 fba2 	bl	8001968 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	2100      	movs	r1, #0
 8001228:	2006      	movs	r0, #6
 800122a:	f000 fad4 	bl	80017d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800122e:	2006      	movs	r0, #6
 8001230:	f000 faed 	bl	800180e <HAL_NVIC_EnableIRQ>

}
 8001234:	bf00      	nop
 8001236:	3720      	adds	r7, #32
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40023800 	.word	0x40023800
 8001240:	40020000 	.word	0x40020000
 8001244:	40020c00 	.word	0x40020c00

08001248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124c:	b672      	cpsid	i
}
 800124e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001250:	e7fe      	b.n	8001250 <Error_Handler+0x8>
	...

08001254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <HAL_MspInit+0x4c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <HAL_MspInit+0x4c>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <HAL_MspInit+0x4c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_MspInit+0x4c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <HAL_MspInit+0x4c>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	6413      	str	r3, [r2, #64]	; 0x40
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_MspInit+0x4c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001292:	2007      	movs	r0, #7
 8001294:	f000 fa94 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40023800 	.word	0x40023800

080012a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a19      	ldr	r2, [pc, #100]	; (8001328 <HAL_SPI_MspInit+0x84>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d12b      	bne.n	800131e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <HAL_SPI_MspInit+0x88>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	4a17      	ldr	r2, [pc, #92]	; (800132c <HAL_SPI_MspInit+0x88>)
 80012d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012d4:	6453      	str	r3, [r2, #68]	; 0x44
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_SPI_MspInit+0x88>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_SPI_MspInit+0x88>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a10      	ldr	r2, [pc, #64]	; (800132c <HAL_SPI_MspInit+0x88>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <HAL_SPI_MspInit+0x88>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012fe:	23e0      	movs	r3, #224	; 0xe0
 8001300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001306:	2301      	movs	r3, #1
 8001308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800130e:	2305      	movs	r3, #5
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	4619      	mov	r1, r3
 8001318:	4805      	ldr	r0, [pc, #20]	; (8001330 <HAL_SPI_MspInit+0x8c>)
 800131a:	f000 fb25 	bl	8001968 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800131e:	bf00      	nop
 8001320:	3728      	adds	r7, #40	; 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40013000 	.word	0x40013000
 800132c:	40023800 	.word	0x40023800
 8001330:	40020000 	.word	0x40020000

08001334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a1d      	ldr	r2, [pc, #116]	; (80013c8 <HAL_UART_MspInit+0x94>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d134      	bne.n	80013c0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <HAL_UART_MspInit+0x98>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <HAL_UART_MspInit+0x98>)
 8001360:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001364:	6413      	str	r3, [r2, #64]	; 0x40
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_UART_MspInit+0x98>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_UART_MspInit+0x98>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a14      	ldr	r2, [pc, #80]	; (80013cc <HAL_UART_MspInit+0x98>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_UART_MspInit+0x98>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800138e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013a0:	2308      	movs	r3, #8
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	4809      	ldr	r0, [pc, #36]	; (80013d0 <HAL_UART_MspInit+0x9c>)
 80013ac:	f000 fadc 	bl	8001968 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	2034      	movs	r0, #52	; 0x34
 80013b6:	f000 fa0e 	bl	80017d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80013ba:	2034      	movs	r0, #52	; 0x34
 80013bc:	f000 fa27 	bl	800180e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80013c0:	bf00      	nop
 80013c2:	3728      	adds	r7, #40	; 0x28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40004c00 	.word	0x40004c00
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020800 	.word	0x40020800

080013d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <NMI_Handler+0x4>

080013da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <HardFault_Handler+0x4>

080013e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <MemManage_Handler+0x4>

080013e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if(Timer1 > 0)
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <SysTick_Handler+0x34>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d005      	beq.n	8001434 <SysTick_Handler+0x18>
  {
	  Timer1--;
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <SysTick_Handler+0x34>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	3b01      	subs	r3, #1
 800142e:	b29a      	uxth	r2, r3
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <SysTick_Handler+0x34>)
 8001432:	801a      	strh	r2, [r3, #0]
  }
  if(Timer2 > 0)
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <SysTick_Handler+0x38>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <SysTick_Handler+0x2c>
  {
	  Timer2--;
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <SysTick_Handler+0x38>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	3b01      	subs	r3, #1
 8001442:	b29a      	uxth	r2, r3
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <SysTick_Handler+0x38>)
 8001446:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001448:	f000 f8a6 	bl	8001598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000044 	.word	0x20000044
 8001454:	20000046 	.word	0x20000046

08001458 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800145c:	2001      	movs	r0, #1
 800145e:	f000 fc53 	bl	8001d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <UART4_IRQHandler+0x10>)
 800146e:	f001 fdab 	bl	8002fc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200000a4 	.word	0x200000a4

0800147c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <SystemInit+0x20>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001486:	4a05      	ldr	r2, [pc, #20]	; (800149c <SystemInit+0x20>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014a6:	490e      	ldr	r1, [pc, #56]	; (80014e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ac:	e002      	b.n	80014b4 <LoopCopyDataInit>

080014ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b2:	3304      	adds	r3, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b8:	d3f9      	bcc.n	80014ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014bc:	4c0b      	ldr	r4, [pc, #44]	; (80014ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c0:	e001      	b.n	80014c6 <LoopFillZerobss>

080014c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c4:	3204      	adds	r2, #4

080014c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c8:	d3fb      	bcc.n	80014c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014ca:	f7ff ffd7 	bl	800147c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ce:	f005 fce7 	bl	8006ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014d2:	f7ff fd05 	bl	8000ee0 <main>
  bx  lr    
 80014d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80014e4:	080073dc 	.word	0x080073dc
  ldr r2, =_sbss
 80014e8:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80014ec:	20002398 	.word	0x20002398

080014f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC_IRQHandler>
	...

080014f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_Init+0x40>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <HAL_Init+0x40>)
 80014fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001502:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_Init+0x40>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <HAL_Init+0x40>)
 800150a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800150e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_Init+0x40>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <HAL_Init+0x40>)
 8001516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151c:	2003      	movs	r0, #3
 800151e:	f000 f94f 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001522:	2000      	movs	r0, #0
 8001524:	f000 f808 	bl	8001538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001528:	f7ff fe94 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023c00 	.word	0x40023c00

08001538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_InitTick+0x54>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_InitTick+0x58>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001552:	fbb2 f3f3 	udiv	r3, r2, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f967 	bl	800182a <HAL_SYSTICK_Config>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e00e      	b.n	8001584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b0f      	cmp	r3, #15
 800156a:	d80a      	bhi.n	8001582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800156c:	2200      	movs	r2, #0
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f000 f92f 	bl	80017d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001578:	4a06      	ldr	r2, [pc, #24]	; (8001594 <HAL_InitTick+0x5c>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	e000      	b.n	8001584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000008 	.word	0x20000008
 8001590:	20000010 	.word	0x20000010
 8001594:	2000000c 	.word	0x2000000c

08001598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_IncTick+0x20>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_IncTick+0x24>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <HAL_IncTick+0x24>)
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000010 	.word	0x20000010
 80015bc:	20002158 	.word	0x20002158

080015c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTick;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <HAL_GetTick+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20002158 	.word	0x20002158

080015d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff ffee 	bl	80015c0 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f0:	d005      	beq.n	80015fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_Delay+0x44>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015fe:	bf00      	nop
 8001600:	f7ff ffde 	bl	80015c0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8f7      	bhi.n	8001600 <HAL_Delay+0x28>
  {
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000010 	.word	0x20000010

08001620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800164c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db0b      	blt.n	80016ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4907      	ldr	r1, [pc, #28]	; (80016bc <__NVIC_EnableIRQ+0x38>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	; (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800178c:	d301      	bcc.n	8001792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178e:	2301      	movs	r3, #1
 8001790:	e00f      	b.n	80017b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <SysTick_Config+0x40>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179a:	210f      	movs	r1, #15
 800179c:	f04f 30ff 	mov.w	r0, #4294967295
 80017a0:	f7ff ff8e 	bl	80016c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <SysTick_Config+0x40>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017aa:	4b04      	ldr	r3, [pc, #16]	; (80017bc <SysTick_Config+0x40>)
 80017ac:	2207      	movs	r2, #7
 80017ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	e000e010 	.word	0xe000e010

080017c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ff29 	bl	8001620 <__NVIC_SetPriorityGrouping>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e8:	f7ff ff3e 	bl	8001668 <__NVIC_GetPriorityGrouping>
 80017ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	6978      	ldr	r0, [r7, #20]
 80017f4:	f7ff ff8e 	bl	8001714 <NVIC_EncodePriority>
 80017f8:	4602      	mov	r2, r0
 80017fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff5d 	bl	80016c0 <__NVIC_SetPriority>
}
 8001806:	bf00      	nop
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff31 	bl	8001684 <__NVIC_EnableIRQ>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffa2 	bl	800177c <SysTick_Config>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b084      	sub	sp, #16
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001850:	f7ff feb6 	bl	80015c0 <HAL_GetTick>
 8001854:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d008      	beq.n	8001874 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2280      	movs	r2, #128	; 0x80
 8001866:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e052      	b.n	800191a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0216 	bic.w	r2, r2, #22
 8001882:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	695a      	ldr	r2, [r3, #20]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001892:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	2b00      	cmp	r3, #0
 800189a:	d103      	bne.n	80018a4 <HAL_DMA_Abort+0x62>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d007      	beq.n	80018b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0208 	bic.w	r2, r2, #8
 80018b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0201 	bic.w	r2, r2, #1
 80018c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018c4:	e013      	b.n	80018ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018c6:	f7ff fe7b 	bl	80015c0 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b05      	cmp	r3, #5
 80018d2:	d90c      	bls.n	80018ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2220      	movs	r2, #32
 80018d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2203      	movs	r2, #3
 80018de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e015      	b.n	800191a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1e4      	bne.n	80018c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001900:	223f      	movs	r2, #63	; 0x3f
 8001902:	409a      	lsls	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d004      	beq.n	8001940 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2280      	movs	r2, #128	; 0x80
 800193a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e00c      	b.n	800195a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2205      	movs	r2, #5
 8001944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0201 	bic.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	e16b      	b.n	8001c5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001984:	2201      	movs	r2, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	429a      	cmp	r2, r3
 800199e:	f040 815a 	bne.w	8001c56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d005      	beq.n	80019ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d130      	bne.n	8001a1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	2203      	movs	r2, #3
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f0:	2201      	movs	r2, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	f003 0201 	and.w	r2, r3, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d017      	beq.n	8001a58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2203      	movs	r2, #3
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d123      	bne.n	8001aac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	08da      	lsrs	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3208      	adds	r2, #8
 8001a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	220f      	movs	r2, #15
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	08da      	lsrs	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3208      	adds	r2, #8
 8001aa6:	69b9      	ldr	r1, [r7, #24]
 8001aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0203 	and.w	r2, r3, #3
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80b4 	beq.w	8001c56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b60      	ldr	r3, [pc, #384]	; (8001c74 <HAL_GPIO_Init+0x30c>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	4a5f      	ldr	r2, [pc, #380]	; (8001c74 <HAL_GPIO_Init+0x30c>)
 8001af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001afc:	6453      	str	r3, [r2, #68]	; 0x44
 8001afe:	4b5d      	ldr	r3, [pc, #372]	; (8001c74 <HAL_GPIO_Init+0x30c>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b0a:	4a5b      	ldr	r2, [pc, #364]	; (8001c78 <HAL_GPIO_Init+0x310>)
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	089b      	lsrs	r3, r3, #2
 8001b10:	3302      	adds	r3, #2
 8001b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	220f      	movs	r2, #15
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a52      	ldr	r2, [pc, #328]	; (8001c7c <HAL_GPIO_Init+0x314>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d02b      	beq.n	8001b8e <HAL_GPIO_Init+0x226>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a51      	ldr	r2, [pc, #324]	; (8001c80 <HAL_GPIO_Init+0x318>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d025      	beq.n	8001b8a <HAL_GPIO_Init+0x222>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a50      	ldr	r2, [pc, #320]	; (8001c84 <HAL_GPIO_Init+0x31c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d01f      	beq.n	8001b86 <HAL_GPIO_Init+0x21e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a4f      	ldr	r2, [pc, #316]	; (8001c88 <HAL_GPIO_Init+0x320>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d019      	beq.n	8001b82 <HAL_GPIO_Init+0x21a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a4e      	ldr	r2, [pc, #312]	; (8001c8c <HAL_GPIO_Init+0x324>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d013      	beq.n	8001b7e <HAL_GPIO_Init+0x216>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a4d      	ldr	r2, [pc, #308]	; (8001c90 <HAL_GPIO_Init+0x328>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d00d      	beq.n	8001b7a <HAL_GPIO_Init+0x212>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a4c      	ldr	r2, [pc, #304]	; (8001c94 <HAL_GPIO_Init+0x32c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d007      	beq.n	8001b76 <HAL_GPIO_Init+0x20e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4b      	ldr	r2, [pc, #300]	; (8001c98 <HAL_GPIO_Init+0x330>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d101      	bne.n	8001b72 <HAL_GPIO_Init+0x20a>
 8001b6e:	2307      	movs	r3, #7
 8001b70:	e00e      	b.n	8001b90 <HAL_GPIO_Init+0x228>
 8001b72:	2308      	movs	r3, #8
 8001b74:	e00c      	b.n	8001b90 <HAL_GPIO_Init+0x228>
 8001b76:	2306      	movs	r3, #6
 8001b78:	e00a      	b.n	8001b90 <HAL_GPIO_Init+0x228>
 8001b7a:	2305      	movs	r3, #5
 8001b7c:	e008      	b.n	8001b90 <HAL_GPIO_Init+0x228>
 8001b7e:	2304      	movs	r3, #4
 8001b80:	e006      	b.n	8001b90 <HAL_GPIO_Init+0x228>
 8001b82:	2303      	movs	r3, #3
 8001b84:	e004      	b.n	8001b90 <HAL_GPIO_Init+0x228>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e002      	b.n	8001b90 <HAL_GPIO_Init+0x228>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <HAL_GPIO_Init+0x228>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	69fa      	ldr	r2, [r7, #28]
 8001b92:	f002 0203 	and.w	r2, r2, #3
 8001b96:	0092      	lsls	r2, r2, #2
 8001b98:	4093      	lsls	r3, r2
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ba0:	4935      	ldr	r1, [pc, #212]	; (8001c78 <HAL_GPIO_Init+0x310>)
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	089b      	lsrs	r3, r3, #2
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bae:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <HAL_GPIO_Init+0x334>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bd2:	4a32      	ldr	r2, [pc, #200]	; (8001c9c <HAL_GPIO_Init+0x334>)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bd8:	4b30      	ldr	r3, [pc, #192]	; (8001c9c <HAL_GPIO_Init+0x334>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bfc:	4a27      	ldr	r2, [pc, #156]	; (8001c9c <HAL_GPIO_Init+0x334>)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c02:	4b26      	ldr	r3, [pc, #152]	; (8001c9c <HAL_GPIO_Init+0x334>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c26:	4a1d      	ldr	r2, [pc, #116]	; (8001c9c <HAL_GPIO_Init+0x334>)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <HAL_GPIO_Init+0x334>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c50:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <HAL_GPIO_Init+0x334>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	61fb      	str	r3, [r7, #28]
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	2b0f      	cmp	r3, #15
 8001c60:	f67f ae90 	bls.w	8001984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40013800 	.word	0x40013800
 8001c7c:	40020000 	.word	0x40020000
 8001c80:	40020400 	.word	0x40020400
 8001c84:	40020800 	.word	0x40020800
 8001c88:	40020c00 	.word	0x40020c00
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40021400 	.word	0x40021400
 8001c94:	40021800 	.word	0x40021800
 8001c98:	40021c00 	.word	0x40021c00
 8001c9c:	40013c00 	.word	0x40013c00

08001ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	807b      	strh	r3, [r7, #2]
 8001cac:	4613      	mov	r3, r2
 8001cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cb0:	787b      	ldrb	r3, [r7, #1]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cb6:	887a      	ldrh	r2, [r7, #2]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cbc:	e003      	b.n	8001cc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cbe:	887b      	ldrh	r3, [r7, #2]
 8001cc0:	041a      	lsls	r2, r3, #16
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	619a      	str	r2, [r3, #24]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b085      	sub	sp, #20
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ce4:	887a      	ldrh	r2, [r7, #2]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	041a      	lsls	r2, r3, #16
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	887b      	ldrh	r3, [r7, #2]
 8001cf2:	400b      	ands	r3, r1
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	619a      	str	r2, [r3, #24]
}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d006      	beq.n	8001d2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d1e:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f8ae 	bl	8000e88 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40013c00 	.word	0x40013c00

08001d38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e267      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d075      	beq.n	8001e42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d56:	4b88      	ldr	r3, [pc, #544]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d00c      	beq.n	8001d7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d62:	4b85      	ldr	r3, [pc, #532]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d112      	bne.n	8001d94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d6e:	4b82      	ldr	r3, [pc, #520]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d7a:	d10b      	bne.n	8001d94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7c:	4b7e      	ldr	r3, [pc, #504]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d05b      	beq.n	8001e40 <HAL_RCC_OscConfig+0x108>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d157      	bne.n	8001e40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e242      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9c:	d106      	bne.n	8001dac <HAL_RCC_OscConfig+0x74>
 8001d9e:	4b76      	ldr	r3, [pc, #472]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a75      	ldr	r2, [pc, #468]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e01d      	b.n	8001de8 <HAL_RCC_OscConfig+0xb0>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db4:	d10c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x98>
 8001db6:	4b70      	ldr	r3, [pc, #448]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a6f      	ldr	r2, [pc, #444]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	4b6d      	ldr	r3, [pc, #436]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a6c      	ldr	r2, [pc, #432]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e00b      	b.n	8001de8 <HAL_RCC_OscConfig+0xb0>
 8001dd0:	4b69      	ldr	r3, [pc, #420]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a68      	ldr	r2, [pc, #416]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	4b66      	ldr	r3, [pc, #408]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a65      	ldr	r2, [pc, #404]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff fbe6 	bl	80015c0 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df8:	f7ff fbe2 	bl	80015c0 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	; 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e207      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	4b5b      	ldr	r3, [pc, #364]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0xc0>
 8001e16:	e014      	b.n	8001e42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7ff fbd2 	bl	80015c0 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e20:	f7ff fbce 	bl	80015c0 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	; 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e1f3      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e32:	4b51      	ldr	r3, [pc, #324]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0xe8>
 8001e3e:	e000      	b.n	8001e42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d063      	beq.n	8001f16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e4e:	4b4a      	ldr	r3, [pc, #296]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00b      	beq.n	8001e72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e5a:	4b47      	ldr	r3, [pc, #284]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d11c      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e66:	4b44      	ldr	r3, [pc, #272]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d116      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e72:	4b41      	ldr	r3, [pc, #260]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d005      	beq.n	8001e8a <HAL_RCC_OscConfig+0x152>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d001      	beq.n	8001e8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e1c7      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8a:	4b3b      	ldr	r3, [pc, #236]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4937      	ldr	r1, [pc, #220]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9e:	e03a      	b.n	8001f16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d020      	beq.n	8001eea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea8:	4b34      	ldr	r3, [pc, #208]	; (8001f7c <HAL_RCC_OscConfig+0x244>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eae:	f7ff fb87 	bl	80015c0 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb6:	f7ff fb83 	bl	80015c0 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e1a8      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec8:	4b2b      	ldr	r3, [pc, #172]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed4:	4b28      	ldr	r3, [pc, #160]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4925      	ldr	r1, [pc, #148]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	600b      	str	r3, [r1, #0]
 8001ee8:	e015      	b.n	8001f16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eea:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <HAL_RCC_OscConfig+0x244>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef0:	f7ff fb66 	bl	80015c0 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ef8:	f7ff fb62 	bl	80015c0 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e187      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0a:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d036      	beq.n	8001f90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d016      	beq.n	8001f58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <HAL_RCC_OscConfig+0x248>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f30:	f7ff fb46 	bl	80015c0 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f38:	f7ff fb42 	bl	80015c0 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e167      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0x200>
 8001f56:	e01b      	b.n	8001f90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_RCC_OscConfig+0x248>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5e:	f7ff fb2f 	bl	80015c0 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f64:	e00e      	b.n	8001f84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f66:	f7ff fb2b 	bl	80015c0 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d907      	bls.n	8001f84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e150      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	42470000 	.word	0x42470000
 8001f80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f84:	4b88      	ldr	r3, [pc, #544]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 8001f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1ea      	bne.n	8001f66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 8097 	beq.w	80020cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa2:	4b81      	ldr	r3, [pc, #516]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10f      	bne.n	8001fce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	4b7d      	ldr	r3, [pc, #500]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	4a7c      	ldr	r2, [pc, #496]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 8001fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbe:	4b7a      	ldr	r3, [pc, #488]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fce:	4b77      	ldr	r3, [pc, #476]	; (80021ac <HAL_RCC_OscConfig+0x474>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d118      	bne.n	800200c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fda:	4b74      	ldr	r3, [pc, #464]	; (80021ac <HAL_RCC_OscConfig+0x474>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a73      	ldr	r2, [pc, #460]	; (80021ac <HAL_RCC_OscConfig+0x474>)
 8001fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe6:	f7ff faeb 	bl	80015c0 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fee:	f7ff fae7 	bl	80015c0 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e10c      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002000:	4b6a      	ldr	r3, [pc, #424]	; (80021ac <HAL_RCC_OscConfig+0x474>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f0      	beq.n	8001fee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d106      	bne.n	8002022 <HAL_RCC_OscConfig+0x2ea>
 8002014:	4b64      	ldr	r3, [pc, #400]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002018:	4a63      	ldr	r2, [pc, #396]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6713      	str	r3, [r2, #112]	; 0x70
 8002020:	e01c      	b.n	800205c <HAL_RCC_OscConfig+0x324>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b05      	cmp	r3, #5
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0x30c>
 800202a:	4b5f      	ldr	r3, [pc, #380]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 800202c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202e:	4a5e      	ldr	r2, [pc, #376]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 8002030:	f043 0304 	orr.w	r3, r3, #4
 8002034:	6713      	str	r3, [r2, #112]	; 0x70
 8002036:	4b5c      	ldr	r3, [pc, #368]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 8002038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203a:	4a5b      	ldr	r2, [pc, #364]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6713      	str	r3, [r2, #112]	; 0x70
 8002042:	e00b      	b.n	800205c <HAL_RCC_OscConfig+0x324>
 8002044:	4b58      	ldr	r3, [pc, #352]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002048:	4a57      	ldr	r2, [pc, #348]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 800204a:	f023 0301 	bic.w	r3, r3, #1
 800204e:	6713      	str	r3, [r2, #112]	; 0x70
 8002050:	4b55      	ldr	r3, [pc, #340]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 8002052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002054:	4a54      	ldr	r2, [pc, #336]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 8002056:	f023 0304 	bic.w	r3, r3, #4
 800205a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d015      	beq.n	8002090 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002064:	f7ff faac 	bl	80015c0 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206a:	e00a      	b.n	8002082 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800206c:	f7ff faa8 	bl	80015c0 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f241 3288 	movw	r2, #5000	; 0x1388
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e0cb      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002082:	4b49      	ldr	r3, [pc, #292]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 8002084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0ee      	beq.n	800206c <HAL_RCC_OscConfig+0x334>
 800208e:	e014      	b.n	80020ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002090:	f7ff fa96 	bl	80015c0 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002096:	e00a      	b.n	80020ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002098:	f7ff fa92 	bl	80015c0 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e0b5      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ae:	4b3e      	ldr	r3, [pc, #248]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 80020b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1ee      	bne.n	8002098 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ba:	7dfb      	ldrb	r3, [r7, #23]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d105      	bne.n	80020cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c0:	4b39      	ldr	r3, [pc, #228]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	4a38      	ldr	r2, [pc, #224]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 80020c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80a1 	beq.w	8002218 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020d6:	4b34      	ldr	r3, [pc, #208]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d05c      	beq.n	800219c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d141      	bne.n	800216e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ea:	4b31      	ldr	r3, [pc, #196]	; (80021b0 <HAL_RCC_OscConfig+0x478>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7ff fa66 	bl	80015c0 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f8:	f7ff fa62 	bl	80015c0 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e087      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210a:	4b27      	ldr	r3, [pc, #156]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69da      	ldr	r2, [r3, #28]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	019b      	lsls	r3, r3, #6
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	085b      	lsrs	r3, r3, #1
 800212e:	3b01      	subs	r3, #1
 8002130:	041b      	lsls	r3, r3, #16
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002138:	061b      	lsls	r3, r3, #24
 800213a:	491b      	ldr	r1, [pc, #108]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 800213c:	4313      	orrs	r3, r2
 800213e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002140:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <HAL_RCC_OscConfig+0x478>)
 8002142:	2201      	movs	r2, #1
 8002144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002146:	f7ff fa3b 	bl	80015c0 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800214e:	f7ff fa37 	bl	80015c0 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e05c      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x416>
 800216c:	e054      	b.n	8002218 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216e:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <HAL_RCC_OscConfig+0x478>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7ff fa24 	bl	80015c0 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217c:	f7ff fa20 	bl	80015c0 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e045      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218e:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_RCC_OscConfig+0x470>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x444>
 800219a:	e03d      	b.n	8002218 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d107      	bne.n	80021b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e038      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40007000 	.word	0x40007000
 80021b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021b4:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <HAL_RCC_OscConfig+0x4ec>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d028      	beq.n	8002214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d121      	bne.n	8002214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021da:	429a      	cmp	r2, r3
 80021dc:	d11a      	bne.n	8002214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021e4:	4013      	ands	r3, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d111      	bne.n	8002214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fa:	085b      	lsrs	r3, r3, #1
 80021fc:	3b01      	subs	r3, #1
 80021fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002200:	429a      	cmp	r2, r3
 8002202:	d107      	bne.n	8002214 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002210:	429a      	cmp	r2, r3
 8002212:	d001      	beq.n	8002218 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800

08002228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0cc      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800223c:	4b68      	ldr	r3, [pc, #416]	; (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d90c      	bls.n	8002264 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224a:	4b65      	ldr	r3, [pc, #404]	; (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002252:	4b63      	ldr	r3, [pc, #396]	; (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0b8      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d020      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800227c:	4b59      	ldr	r3, [pc, #356]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4a58      	ldr	r2, [pc, #352]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002286:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002294:	4b53      	ldr	r3, [pc, #332]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4a52      	ldr	r2, [pc, #328]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800229e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a0:	4b50      	ldr	r3, [pc, #320]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	494d      	ldr	r1, [pc, #308]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d044      	beq.n	8002348 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d107      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c6:	4b47      	ldr	r3, [pc, #284]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d119      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e07f      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d003      	beq.n	80022e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e6:	4b3f      	ldr	r3, [pc, #252]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e06f      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f6:	4b3b      	ldr	r3, [pc, #236]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e067      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002306:	4b37      	ldr	r3, [pc, #220]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f023 0203 	bic.w	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4934      	ldr	r1, [pc, #208]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002314:	4313      	orrs	r3, r2
 8002316:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002318:	f7ff f952 	bl	80015c0 <HAL_GetTick>
 800231c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	e00a      	b.n	8002336 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002320:	f7ff f94e 	bl	80015c0 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	; 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e04f      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	4b2b      	ldr	r3, [pc, #172]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 020c 	and.w	r2, r3, #12
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	429a      	cmp	r2, r3
 8002346:	d1eb      	bne.n	8002320 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002348:	4b25      	ldr	r3, [pc, #148]	; (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d20c      	bcs.n	8002370 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e032      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4916      	ldr	r1, [pc, #88]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d009      	beq.n	80023ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800239a:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	490e      	ldr	r1, [pc, #56]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023ae:	f000 f821 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 80023b2:	4602      	mov	r2, r0
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	490a      	ldr	r1, [pc, #40]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 80023c0:	5ccb      	ldrb	r3, [r1, r3]
 80023c2:	fa22 f303 	lsr.w	r3, r2, r3
 80023c6:	4a09      	ldr	r2, [pc, #36]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_RCC_ClockConfig+0x1c8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff f8b2 	bl	8001538 <HAL_InitTick>

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40023c00 	.word	0x40023c00
 80023e4:	40023800 	.word	0x40023800
 80023e8:	08006f74 	.word	0x08006f74
 80023ec:	20000008 	.word	0x20000008
 80023f0:	2000000c 	.word	0x2000000c

080023f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f8:	b094      	sub	sp, #80	; 0x50
 80023fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002400:	2300      	movs	r3, #0
 8002402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002404:	2300      	movs	r3, #0
 8002406:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800240c:	4b79      	ldr	r3, [pc, #484]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 030c 	and.w	r3, r3, #12
 8002414:	2b08      	cmp	r3, #8
 8002416:	d00d      	beq.n	8002434 <HAL_RCC_GetSysClockFreq+0x40>
 8002418:	2b08      	cmp	r3, #8
 800241a:	f200 80e1 	bhi.w	80025e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0x34>
 8002422:	2b04      	cmp	r3, #4
 8002424:	d003      	beq.n	800242e <HAL_RCC_GetSysClockFreq+0x3a>
 8002426:	e0db      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002428:	4b73      	ldr	r3, [pc, #460]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800242a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800242c:	e0db      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800242e:	4b73      	ldr	r3, [pc, #460]	; (80025fc <HAL_RCC_GetSysClockFreq+0x208>)
 8002430:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002432:	e0d8      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002434:	4b6f      	ldr	r3, [pc, #444]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800243c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800243e:	4b6d      	ldr	r3, [pc, #436]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d063      	beq.n	8002512 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800244a:	4b6a      	ldr	r3, [pc, #424]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	099b      	lsrs	r3, r3, #6
 8002450:	2200      	movs	r2, #0
 8002452:	63bb      	str	r3, [r7, #56]	; 0x38
 8002454:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800245c:	633b      	str	r3, [r7, #48]	; 0x30
 800245e:	2300      	movs	r3, #0
 8002460:	637b      	str	r3, [r7, #52]	; 0x34
 8002462:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002466:	4622      	mov	r2, r4
 8002468:	462b      	mov	r3, r5
 800246a:	f04f 0000 	mov.w	r0, #0
 800246e:	f04f 0100 	mov.w	r1, #0
 8002472:	0159      	lsls	r1, r3, #5
 8002474:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002478:	0150      	lsls	r0, r2, #5
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4621      	mov	r1, r4
 8002480:	1a51      	subs	r1, r2, r1
 8002482:	6139      	str	r1, [r7, #16]
 8002484:	4629      	mov	r1, r5
 8002486:	eb63 0301 	sbc.w	r3, r3, r1
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002498:	4659      	mov	r1, fp
 800249a:	018b      	lsls	r3, r1, #6
 800249c:	4651      	mov	r1, sl
 800249e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024a2:	4651      	mov	r1, sl
 80024a4:	018a      	lsls	r2, r1, #6
 80024a6:	4651      	mov	r1, sl
 80024a8:	ebb2 0801 	subs.w	r8, r2, r1
 80024ac:	4659      	mov	r1, fp
 80024ae:	eb63 0901 	sbc.w	r9, r3, r1
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024c6:	4690      	mov	r8, r2
 80024c8:	4699      	mov	r9, r3
 80024ca:	4623      	mov	r3, r4
 80024cc:	eb18 0303 	adds.w	r3, r8, r3
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	462b      	mov	r3, r5
 80024d4:	eb49 0303 	adc.w	r3, r9, r3
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024e6:	4629      	mov	r1, r5
 80024e8:	024b      	lsls	r3, r1, #9
 80024ea:	4621      	mov	r1, r4
 80024ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024f0:	4621      	mov	r1, r4
 80024f2:	024a      	lsls	r2, r1, #9
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024fa:	2200      	movs	r2, #0
 80024fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80024fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002500:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002504:	f7fd fe60 	bl	80001c8 <__aeabi_uldivmod>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4613      	mov	r3, r2
 800250e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002510:	e058      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002512:	4b38      	ldr	r3, [pc, #224]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	099b      	lsrs	r3, r3, #6
 8002518:	2200      	movs	r2, #0
 800251a:	4618      	mov	r0, r3
 800251c:	4611      	mov	r1, r2
 800251e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002522:	623b      	str	r3, [r7, #32]
 8002524:	2300      	movs	r3, #0
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
 8002528:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800252c:	4642      	mov	r2, r8
 800252e:	464b      	mov	r3, r9
 8002530:	f04f 0000 	mov.w	r0, #0
 8002534:	f04f 0100 	mov.w	r1, #0
 8002538:	0159      	lsls	r1, r3, #5
 800253a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800253e:	0150      	lsls	r0, r2, #5
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4641      	mov	r1, r8
 8002546:	ebb2 0a01 	subs.w	sl, r2, r1
 800254a:	4649      	mov	r1, r9
 800254c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800255c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002560:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002564:	ebb2 040a 	subs.w	r4, r2, sl
 8002568:	eb63 050b 	sbc.w	r5, r3, fp
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	00eb      	lsls	r3, r5, #3
 8002576:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800257a:	00e2      	lsls	r2, r4, #3
 800257c:	4614      	mov	r4, r2
 800257e:	461d      	mov	r5, r3
 8002580:	4643      	mov	r3, r8
 8002582:	18e3      	adds	r3, r4, r3
 8002584:	603b      	str	r3, [r7, #0]
 8002586:	464b      	mov	r3, r9
 8002588:	eb45 0303 	adc.w	r3, r5, r3
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	e9d7 4500 	ldrd	r4, r5, [r7]
 800259a:	4629      	mov	r1, r5
 800259c:	028b      	lsls	r3, r1, #10
 800259e:	4621      	mov	r1, r4
 80025a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025a4:	4621      	mov	r1, r4
 80025a6:	028a      	lsls	r2, r1, #10
 80025a8:	4610      	mov	r0, r2
 80025aa:	4619      	mov	r1, r3
 80025ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ae:	2200      	movs	r2, #0
 80025b0:	61bb      	str	r3, [r7, #24]
 80025b2:	61fa      	str	r2, [r7, #28]
 80025b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025b8:	f7fd fe06 	bl	80001c8 <__aeabi_uldivmod>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4613      	mov	r3, r2
 80025c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	0c1b      	lsrs	r3, r3, #16
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	3301      	adds	r3, #1
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80025d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025de:	e002      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80025e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3750      	adds	r7, #80	; 0x50
 80025ec:	46bd      	mov	sp, r7
 80025ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800
 80025f8:	00f42400 	.word	0x00f42400
 80025fc:	007a1200 	.word	0x007a1200

08002600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <HAL_RCC_GetHCLKFreq+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000008 	.word	0x20000008

08002618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800261c:	f7ff fff0 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8002620:	4602      	mov	r2, r0
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	0a9b      	lsrs	r3, r3, #10
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	4903      	ldr	r1, [pc, #12]	; (800263c <HAL_RCC_GetPCLK1Freq+0x24>)
 800262e:	5ccb      	ldrb	r3, [r1, r3]
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002634:	4618      	mov	r0, r3
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40023800 	.word	0x40023800
 800263c:	08006f84 	.word	0x08006f84

08002640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002644:	f7ff ffdc 	bl	8002600 <HAL_RCC_GetHCLKFreq>
 8002648:	4602      	mov	r2, r0
 800264a:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	0b5b      	lsrs	r3, r3, #13
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	4903      	ldr	r1, [pc, #12]	; (8002664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002656:	5ccb      	ldrb	r3, [r1, r3]
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40023800 	.word	0x40023800
 8002664:	08006f84 	.word	0x08006f84

08002668 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e07b      	b.n	8002772 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	2b00      	cmp	r3, #0
 8002680:	d108      	bne.n	8002694 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800268a:	d009      	beq.n	80026a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	61da      	str	r2, [r3, #28]
 8002692:	e005      	b.n	80026a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d106      	bne.n	80026c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7fe fdf2 	bl	80012a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002710:	431a      	orrs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002724:	ea42 0103 	orr.w	r1, r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	0c1b      	lsrs	r3, r3, #16
 800273e:	f003 0104 	and.w	r1, r3, #4
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	f003 0210 	and.w	r2, r3, #16
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	69da      	ldr	r2, [r3, #28]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002760:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b088      	sub	sp, #32
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	603b      	str	r3, [r7, #0]
 8002786:	4613      	mov	r3, r2
 8002788:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_SPI_Transmit+0x22>
 8002798:	2302      	movs	r3, #2
 800279a:	e126      	b.n	80029ea <HAL_SPI_Transmit+0x270>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027a4:	f7fe ff0c 	bl	80015c0 <HAL_GetTick>
 80027a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d002      	beq.n	80027c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027ba:	2302      	movs	r3, #2
 80027bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027be:	e10b      	b.n	80029d8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <HAL_SPI_Transmit+0x52>
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d102      	bne.n	80027d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027d0:	e102      	b.n	80029d8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2203      	movs	r2, #3
 80027d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	88fa      	ldrh	r2, [r7, #6]
 80027ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	88fa      	ldrh	r2, [r7, #6]
 80027f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002818:	d10f      	bne.n	800283a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002828:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002838:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002844:	2b40      	cmp	r3, #64	; 0x40
 8002846:	d007      	beq.n	8002858 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002856:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002860:	d14b      	bne.n	80028fa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <HAL_SPI_Transmit+0xf6>
 800286a:	8afb      	ldrh	r3, [r7, #22]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d13e      	bne.n	80028ee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	881a      	ldrh	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	1c9a      	adds	r2, r3, #2
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800288a:	b29b      	uxth	r3, r3
 800288c:	3b01      	subs	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002894:	e02b      	b.n	80028ee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d112      	bne.n	80028ca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	881a      	ldrh	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	1c9a      	adds	r2, r3, #2
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028be:	b29b      	uxth	r3, r3
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80028c8:	e011      	b.n	80028ee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028ca:	f7fe fe79 	bl	80015c0 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d803      	bhi.n	80028e2 <HAL_SPI_Transmit+0x168>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e0:	d102      	bne.n	80028e8 <HAL_SPI_Transmit+0x16e>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d102      	bne.n	80028ee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028ec:	e074      	b.n	80029d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1ce      	bne.n	8002896 <HAL_SPI_Transmit+0x11c>
 80028f8:	e04c      	b.n	8002994 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_SPI_Transmit+0x18e>
 8002902:	8afb      	ldrh	r3, [r7, #22]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d140      	bne.n	800298a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	330c      	adds	r3, #12
 8002912:	7812      	ldrb	r2, [r2, #0]
 8002914:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800292e:	e02c      	b.n	800298a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b02      	cmp	r3, #2
 800293c:	d113      	bne.n	8002966 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	330c      	adds	r3, #12
 8002948:	7812      	ldrb	r2, [r2, #0]
 800294a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800295a:	b29b      	uxth	r3, r3
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	86da      	strh	r2, [r3, #54]	; 0x36
 8002964:	e011      	b.n	800298a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002966:	f7fe fe2b 	bl	80015c0 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d803      	bhi.n	800297e <HAL_SPI_Transmit+0x204>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d102      	bne.n	8002984 <HAL_SPI_Transmit+0x20a>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d102      	bne.n	800298a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002988:	e026      	b.n	80029d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800298e:	b29b      	uxth	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1cd      	bne.n	8002930 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	6839      	ldr	r1, [r7, #0]
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 fa55 	bl	8002e48 <SPI_EndRxTxTransaction>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10a      	bne.n	80029c8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	77fb      	strb	r3, [r7, #31]
 80029d4:	e000      	b.n	80029d8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80029d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3720      	adds	r7, #32
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b08c      	sub	sp, #48	; 0x30
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a00:	2301      	movs	r3, #1
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_SPI_TransmitReceive+0x26>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e18a      	b.n	8002d2e <HAL_SPI_TransmitReceive+0x33c>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a20:	f7fe fdce 	bl	80015c0 <HAL_GetTick>
 8002a24:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a36:	887b      	ldrh	r3, [r7, #2]
 8002a38:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d00f      	beq.n	8002a62 <HAL_SPI_TransmitReceive+0x70>
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a48:	d107      	bne.n	8002a5a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d103      	bne.n	8002a5a <HAL_SPI_TransmitReceive+0x68>
 8002a52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d003      	beq.n	8002a62 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a60:	e15b      	b.n	8002d1a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_SPI_TransmitReceive+0x82>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <HAL_SPI_TransmitReceive+0x82>
 8002a6e:	887b      	ldrh	r3, [r7, #2]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d103      	bne.n	8002a7c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a7a:	e14e      	b.n	8002d1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d003      	beq.n	8002a90 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2205      	movs	r2, #5
 8002a8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	887a      	ldrh	r2, [r7, #2]
 8002aa0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	887a      	ldrh	r2, [r7, #2]
 8002aa6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	887a      	ldrh	r2, [r7, #2]
 8002ab2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	887a      	ldrh	r2, [r7, #2]
 8002ab8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad0:	2b40      	cmp	r3, #64	; 0x40
 8002ad2:	d007      	beq.n	8002ae4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ae2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aec:	d178      	bne.n	8002be0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_SPI_TransmitReceive+0x10a>
 8002af6:	8b7b      	ldrh	r3, [r7, #26]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d166      	bne.n	8002bca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	881a      	ldrh	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	1c9a      	adds	r2, r3, #2
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b20:	e053      	b.n	8002bca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d11b      	bne.n	8002b68 <HAL_SPI_TransmitReceive+0x176>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d016      	beq.n	8002b68 <HAL_SPI_TransmitReceive+0x176>
 8002b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d113      	bne.n	8002b68 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	881a      	ldrh	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	1c9a      	adds	r2, r3, #2
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d119      	bne.n	8002baa <HAL_SPI_TransmitReceive+0x1b8>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d014      	beq.n	8002baa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8a:	b292      	uxth	r2, r2
 8002b8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b92:	1c9a      	adds	r2, r3, #2
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002baa:	f7fe fd09 	bl	80015c0 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d807      	bhi.n	8002bca <HAL_SPI_TransmitReceive+0x1d8>
 8002bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc0:	d003      	beq.n	8002bca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002bc8:	e0a7      	b.n	8002d1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1a6      	bne.n	8002b22 <HAL_SPI_TransmitReceive+0x130>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1a1      	bne.n	8002b22 <HAL_SPI_TransmitReceive+0x130>
 8002bde:	e07c      	b.n	8002cda <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <HAL_SPI_TransmitReceive+0x1fc>
 8002be8:	8b7b      	ldrh	r3, [r7, #26]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d16b      	bne.n	8002cc6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	330c      	adds	r3, #12
 8002bf8:	7812      	ldrb	r2, [r2, #0]
 8002bfa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c14:	e057      	b.n	8002cc6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d11c      	bne.n	8002c5e <HAL_SPI_TransmitReceive+0x26c>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d017      	beq.n	8002c5e <HAL_SPI_TransmitReceive+0x26c>
 8002c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d114      	bne.n	8002c5e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	330c      	adds	r3, #12
 8002c3e:	7812      	ldrb	r2, [r2, #0]
 8002c40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d119      	bne.n	8002ca0 <HAL_SPI_TransmitReceive+0x2ae>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d014      	beq.n	8002ca0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ca0:	f7fe fc8e 	bl	80015c0 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d803      	bhi.n	8002cb8 <HAL_SPI_TransmitReceive+0x2c6>
 8002cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb6:	d102      	bne.n	8002cbe <HAL_SPI_TransmitReceive+0x2cc>
 8002cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d103      	bne.n	8002cc6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002cc4:	e029      	b.n	8002d1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1a2      	bne.n	8002c16 <HAL_SPI_TransmitReceive+0x224>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d19d      	bne.n	8002c16 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f8b2 	bl	8002e48 <SPI_EndRxTxTransaction>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d006      	beq.n	8002cf8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002cf6:	e010      	b.n	8002d1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	e000      	b.n	8002d1a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002d18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3730      	adds	r7, #48	; 0x30
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	4613      	mov	r3, r2
 8002d46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d48:	f7fe fc3a 	bl	80015c0 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	4413      	add	r3, r2
 8002d56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d58:	f7fe fc32 	bl	80015c0 <HAL_GetTick>
 8002d5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d5e:	4b39      	ldr	r3, [pc, #228]	; (8002e44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	015b      	lsls	r3, r3, #5
 8002d64:	0d1b      	lsrs	r3, r3, #20
 8002d66:	69fa      	ldr	r2, [r7, #28]
 8002d68:	fb02 f303 	mul.w	r3, r2, r3
 8002d6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d6e:	e054      	b.n	8002e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d76:	d050      	beq.n	8002e1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d78:	f7fe fc22 	bl	80015c0 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	69fa      	ldr	r2, [r7, #28]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d902      	bls.n	8002d8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d13d      	bne.n	8002e0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002da6:	d111      	bne.n	8002dcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db0:	d004      	beq.n	8002dbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dba:	d107      	bne.n	8002dcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd4:	d10f      	bne.n	8002df6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002df4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e017      	b.n	8002e3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4013      	ands	r3, r2
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	bf0c      	ite	eq
 8002e2a:	2301      	moveq	r3, #1
 8002e2c:	2300      	movne	r3, #0
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d19b      	bne.n	8002d70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3720      	adds	r7, #32
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000008 	.word	0x20000008

08002e48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e54:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <SPI_EndRxTxTransaction+0x7c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a1b      	ldr	r2, [pc, #108]	; (8002ec8 <SPI_EndRxTxTransaction+0x80>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	0d5b      	lsrs	r3, r3, #21
 8002e60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e64:	fb02 f303 	mul.w	r3, r2, r3
 8002e68:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e72:	d112      	bne.n	8002e9a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2180      	movs	r1, #128	; 0x80
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f7ff ff5a 	bl	8002d38 <SPI_WaitFlagStateUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d016      	beq.n	8002eb8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8e:	f043 0220 	orr.w	r2, r3, #32
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e00f      	b.n	8002eba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00a      	beq.n	8002eb6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb0:	2b80      	cmp	r3, #128	; 0x80
 8002eb2:	d0f2      	beq.n	8002e9a <SPI_EndRxTxTransaction+0x52>
 8002eb4:	e000      	b.n	8002eb8 <SPI_EndRxTxTransaction+0x70>
        break;
 8002eb6:	bf00      	nop
  }

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000008 	.word	0x20000008
 8002ec8:	165e9f81 	.word	0x165e9f81

08002ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e03f      	b.n	8002f5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fe fa1e 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2224      	movs	r2, #36	; 0x24
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 fcdf 	bl	80038d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	4613      	mov	r3, r2
 8002f72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d11d      	bne.n	8002fbc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <HAL_UART_Receive_IT+0x26>
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e016      	b.n	8002fbe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_UART_Receive_IT+0x38>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e00f      	b.n	8002fbe <HAL_UART_Receive_IT+0x58>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 fab6 	bl	8003524 <UART_Start_Receive_IT>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	e000      	b.n	8002fbe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002fbc:	2302      	movs	r3, #2
  }
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b0ba      	sub	sp, #232	; 0xe8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003006:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10f      	bne.n	800302e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800300e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b00      	cmp	r3, #0
 8003018:	d009      	beq.n	800302e <HAL_UART_IRQHandler+0x66>
 800301a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fb99 	bl	800375e <UART_Receive_IT>
      return;
 800302c:	e256      	b.n	80034dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800302e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 80de 	beq.w	80031f4 <HAL_UART_IRQHandler+0x22c>
 8003038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d106      	bne.n	8003052 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003048:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80d1 	beq.w	80031f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00b      	beq.n	8003076 <HAL_UART_IRQHandler+0xae>
 800305e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f043 0201 	orr.w	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00b      	beq.n	800309a <HAL_UART_IRQHandler+0xd2>
 8003082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f043 0202 	orr.w	r2, r3, #2
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800309a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00b      	beq.n	80030be <HAL_UART_IRQHandler+0xf6>
 80030a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f043 0204 	orr.w	r2, r3, #4
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80030be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d011      	beq.n	80030ee <HAL_UART_IRQHandler+0x126>
 80030ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d105      	bne.n	80030e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80030d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f043 0208 	orr.w	r2, r3, #8
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 81ed 	beq.w	80034d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030fc:	f003 0320 	and.w	r3, r3, #32
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_UART_IRQHandler+0x14e>
 8003104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 fb24 	bl	800375e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003120:	2b40      	cmp	r3, #64	; 0x40
 8003122:	bf0c      	ite	eq
 8003124:	2301      	moveq	r3, #1
 8003126:	2300      	movne	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d103      	bne.n	8003142 <HAL_UART_IRQHandler+0x17a>
 800313a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800313e:	2b00      	cmp	r3, #0
 8003140:	d04f      	beq.n	80031e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fa2c 	bl	80035a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003152:	2b40      	cmp	r3, #64	; 0x40
 8003154:	d141      	bne.n	80031da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3314      	adds	r3, #20
 800315c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003160:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003164:	e853 3f00 	ldrex	r3, [r3]
 8003168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800316c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3314      	adds	r3, #20
 800317e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003182:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800318e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003192:	e841 2300 	strex	r3, r2, [r1]
 8003196:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800319a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1d9      	bne.n	8003156 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d013      	beq.n	80031d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ae:	4a7d      	ldr	r2, [pc, #500]	; (80033a4 <HAL_UART_IRQHandler+0x3dc>)
 80031b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fe fbb3 	bl	8001922 <HAL_DMA_Abort_IT>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d016      	beq.n	80031f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031cc:	4610      	mov	r0, r2
 80031ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d0:	e00e      	b.n	80031f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f990 	bl	80034f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d8:	e00a      	b.n	80031f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f98c 	bl	80034f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e0:	e006      	b.n	80031f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f988 	bl	80034f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80031ee:	e170      	b.n	80034d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f0:	bf00      	nop
    return;
 80031f2:	e16e      	b.n	80034d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	f040 814a 	bne.w	8003492 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 8143 	beq.w	8003492 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800320c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 813c 	beq.w	8003492 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323a:	2b40      	cmp	r3, #64	; 0x40
 800323c:	f040 80b4 	bne.w	80033a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800324c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 8140 	beq.w	80034d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800325a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800325e:	429a      	cmp	r2, r3
 8003260:	f080 8139 	bcs.w	80034d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800326a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003276:	f000 8088 	beq.w	800338a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	330c      	adds	r3, #12
 8003280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003284:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003288:	e853 3f00 	ldrex	r3, [r3]
 800328c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003290:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003298:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	330c      	adds	r3, #12
 80032a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80032a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80032b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032b6:	e841 2300 	strex	r3, r2, [r1]
 80032ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80032be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1d9      	bne.n	800327a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3314      	adds	r3, #20
 80032cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d0:	e853 3f00 	ldrex	r3, [r3]
 80032d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80032d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3314      	adds	r3, #20
 80032e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032f6:	e841 2300 	strex	r3, r2, [r1]
 80032fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1e1      	bne.n	80032c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3314      	adds	r3, #20
 8003308:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800330c:	e853 3f00 	ldrex	r3, [r3]
 8003310:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003318:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3314      	adds	r3, #20
 8003322:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003326:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003328:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800332c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800332e:	e841 2300 	strex	r3, r2, [r1]
 8003332:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1e3      	bne.n	8003302 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2220      	movs	r2, #32
 800333e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	330c      	adds	r3, #12
 800334e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003352:	e853 3f00 	ldrex	r3, [r3]
 8003356:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800335a:	f023 0310 	bic.w	r3, r3, #16
 800335e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	330c      	adds	r3, #12
 8003368:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800336c:	65ba      	str	r2, [r7, #88]	; 0x58
 800336e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003370:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003372:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003374:	e841 2300 	strex	r3, r2, [r1]
 8003378:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800337a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1e3      	bne.n	8003348 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	4618      	mov	r0, r3
 8003386:	f7fe fa5c 	bl	8001842 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003392:	b29b      	uxth	r3, r3
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	b29b      	uxth	r3, r3
 8003398:	4619      	mov	r1, r3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f8b6 	bl	800350c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033a0:	e099      	b.n	80034d6 <HAL_UART_IRQHandler+0x50e>
 80033a2:	bf00      	nop
 80033a4:	08003667 	.word	0x08003667
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 808b 	beq.w	80034da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80033c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8086 	beq.w	80034da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	330c      	adds	r3, #12
 80033d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d8:	e853 3f00 	ldrex	r3, [r3]
 80033dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	330c      	adds	r3, #12
 80033ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80033f2:	647a      	str	r2, [r7, #68]	; 0x44
 80033f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033fa:	e841 2300 	strex	r3, r2, [r1]
 80033fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1e3      	bne.n	80033ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	3314      	adds	r3, #20
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	e853 3f00 	ldrex	r3, [r3]
 8003414:	623b      	str	r3, [r7, #32]
   return(result);
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	f023 0301 	bic.w	r3, r3, #1
 800341c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	3314      	adds	r3, #20
 8003426:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800342a:	633a      	str	r2, [r7, #48]	; 0x30
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003432:	e841 2300 	strex	r3, r2, [r1]
 8003436:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1e3      	bne.n	8003406 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	330c      	adds	r3, #12
 8003452:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	e853 3f00 	ldrex	r3, [r3]
 800345a:	60fb      	str	r3, [r7, #12]
   return(result);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 0310 	bic.w	r3, r3, #16
 8003462:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	330c      	adds	r3, #12
 800346c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003470:	61fa      	str	r2, [r7, #28]
 8003472:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003474:	69b9      	ldr	r1, [r7, #24]
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	e841 2300 	strex	r3, r2, [r1]
 800347c:	617b      	str	r3, [r7, #20]
   return(result);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e3      	bne.n	800344c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003484:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003488:	4619      	mov	r1, r3
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f83e 	bl	800350c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003490:	e023      	b.n	80034da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <HAL_UART_IRQHandler+0x4ea>
 800349e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f8ef 	bl	800368e <UART_Transmit_IT>
    return;
 80034b0:	e014      	b.n	80034dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00e      	beq.n	80034dc <HAL_UART_IRQHandler+0x514>
 80034be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d008      	beq.n	80034dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f92f 	bl	800372e <UART_EndTransmit_IT>
    return;
 80034d0:	e004      	b.n	80034dc <HAL_UART_IRQHandler+0x514>
    return;
 80034d2:	bf00      	nop
 80034d4:	e002      	b.n	80034dc <HAL_UART_IRQHandler+0x514>
      return;
 80034d6:	bf00      	nop
 80034d8:	e000      	b.n	80034dc <HAL_UART_IRQHandler+0x514>
      return;
 80034da:	bf00      	nop
  }
}
 80034dc:	37e8      	adds	r7, #232	; 0xe8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop

080034e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	4613      	mov	r3, r2
 8003530:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	88fa      	ldrh	r2, [r7, #6]
 800353c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	88fa      	ldrh	r2, [r7, #6]
 8003542:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2222      	movs	r2, #34	; 0x22
 800354e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d007      	beq.n	8003572 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003570:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695a      	ldr	r2, [r3, #20]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0201 	orr.w	r2, r2, #1
 8003580:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0220 	orr.w	r2, r2, #32
 8003590:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b095      	sub	sp, #84	; 0x54
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	330c      	adds	r3, #12
 80035ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b2:	e853 3f00 	ldrex	r3, [r3]
 80035b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	330c      	adds	r3, #12
 80035c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035c8:	643a      	str	r2, [r7, #64]	; 0x40
 80035ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035d0:	e841 2300 	strex	r3, r2, [r1]
 80035d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1e5      	bne.n	80035a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3314      	adds	r3, #20
 80035e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	e853 3f00 	ldrex	r3, [r3]
 80035ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f023 0301 	bic.w	r3, r3, #1
 80035f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3314      	adds	r3, #20
 80035fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003600:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003604:	e841 2300 	strex	r3, r2, [r1]
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1e5      	bne.n	80035dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	2b01      	cmp	r3, #1
 8003616:	d119      	bne.n	800364c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	330c      	adds	r3, #12
 800361e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	e853 3f00 	ldrex	r3, [r3]
 8003626:	60bb      	str	r3, [r7, #8]
   return(result);
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f023 0310 	bic.w	r3, r3, #16
 800362e:	647b      	str	r3, [r7, #68]	; 0x44
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	330c      	adds	r3, #12
 8003636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003638:	61ba      	str	r2, [r7, #24]
 800363a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363c:	6979      	ldr	r1, [r7, #20]
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	e841 2300 	strex	r3, r2, [r1]
 8003644:	613b      	str	r3, [r7, #16]
   return(result);
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1e5      	bne.n	8003618 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	631a      	str	r2, [r3, #48]	; 0x30
}
 800365a:	bf00      	nop
 800365c:	3754      	adds	r7, #84	; 0x54
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f7ff ff39 	bl	80034f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800368e:	b480      	push	{r7}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b21      	cmp	r3, #33	; 0x21
 80036a0:	d13e      	bne.n	8003720 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036aa:	d114      	bne.n	80036d6 <UART_Transmit_IT+0x48>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d110      	bne.n	80036d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	1c9a      	adds	r2, r3, #2
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	621a      	str	r2, [r3, #32]
 80036d4:	e008      	b.n	80036e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	1c59      	adds	r1, r3, #1
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6211      	str	r1, [r2, #32]
 80036e0:	781a      	ldrb	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	4619      	mov	r1, r3
 80036f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10f      	bne.n	800371c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800370a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800371a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	e000      	b.n	8003722 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003720:	2302      	movs	r3, #2
  }
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003744:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff fec8 	bl	80034e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b08c      	sub	sp, #48	; 0x30
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b22      	cmp	r3, #34	; 0x22
 8003770:	f040 80ab 	bne.w	80038ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377c:	d117      	bne.n	80037ae <UART_Receive_IT+0x50>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d113      	bne.n	80037ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003786:	2300      	movs	r3, #0
 8003788:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	b29b      	uxth	r3, r3
 8003798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800379c:	b29a      	uxth	r2, r3
 800379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	1c9a      	adds	r2, r3, #2
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	629a      	str	r2, [r3, #40]	; 0x28
 80037ac:	e026      	b.n	80037fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c0:	d007      	beq.n	80037d2 <UART_Receive_IT+0x74>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10a      	bne.n	80037e0 <UART_Receive_IT+0x82>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037dc:	701a      	strb	r2, [r3, #0]
 80037de:	e008      	b.n	80037f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b29b      	uxth	r3, r3
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	4619      	mov	r1, r3
 800380a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800380c:	2b00      	cmp	r3, #0
 800380e:	d15a      	bne.n	80038c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0220 	bic.w	r2, r2, #32
 800381e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800382e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	2b01      	cmp	r3, #1
 800384e:	d135      	bne.n	80038bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	330c      	adds	r3, #12
 800385c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	613b      	str	r3, [r7, #16]
   return(result);
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f023 0310 	bic.w	r3, r3, #16
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	330c      	adds	r3, #12
 8003874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003876:	623a      	str	r2, [r7, #32]
 8003878:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	69f9      	ldr	r1, [r7, #28]
 800387c:	6a3a      	ldr	r2, [r7, #32]
 800387e:	e841 2300 	strex	r3, r2, [r1]
 8003882:	61bb      	str	r3, [r7, #24]
   return(result);
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1e5      	bne.n	8003856 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b10      	cmp	r3, #16
 8003896:	d10a      	bne.n	80038ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038b2:	4619      	mov	r1, r3
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff fe29 	bl	800350c <HAL_UARTEx_RxEventCallback>
 80038ba:	e002      	b.n	80038c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7fd fad3 	bl	8000e68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	e002      	b.n	80038cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	e000      	b.n	80038cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80038ca:	2302      	movs	r3, #2
  }
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3730      	adds	r7, #48	; 0x30
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d8:	b0c0      	sub	sp, #256	; 0x100
 80038da:	af00      	add	r7, sp, #0
 80038dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f0:	68d9      	ldr	r1, [r3, #12]
 80038f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	ea40 0301 	orr.w	r3, r0, r1
 80038fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	431a      	orrs	r2, r3
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	431a      	orrs	r2, r3
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800392c:	f021 010c 	bic.w	r1, r1, #12
 8003930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800393a:	430b      	orrs	r3, r1
 800393c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800393e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800394a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394e:	6999      	ldr	r1, [r3, #24]
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	ea40 0301 	orr.w	r3, r0, r1
 800395a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	4b8f      	ldr	r3, [pc, #572]	; (8003ba0 <UART_SetConfig+0x2cc>)
 8003964:	429a      	cmp	r2, r3
 8003966:	d005      	beq.n	8003974 <UART_SetConfig+0xa0>
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4b8d      	ldr	r3, [pc, #564]	; (8003ba4 <UART_SetConfig+0x2d0>)
 8003970:	429a      	cmp	r2, r3
 8003972:	d104      	bne.n	800397e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003974:	f7fe fe64 	bl	8002640 <HAL_RCC_GetPCLK2Freq>
 8003978:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800397c:	e003      	b.n	8003986 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800397e:	f7fe fe4b 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8003982:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003990:	f040 810c 	bne.w	8003bac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003998:	2200      	movs	r2, #0
 800399a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800399e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039a6:	4622      	mov	r2, r4
 80039a8:	462b      	mov	r3, r5
 80039aa:	1891      	adds	r1, r2, r2
 80039ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80039ae:	415b      	adcs	r3, r3
 80039b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039b6:	4621      	mov	r1, r4
 80039b8:	eb12 0801 	adds.w	r8, r2, r1
 80039bc:	4629      	mov	r1, r5
 80039be:	eb43 0901 	adc.w	r9, r3, r1
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039d6:	4690      	mov	r8, r2
 80039d8:	4699      	mov	r9, r3
 80039da:	4623      	mov	r3, r4
 80039dc:	eb18 0303 	adds.w	r3, r8, r3
 80039e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039e4:	462b      	mov	r3, r5
 80039e6:	eb49 0303 	adc.w	r3, r9, r3
 80039ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a02:	460b      	mov	r3, r1
 8003a04:	18db      	adds	r3, r3, r3
 8003a06:	653b      	str	r3, [r7, #80]	; 0x50
 8003a08:	4613      	mov	r3, r2
 8003a0a:	eb42 0303 	adc.w	r3, r2, r3
 8003a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8003a10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a18:	f7fc fbd6 	bl	80001c8 <__aeabi_uldivmod>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4b61      	ldr	r3, [pc, #388]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003a22:	fba3 2302 	umull	r2, r3, r3, r2
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	011c      	lsls	r4, r3, #4
 8003a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a3c:	4642      	mov	r2, r8
 8003a3e:	464b      	mov	r3, r9
 8003a40:	1891      	adds	r1, r2, r2
 8003a42:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a44:	415b      	adcs	r3, r3
 8003a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a4c:	4641      	mov	r1, r8
 8003a4e:	eb12 0a01 	adds.w	sl, r2, r1
 8003a52:	4649      	mov	r1, r9
 8003a54:	eb43 0b01 	adc.w	fp, r3, r1
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a6c:	4692      	mov	sl, r2
 8003a6e:	469b      	mov	fp, r3
 8003a70:	4643      	mov	r3, r8
 8003a72:	eb1a 0303 	adds.w	r3, sl, r3
 8003a76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a7a:	464b      	mov	r3, r9
 8003a7c:	eb4b 0303 	adc.w	r3, fp, r3
 8003a80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	18db      	adds	r3, r3, r3
 8003a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	eb42 0303 	adc.w	r3, r2, r3
 8003aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8003aa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003aaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003aae:	f7fc fb8b 	bl	80001c8 <__aeabi_uldivmod>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003aba:	fba3 2301 	umull	r2, r3, r3, r1
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	2264      	movs	r2, #100	; 0x64
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	1acb      	subs	r3, r1, r3
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ace:	4b36      	ldr	r3, [pc, #216]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003adc:	441c      	add	r4, r3
 8003ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ae8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003aec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003af0:	4642      	mov	r2, r8
 8003af2:	464b      	mov	r3, r9
 8003af4:	1891      	adds	r1, r2, r2
 8003af6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003af8:	415b      	adcs	r3, r3
 8003afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003afc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b00:	4641      	mov	r1, r8
 8003b02:	1851      	adds	r1, r2, r1
 8003b04:	6339      	str	r1, [r7, #48]	; 0x30
 8003b06:	4649      	mov	r1, r9
 8003b08:	414b      	adcs	r3, r1
 8003b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b18:	4659      	mov	r1, fp
 8003b1a:	00cb      	lsls	r3, r1, #3
 8003b1c:	4651      	mov	r1, sl
 8003b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b22:	4651      	mov	r1, sl
 8003b24:	00ca      	lsls	r2, r1, #3
 8003b26:	4610      	mov	r0, r2
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	4642      	mov	r2, r8
 8003b2e:	189b      	adds	r3, r3, r2
 8003b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b34:	464b      	mov	r3, r9
 8003b36:	460a      	mov	r2, r1
 8003b38:	eb42 0303 	adc.w	r3, r2, r3
 8003b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b54:	460b      	mov	r3, r1
 8003b56:	18db      	adds	r3, r3, r3
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	eb42 0303 	adc.w	r3, r2, r3
 8003b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b6a:	f7fc fb2d 	bl	80001c8 <__aeabi_uldivmod>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003b74:	fba3 1302 	umull	r1, r3, r3, r2
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	2164      	movs	r1, #100	; 0x64
 8003b7c:	fb01 f303 	mul.w	r3, r1, r3
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	3332      	adds	r3, #50	; 0x32
 8003b86:	4a08      	ldr	r2, [pc, #32]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003b88:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8c:	095b      	lsrs	r3, r3, #5
 8003b8e:	f003 0207 	and.w	r2, r3, #7
 8003b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4422      	add	r2, r4
 8003b9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b9c:	e105      	b.n	8003daa <UART_SetConfig+0x4d6>
 8003b9e:	bf00      	nop
 8003ba0:	40011000 	.word	0x40011000
 8003ba4:	40011400 	.word	0x40011400
 8003ba8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003bbe:	4642      	mov	r2, r8
 8003bc0:	464b      	mov	r3, r9
 8003bc2:	1891      	adds	r1, r2, r2
 8003bc4:	6239      	str	r1, [r7, #32]
 8003bc6:	415b      	adcs	r3, r3
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bce:	4641      	mov	r1, r8
 8003bd0:	1854      	adds	r4, r2, r1
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	eb43 0501 	adc.w	r5, r3, r1
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	00eb      	lsls	r3, r5, #3
 8003be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003be6:	00e2      	lsls	r2, r4, #3
 8003be8:	4614      	mov	r4, r2
 8003bea:	461d      	mov	r5, r3
 8003bec:	4643      	mov	r3, r8
 8003bee:	18e3      	adds	r3, r4, r3
 8003bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bf4:	464b      	mov	r3, r9
 8003bf6:	eb45 0303 	adc.w	r3, r5, r3
 8003bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	008b      	lsls	r3, r1, #2
 8003c1e:	4621      	mov	r1, r4
 8003c20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c24:	4621      	mov	r1, r4
 8003c26:	008a      	lsls	r2, r1, #2
 8003c28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c2c:	f7fc facc 	bl	80001c8 <__aeabi_uldivmod>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4b60      	ldr	r3, [pc, #384]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003c36:	fba3 2302 	umull	r2, r3, r3, r2
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	011c      	lsls	r4, r3, #4
 8003c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c42:	2200      	movs	r2, #0
 8003c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c50:	4642      	mov	r2, r8
 8003c52:	464b      	mov	r3, r9
 8003c54:	1891      	adds	r1, r2, r2
 8003c56:	61b9      	str	r1, [r7, #24]
 8003c58:	415b      	adcs	r3, r3
 8003c5a:	61fb      	str	r3, [r7, #28]
 8003c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c60:	4641      	mov	r1, r8
 8003c62:	1851      	adds	r1, r2, r1
 8003c64:	6139      	str	r1, [r7, #16]
 8003c66:	4649      	mov	r1, r9
 8003c68:	414b      	adcs	r3, r1
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c78:	4659      	mov	r1, fp
 8003c7a:	00cb      	lsls	r3, r1, #3
 8003c7c:	4651      	mov	r1, sl
 8003c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c82:	4651      	mov	r1, sl
 8003c84:	00ca      	lsls	r2, r1, #3
 8003c86:	4610      	mov	r0, r2
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	4642      	mov	r2, r8
 8003c8e:	189b      	adds	r3, r3, r2
 8003c90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c94:	464b      	mov	r3, r9
 8003c96:	460a      	mov	r2, r1
 8003c98:	eb42 0303 	adc.w	r3, r2, r3
 8003c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003caa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003cb8:	4649      	mov	r1, r9
 8003cba:	008b      	lsls	r3, r1, #2
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cc2:	4641      	mov	r1, r8
 8003cc4:	008a      	lsls	r2, r1, #2
 8003cc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cca:	f7fc fa7d 	bl	80001c8 <__aeabi_uldivmod>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4b39      	ldr	r3, [pc, #228]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	2164      	movs	r1, #100	; 0x64
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	3332      	adds	r3, #50	; 0x32
 8003ce6:	4a34      	ldr	r2, [pc, #208]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cec:	095b      	lsrs	r3, r3, #5
 8003cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cf2:	441c      	add	r4, r3
 8003cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	673b      	str	r3, [r7, #112]	; 0x70
 8003cfc:	677a      	str	r2, [r7, #116]	; 0x74
 8003cfe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d02:	4642      	mov	r2, r8
 8003d04:	464b      	mov	r3, r9
 8003d06:	1891      	adds	r1, r2, r2
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	415b      	adcs	r3, r3
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d12:	4641      	mov	r1, r8
 8003d14:	1851      	adds	r1, r2, r1
 8003d16:	6039      	str	r1, [r7, #0]
 8003d18:	4649      	mov	r1, r9
 8003d1a:	414b      	adcs	r3, r1
 8003d1c:	607b      	str	r3, [r7, #4]
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d2a:	4659      	mov	r1, fp
 8003d2c:	00cb      	lsls	r3, r1, #3
 8003d2e:	4651      	mov	r1, sl
 8003d30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d34:	4651      	mov	r1, sl
 8003d36:	00ca      	lsls	r2, r1, #3
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	4642      	mov	r2, r8
 8003d40:	189b      	adds	r3, r3, r2
 8003d42:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d44:	464b      	mov	r3, r9
 8003d46:	460a      	mov	r2, r1
 8003d48:	eb42 0303 	adc.w	r3, r2, r3
 8003d4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	663b      	str	r3, [r7, #96]	; 0x60
 8003d58:	667a      	str	r2, [r7, #100]	; 0x64
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d66:	4649      	mov	r1, r9
 8003d68:	008b      	lsls	r3, r1, #2
 8003d6a:	4641      	mov	r1, r8
 8003d6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d70:	4641      	mov	r1, r8
 8003d72:	008a      	lsls	r2, r1, #2
 8003d74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d78:	f7fc fa26 	bl	80001c8 <__aeabi_uldivmod>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003d82:	fba3 1302 	umull	r1, r3, r3, r2
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	2164      	movs	r1, #100	; 0x64
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	3332      	adds	r3, #50	; 0x32
 8003d94:	4a08      	ldr	r2, [pc, #32]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	f003 020f 	and.w	r2, r3, #15
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4422      	add	r2, r4
 8003da8:	609a      	str	r2, [r3, #8]
}
 8003daa:	bf00      	nop
 8003dac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003db0:	46bd      	mov	sp, r7
 8003db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003db6:	bf00      	nop
 8003db8:	51eb851f 	.word	0x51eb851f

08003dbc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003dc0:	4904      	ldr	r1, [pc, #16]	; (8003dd4 <MX_FATFS_Init+0x18>)
 8003dc2:	4805      	ldr	r0, [pc, #20]	; (8003dd8 <MX_FATFS_Init+0x1c>)
 8003dc4:	f002 ff96 	bl	8006cf4 <FATFS_LinkDriver>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	461a      	mov	r2, r3
 8003dcc:	4b03      	ldr	r3, [pc, #12]	; (8003ddc <MX_FATFS_Init+0x20>)
 8003dce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003dd0:	bf00      	nop
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20002160 	.word	0x20002160
 8003dd8:	20000014 	.word	0x20000014
 8003ddc:	2000215c 	.word	0x2000215c

08003de0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003de4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	4603      	mov	r3, r0
 8003df8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fc fd1d 	bl	800083c <SD_disk_initialize>
 8003e02:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fc fdf5 	bl	8000a08 <SD_disk_status>
 8003e1e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	4603      	mov	r3, r0
 8003e36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8003e38:	7bf8      	ldrb	r0, [r7, #15]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	68b9      	ldr	r1, [r7, #8]
 8003e40:	f7fc fdf8 	bl	8000a34 <SD_disk_read>
 8003e44:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
 8003e58:	603b      	str	r3, [r7, #0]
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8003e5e:	7bf8      	ldrb	r0, [r7, #15]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	f7fc fe4f 	bl	8000b08 <SD_disk_write>
 8003e6a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	603a      	str	r2, [r7, #0]
 8003e7e:	71fb      	strb	r3, [r7, #7]
 8003e80:	460b      	mov	r3, r1
 8003e82:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8003e84:	79b9      	ldrb	r1, [r7, #6]
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fc fec0 	bl	8000c10 <SD_disk_ioctl>
 8003e90:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	4a08      	ldr	r2, [pc, #32]	; (8003ecc <disk_status+0x30>)
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	79fa      	ldrb	r2, [r7, #7]
 8003eb4:	4905      	ldr	r1, [pc, #20]	; (8003ecc <disk_status+0x30>)
 8003eb6:	440a      	add	r2, r1
 8003eb8:	7a12      	ldrb	r2, [r2, #8]
 8003eba:	4610      	mov	r0, r2
 8003ebc:	4798      	blx	r3
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	2000238c 	.word	0x2000238c

08003ed0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	4a0d      	ldr	r2, [pc, #52]	; (8003f18 <disk_initialize+0x48>)
 8003ee2:	5cd3      	ldrb	r3, [r2, r3]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d111      	bne.n	8003f0c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003ee8:	79fb      	ldrb	r3, [r7, #7]
 8003eea:	4a0b      	ldr	r2, [pc, #44]	; (8003f18 <disk_initialize+0x48>)
 8003eec:	2101      	movs	r1, #1
 8003eee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	4a09      	ldr	r2, [pc, #36]	; (8003f18 <disk_initialize+0x48>)
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	79fa      	ldrb	r2, [r7, #7]
 8003efe:	4906      	ldr	r1, [pc, #24]	; (8003f18 <disk_initialize+0x48>)
 8003f00:	440a      	add	r2, r1
 8003f02:	7a12      	ldrb	r2, [r2, #8]
 8003f04:	4610      	mov	r0, r2
 8003f06:	4798      	blx	r3
 8003f08:	4603      	mov	r3, r0
 8003f0a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	2000238c 	.word	0x2000238c

08003f1c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003f1c:	b590      	push	{r4, r7, lr}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	607a      	str	r2, [r7, #4]
 8003f26:	603b      	str	r3, [r7, #0]
 8003f28:	4603      	mov	r3, r0
 8003f2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
 8003f2e:	4a0a      	ldr	r2, [pc, #40]	; (8003f58 <disk_read+0x3c>)
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	689c      	ldr	r4, [r3, #8]
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
 8003f3a:	4a07      	ldr	r2, [pc, #28]	; (8003f58 <disk_read+0x3c>)
 8003f3c:	4413      	add	r3, r2
 8003f3e:	7a18      	ldrb	r0, [r3, #8]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	47a0      	blx	r4
 8003f48:	4603      	mov	r3, r0
 8003f4a:	75fb      	strb	r3, [r7, #23]
  return res;
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd90      	pop	{r4, r7, pc}
 8003f56:	bf00      	nop
 8003f58:	2000238c 	.word	0x2000238c

08003f5c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003f5c:	b590      	push	{r4, r7, lr}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	607a      	str	r2, [r7, #4]
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	4603      	mov	r3, r0
 8003f6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
 8003f6e:	4a0a      	ldr	r2, [pc, #40]	; (8003f98 <disk_write+0x3c>)
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	68dc      	ldr	r4, [r3, #12]
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	4a07      	ldr	r2, [pc, #28]	; (8003f98 <disk_write+0x3c>)
 8003f7c:	4413      	add	r3, r2
 8003f7e:	7a18      	ldrb	r0, [r3, #8]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	47a0      	blx	r4
 8003f88:	4603      	mov	r3, r0
 8003f8a:	75fb      	strb	r3, [r7, #23]
  return res;
 8003f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	371c      	adds	r7, #28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd90      	pop	{r4, r7, pc}
 8003f96:	bf00      	nop
 8003f98:	2000238c 	.word	0x2000238c

08003f9c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	603a      	str	r2, [r7, #0]
 8003fa6:	71fb      	strb	r3, [r7, #7]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003fac:	79fb      	ldrb	r3, [r7, #7]
 8003fae:	4a09      	ldr	r2, [pc, #36]	; (8003fd4 <disk_ioctl+0x38>)
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	79fa      	ldrb	r2, [r7, #7]
 8003fba:	4906      	ldr	r1, [pc, #24]	; (8003fd4 <disk_ioctl+0x38>)
 8003fbc:	440a      	add	r2, r1
 8003fbe:	7a10      	ldrb	r0, [r2, #8]
 8003fc0:	79b9      	ldrb	r1, [r7, #6]
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	4798      	blx	r3
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	73fb      	strb	r3, [r7, #15]
  return res;
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	2000238c 	.word	0x2000238c

08003fd8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003fe8:	89fb      	ldrh	r3, [r7, #14]
 8003fea:	021b      	lsls	r3, r3, #8
 8003fec:	b21a      	sxth	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	b21b      	sxth	r3, r3
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	b21b      	sxth	r3, r3
 8003ff8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003ffa:	89fb      	ldrh	r3, [r7, #14]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3303      	adds	r3, #3
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	021b      	lsls	r3, r3, #8
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	3202      	adds	r2, #2
 8004020:	7812      	ldrb	r2, [r2, #0]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	021b      	lsls	r3, r3, #8
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	3201      	adds	r2, #1
 800402e:	7812      	ldrb	r2, [r2, #0]
 8004030:	4313      	orrs	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	021b      	lsls	r3, r3, #8
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	7812      	ldrb	r2, [r2, #0]
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]
	return rv;
 8004040:	68fb      	ldr	r3, [r7, #12]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	460b      	mov	r3, r1
 8004058:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	607a      	str	r2, [r7, #4]
 8004060:	887a      	ldrh	r2, [r7, #2]
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	701a      	strb	r2, [r3, #0]
 8004066:	887b      	ldrh	r3, [r7, #2]
 8004068:	0a1b      	lsrs	r3, r3, #8
 800406a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	607a      	str	r2, [r7, #4]
 8004072:	887a      	ldrh	r2, [r7, #2]
 8004074:	b2d2      	uxtb	r2, r2
 8004076:	701a      	strb	r2, [r3, #0]
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	701a      	strb	r2, [r3, #0]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	0a1b      	lsrs	r3, r3, #8
 800409e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	607a      	str	r2, [r7, #4]
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	701a      	strb	r2, [r3, #0]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	0a1b      	lsrs	r3, r3, #8
 80040b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	607a      	str	r2, [r7, #4]
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	701a      	strb	r2, [r3, #0]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	0a1b      	lsrs	r3, r3, #8
 80040c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	607a      	str	r2, [r7, #4]
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	701a      	strb	r2, [r3, #0]
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00d      	beq.n	8004112 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	1c53      	adds	r3, r2, #1
 80040fa:	613b      	str	r3, [r7, #16]
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	1c59      	adds	r1, r3, #1
 8004100:	6179      	str	r1, [r7, #20]
 8004102:	7812      	ldrb	r2, [r2, #0]
 8004104:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3b01      	subs	r3, #1
 800410a:	607b      	str	r3, [r7, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f1      	bne.n	80040f6 <mem_cpy+0x1a>
	}
}
 8004112:	bf00      	nop
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800411e:	b480      	push	{r7}
 8004120:	b087      	sub	sp, #28
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	617a      	str	r2, [r7, #20]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3b01      	subs	r3, #1
 800413e:	607b      	str	r3, [r7, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f3      	bne.n	800412e <mem_set+0x10>
}
 8004146:	bf00      	nop
 8004148:	bf00      	nop
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004154:	b480      	push	{r7}
 8004156:	b089      	sub	sp, #36	; 0x24
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	61fb      	str	r3, [r7, #28]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	61fa      	str	r2, [r7, #28]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	4619      	mov	r1, r3
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	61ba      	str	r2, [r7, #24]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	1acb      	subs	r3, r1, r3
 8004180:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3b01      	subs	r3, #1
 8004186:	607b      	str	r3, [r7, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <mem_cmp+0x40>
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0eb      	beq.n	800416c <mem_cmp+0x18>

	return r;
 8004194:	697b      	ldr	r3, [r7, #20]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3724      	adds	r7, #36	; 0x24
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80041ac:	e002      	b.n	80041b4 <chk_chr+0x12>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3301      	adds	r3, #1
 80041b2:	607b      	str	r3, [r7, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <chk_chr+0x26>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	461a      	mov	r2, r3
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d1f2      	bne.n	80041ae <chk_chr+0xc>
	return *str;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	781b      	ldrb	r3, [r3, #0]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80041e2:	2300      	movs	r3, #0
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	e029      	b.n	8004240 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80041ec:	4a27      	ldr	r2, [pc, #156]	; (800428c <chk_lock+0xb4>)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	4413      	add	r3, r2
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d01d      	beq.n	8004236 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80041fa:	4a24      	ldr	r2, [pc, #144]	; (800428c <chk_lock+0xb4>)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	4413      	add	r3, r2
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d116      	bne.n	800423a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800420c:	4a1f      	ldr	r2, [pc, #124]	; (800428c <chk_lock+0xb4>)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	4413      	add	r3, r2
 8004214:	3304      	adds	r3, #4
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800421c:	429a      	cmp	r2, r3
 800421e:	d10c      	bne.n	800423a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004220:	4a1a      	ldr	r2, [pc, #104]	; (800428c <chk_lock+0xb4>)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	4413      	add	r3, r2
 8004228:	3308      	adds	r3, #8
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004230:	429a      	cmp	r2, r3
 8004232:	d102      	bne.n	800423a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004234:	e007      	b.n	8004246 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004236:	2301      	movs	r3, #1
 8004238:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3301      	adds	r3, #1
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d9d2      	bls.n	80041ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b02      	cmp	r3, #2
 800424a:	d109      	bne.n	8004260 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d102      	bne.n	8004258 <chk_lock+0x80>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b02      	cmp	r3, #2
 8004256:	d101      	bne.n	800425c <chk_lock+0x84>
 8004258:	2300      	movs	r3, #0
 800425a:	e010      	b.n	800427e <chk_lock+0xa6>
 800425c:	2312      	movs	r3, #18
 800425e:	e00e      	b.n	800427e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d108      	bne.n	8004278 <chk_lock+0xa0>
 8004266:	4a09      	ldr	r2, [pc, #36]	; (800428c <chk_lock+0xb4>)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	4413      	add	r3, r2
 800426e:	330c      	adds	r3, #12
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004276:	d101      	bne.n	800427c <chk_lock+0xa4>
 8004278:	2310      	movs	r3, #16
 800427a:	e000      	b.n	800427e <chk_lock+0xa6>
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	2000216c 	.word	0x2000216c

08004290 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004296:	2300      	movs	r3, #0
 8004298:	607b      	str	r3, [r7, #4]
 800429a:	e002      	b.n	80042a2 <enq_lock+0x12>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3301      	adds	r3, #1
 80042a0:	607b      	str	r3, [r7, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d806      	bhi.n	80042b6 <enq_lock+0x26>
 80042a8:	4a09      	ldr	r2, [pc, #36]	; (80042d0 <enq_lock+0x40>)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	4413      	add	r3, r2
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f2      	bne.n	800429c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	bf14      	ite	ne
 80042bc:	2301      	movne	r3, #1
 80042be:	2300      	moveq	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	2000216c 	.word	0x2000216c

080042d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	e01f      	b.n	8004324 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80042e4:	4a41      	ldr	r2, [pc, #260]	; (80043ec <inc_lock+0x118>)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	4413      	add	r3, r2
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d113      	bne.n	800431e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80042f6:	4a3d      	ldr	r2, [pc, #244]	; (80043ec <inc_lock+0x118>)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	4413      	add	r3, r2
 80042fe:	3304      	adds	r3, #4
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004306:	429a      	cmp	r2, r3
 8004308:	d109      	bne.n	800431e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800430a:	4a38      	ldr	r2, [pc, #224]	; (80043ec <inc_lock+0x118>)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	4413      	add	r3, r2
 8004312:	3308      	adds	r3, #8
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800431a:	429a      	cmp	r2, r3
 800431c:	d006      	beq.n	800432c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	3301      	adds	r3, #1
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d9dc      	bls.n	80042e4 <inc_lock+0x10>
 800432a:	e000      	b.n	800432e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800432c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2b02      	cmp	r3, #2
 8004332:	d132      	bne.n	800439a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004334:	2300      	movs	r3, #0
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	e002      	b.n	8004340 <inc_lock+0x6c>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3301      	adds	r3, #1
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d806      	bhi.n	8004354 <inc_lock+0x80>
 8004346:	4a29      	ldr	r2, [pc, #164]	; (80043ec <inc_lock+0x118>)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	4413      	add	r3, r2
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1f2      	bne.n	800433a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d101      	bne.n	800435e <inc_lock+0x8a>
 800435a:	2300      	movs	r3, #0
 800435c:	e040      	b.n	80043e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	4922      	ldr	r1, [pc, #136]	; (80043ec <inc_lock+0x118>)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	440b      	add	r3, r1
 800436a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	491e      	ldr	r1, [pc, #120]	; (80043ec <inc_lock+0x118>)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	440b      	add	r3, r1
 8004378:	3304      	adds	r3, #4
 800437a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	695a      	ldr	r2, [r3, #20]
 8004380:	491a      	ldr	r1, [pc, #104]	; (80043ec <inc_lock+0x118>)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	440b      	add	r3, r1
 8004388:	3308      	adds	r3, #8
 800438a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800438c:	4a17      	ldr	r2, [pc, #92]	; (80043ec <inc_lock+0x118>)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	4413      	add	r3, r2
 8004394:	330c      	adds	r3, #12
 8004396:	2200      	movs	r2, #0
 8004398:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d009      	beq.n	80043b4 <inc_lock+0xe0>
 80043a0:	4a12      	ldr	r2, [pc, #72]	; (80043ec <inc_lock+0x118>)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	4413      	add	r3, r2
 80043a8:	330c      	adds	r3, #12
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <inc_lock+0xe0>
 80043b0:	2300      	movs	r3, #0
 80043b2:	e015      	b.n	80043e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d108      	bne.n	80043cc <inc_lock+0xf8>
 80043ba:	4a0c      	ldr	r2, [pc, #48]	; (80043ec <inc_lock+0x118>)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	4413      	add	r3, r2
 80043c2:	330c      	adds	r3, #12
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	3301      	adds	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	e001      	b.n	80043d0 <inc_lock+0xfc>
 80043cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043d0:	4906      	ldr	r1, [pc, #24]	; (80043ec <inc_lock+0x118>)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	440b      	add	r3, r1
 80043d8:	330c      	adds	r3, #12
 80043da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	3301      	adds	r3, #1
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	2000216c 	.word	0x2000216c

080043f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	607b      	str	r3, [r7, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d825      	bhi.n	8004450 <dec_lock+0x60>
		n = Files[i].ctr;
 8004404:	4a17      	ldr	r2, [pc, #92]	; (8004464 <dec_lock+0x74>)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	4413      	add	r3, r2
 800440c:	330c      	adds	r3, #12
 800440e:	881b      	ldrh	r3, [r3, #0]
 8004410:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004412:	89fb      	ldrh	r3, [r7, #14]
 8004414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004418:	d101      	bne.n	800441e <dec_lock+0x2e>
 800441a:	2300      	movs	r3, #0
 800441c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800441e:	89fb      	ldrh	r3, [r7, #14]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <dec_lock+0x3a>
 8004424:	89fb      	ldrh	r3, [r7, #14]
 8004426:	3b01      	subs	r3, #1
 8004428:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800442a:	4a0e      	ldr	r2, [pc, #56]	; (8004464 <dec_lock+0x74>)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	4413      	add	r3, r2
 8004432:	330c      	adds	r3, #12
 8004434:	89fa      	ldrh	r2, [r7, #14]
 8004436:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004438:	89fb      	ldrh	r3, [r7, #14]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d105      	bne.n	800444a <dec_lock+0x5a>
 800443e:	4a09      	ldr	r2, [pc, #36]	; (8004464 <dec_lock+0x74>)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	4413      	add	r3, r2
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	737b      	strb	r3, [r7, #13]
 800444e:	e001      	b.n	8004454 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004450:	2302      	movs	r3, #2
 8004452:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004454:	7b7b      	ldrb	r3, [r7, #13]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	2000216c 	.word	0x2000216c

08004468 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004470:	2300      	movs	r3, #0
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	e010      	b.n	8004498 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004476:	4a0d      	ldr	r2, [pc, #52]	; (80044ac <clear_lock+0x44>)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	4413      	add	r3, r2
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	429a      	cmp	r2, r3
 8004484:	d105      	bne.n	8004492 <clear_lock+0x2a>
 8004486:	4a09      	ldr	r2, [pc, #36]	; (80044ac <clear_lock+0x44>)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	4413      	add	r3, r2
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3301      	adds	r3, #1
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d9eb      	bls.n	8004476 <clear_lock+0xe>
	}
}
 800449e:	bf00      	nop
 80044a0:	bf00      	nop
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	2000216c 	.word	0x2000216c

080044b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	78db      	ldrb	r3, [r3, #3]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d034      	beq.n	800452e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	7858      	ldrb	r0, [r3, #1]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80044d4:	2301      	movs	r3, #1
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	f7ff fd40 	bl	8003f5c <disk_write>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	73fb      	strb	r3, [r7, #15]
 80044e6:	e022      	b.n	800452e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	1ad2      	subs	r2, r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d217      	bcs.n	800452e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	789b      	ldrb	r3, [r3, #2]
 8004502:	613b      	str	r3, [r7, #16]
 8004504:	e010      	b.n	8004528 <sync_window+0x78>
					wsect += fs->fsize;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	4413      	add	r3, r2
 800450e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	7858      	ldrb	r0, [r3, #1]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800451a:	2301      	movs	r3, #1
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	f7ff fd1d 	bl	8003f5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	3b01      	subs	r3, #1
 8004526:	613b      	str	r3, [r7, #16]
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d8eb      	bhi.n	8004506 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800452e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	429a      	cmp	r2, r3
 800454e:	d01b      	beq.n	8004588 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff ffad 	bl	80044b0 <sync_window>
 8004556:	4603      	mov	r3, r0
 8004558:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d113      	bne.n	8004588 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	7858      	ldrb	r0, [r3, #1]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800456a:	2301      	movs	r3, #1
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	f7ff fcd5 	bl	8003f1c <disk_read>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d004      	beq.n	8004582 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004578:	f04f 33ff 	mov.w	r3, #4294967295
 800457c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800457e:	2301      	movs	r3, #1
 8004580:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8004588:	7bfb      	ldrb	r3, [r7, #15]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7ff ff87 	bl	80044b0 <sync_window>
 80045a2:	4603      	mov	r3, r0
 80045a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d159      	bne.n	8004660 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d149      	bne.n	8004648 <sync_fs+0xb4>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	791b      	ldrb	r3, [r3, #4]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d145      	bne.n	8004648 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	899b      	ldrh	r3, [r3, #12]
 80045c6:	461a      	mov	r2, r3
 80045c8:	2100      	movs	r1, #0
 80045ca:	f7ff fda8 	bl	800411e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3338      	adds	r3, #56	; 0x38
 80045d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80045d6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff fd37 	bl	800404e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3338      	adds	r3, #56	; 0x38
 80045e4:	4921      	ldr	r1, [pc, #132]	; (800466c <sync_fs+0xd8>)
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff fd4c 	bl	8004084 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3338      	adds	r3, #56	; 0x38
 80045f0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80045f4:	491e      	ldr	r1, [pc, #120]	; (8004670 <sync_fs+0xdc>)
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff fd44 	bl	8004084 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3338      	adds	r3, #56	; 0x38
 8004600:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	4619      	mov	r1, r3
 800460a:	4610      	mov	r0, r2
 800460c:	f7ff fd3a 	bl	8004084 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3338      	adds	r3, #56	; 0x38
 8004614:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	4619      	mov	r1, r3
 800461e:	4610      	mov	r0, r2
 8004620:	f7ff fd30 	bl	8004084 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	7858      	ldrb	r0, [r3, #1]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800463c:	2301      	movs	r3, #1
 800463e:	f7ff fc8d 	bl	8003f5c <disk_write>
			fs->fsi_flag = 0;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	785b      	ldrb	r3, [r3, #1]
 800464c:	2200      	movs	r2, #0
 800464e:	2100      	movs	r1, #0
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff fca3 	bl	8003f9c <disk_ioctl>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <sync_fs+0xcc>
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004660:	7bfb      	ldrb	r3, [r7, #15]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	41615252 	.word	0x41615252
 8004670:	61417272 	.word	0x61417272

08004674 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	3b02      	subs	r3, #2
 8004682:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	3b02      	subs	r3, #2
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d301      	bcc.n	8004694 <clust2sect+0x20>
 8004690:	2300      	movs	r3, #0
 8004692:	e008      	b.n	80046a6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	895b      	ldrh	r3, [r3, #10]
 8004698:	461a      	mov	r2, r3
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	fb03 f202 	mul.w	r2, r3, r2
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a4:	4413      	add	r3, r2
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b086      	sub	sp, #24
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d904      	bls.n	80046d2 <get_fat+0x20>
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d302      	bcc.n	80046d8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80046d2:	2301      	movs	r3, #1
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	e0bb      	b.n	8004850 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80046d8:	f04f 33ff 	mov.w	r3, #4294967295
 80046dc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	2b03      	cmp	r3, #3
 80046e4:	f000 8083 	beq.w	80047ee <get_fat+0x13c>
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	f300 80a7 	bgt.w	800483c <get_fat+0x18a>
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d002      	beq.n	80046f8 <get_fat+0x46>
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d056      	beq.n	80047a4 <get_fat+0xf2>
 80046f6:	e0a1      	b.n	800483c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	085b      	lsrs	r3, r3, #1
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	899b      	ldrh	r3, [r3, #12]
 800470e:	4619      	mov	r1, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	fbb3 f3f1 	udiv	r3, r3, r1
 8004716:	4413      	add	r3, r2
 8004718:	4619      	mov	r1, r3
 800471a:	6938      	ldr	r0, [r7, #16]
 800471c:	f7ff ff0c 	bl	8004538 <move_window>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	f040 808d 	bne.w	8004842 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	60fa      	str	r2, [r7, #12]
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	8992      	ldrh	r2, [r2, #12]
 8004732:	fbb3 f1f2 	udiv	r1, r3, r2
 8004736:	fb01 f202 	mul.w	r2, r1, r2
 800473a:	1a9b      	subs	r3, r3, r2
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4413      	add	r3, r2
 8004740:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004744:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	899b      	ldrh	r3, [r3, #12]
 800474e:	4619      	mov	r1, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	fbb3 f3f1 	udiv	r3, r3, r1
 8004756:	4413      	add	r3, r2
 8004758:	4619      	mov	r1, r3
 800475a:	6938      	ldr	r0, [r7, #16]
 800475c:	f7ff feec 	bl	8004538 <move_window>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d16f      	bne.n	8004846 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	899b      	ldrh	r3, [r3, #12]
 800476a:	461a      	mov	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004772:	fb01 f202 	mul.w	r2, r1, r2
 8004776:	1a9b      	subs	r3, r3, r2
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	4413      	add	r3, r2
 800477c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004780:	021b      	lsls	r3, r3, #8
 8004782:	461a      	mov	r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4313      	orrs	r3, r2
 8004788:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <get_fat+0xe8>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	091b      	lsrs	r3, r3, #4
 8004798:	e002      	b.n	80047a0 <get_fat+0xee>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047a0:	617b      	str	r3, [r7, #20]
			break;
 80047a2:	e055      	b.n	8004850 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	899b      	ldrh	r3, [r3, #12]
 80047ac:	085b      	lsrs	r3, r3, #1
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	4619      	mov	r1, r3
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80047b8:	4413      	add	r3, r2
 80047ba:	4619      	mov	r1, r3
 80047bc:	6938      	ldr	r0, [r7, #16]
 80047be:	f7ff febb 	bl	8004538 <move_window>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d140      	bne.n	800484a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	8992      	ldrh	r2, [r2, #12]
 80047d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80047da:	fb00 f202 	mul.w	r2, r0, r2
 80047de:	1a9b      	subs	r3, r3, r2
 80047e0:	440b      	add	r3, r1
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff fbf8 	bl	8003fd8 <ld_word>
 80047e8:	4603      	mov	r3, r0
 80047ea:	617b      	str	r3, [r7, #20]
			break;
 80047ec:	e030      	b.n	8004850 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	899b      	ldrh	r3, [r3, #12]
 80047f6:	089b      	lsrs	r3, r3, #2
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	4619      	mov	r1, r3
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004802:	4413      	add	r3, r2
 8004804:	4619      	mov	r1, r3
 8004806:	6938      	ldr	r0, [r7, #16]
 8004808:	f7ff fe96 	bl	8004538 <move_window>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d11d      	bne.n	800484e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	8992      	ldrh	r2, [r2, #12]
 8004820:	fbb3 f0f2 	udiv	r0, r3, r2
 8004824:	fb00 f202 	mul.w	r2, r0, r2
 8004828:	1a9b      	subs	r3, r3, r2
 800482a:	440b      	add	r3, r1
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff fbeb 	bl	8004008 <ld_dword>
 8004832:	4603      	mov	r3, r0
 8004834:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004838:	617b      	str	r3, [r7, #20]
			break;
 800483a:	e009      	b.n	8004850 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800483c:	2301      	movs	r3, #1
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	e006      	b.n	8004850 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004842:	bf00      	nop
 8004844:	e004      	b.n	8004850 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004846:	bf00      	nop
 8004848:	e002      	b.n	8004850 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800484a:	bf00      	nop
 800484c:	e000      	b.n	8004850 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800484e:	bf00      	nop
		}
	}

	return val;
 8004850:	697b      	ldr	r3, [r7, #20]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800485a:	b590      	push	{r4, r7, lr}
 800485c:	b089      	sub	sp, #36	; 0x24
 800485e:	af00      	add	r7, sp, #0
 8004860:	60f8      	str	r0, [r7, #12]
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004866:	2302      	movs	r3, #2
 8004868:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b01      	cmp	r3, #1
 800486e:	f240 8102 	bls.w	8004a76 <put_fat+0x21c>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	429a      	cmp	r2, r3
 800487a:	f080 80fc 	bcs.w	8004a76 <put_fat+0x21c>
		switch (fs->fs_type) {
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b03      	cmp	r3, #3
 8004884:	f000 80b6 	beq.w	80049f4 <put_fat+0x19a>
 8004888:	2b03      	cmp	r3, #3
 800488a:	f300 80fd 	bgt.w	8004a88 <put_fat+0x22e>
 800488e:	2b01      	cmp	r3, #1
 8004890:	d003      	beq.n	800489a <put_fat+0x40>
 8004892:	2b02      	cmp	r3, #2
 8004894:	f000 8083 	beq.w	800499e <put_fat+0x144>
 8004898:	e0f6      	b.n	8004a88 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	61bb      	str	r3, [r7, #24]
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	085b      	lsrs	r3, r3, #1
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	4413      	add	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	899b      	ldrh	r3, [r3, #12]
 80048b0:	4619      	mov	r1, r3
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80048b8:	4413      	add	r3, r2
 80048ba:	4619      	mov	r1, r3
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f7ff fe3b 	bl	8004538 <move_window>
 80048c2:	4603      	mov	r3, r0
 80048c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80048c6:	7ffb      	ldrb	r3, [r7, #31]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f040 80d6 	bne.w	8004a7a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	61ba      	str	r2, [r7, #24]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	8992      	ldrh	r2, [r2, #12]
 80048de:	fbb3 f0f2 	udiv	r0, r3, r2
 80048e2:	fb00 f202 	mul.w	r2, r0, r2
 80048e6:	1a9b      	subs	r3, r3, r2
 80048e8:	440b      	add	r3, r1
 80048ea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00d      	beq.n	8004912 <put_fat+0xb8>
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	b25b      	sxtb	r3, r3
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	b25a      	sxtb	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	b2db      	uxtb	r3, r3
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	b25b      	sxtb	r3, r3
 800490a:	4313      	orrs	r3, r2
 800490c:	b25b      	sxtb	r3, r3
 800490e:	b2db      	uxtb	r3, r3
 8004910:	e001      	b.n	8004916 <put_fat+0xbc>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	b2db      	uxtb	r3, r3
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2201      	movs	r2, #1
 800491e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	899b      	ldrh	r3, [r3, #12]
 8004928:	4619      	mov	r1, r3
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004930:	4413      	add	r3, r2
 8004932:	4619      	mov	r1, r3
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f7ff fdff 	bl	8004538 <move_window>
 800493a:	4603      	mov	r3, r0
 800493c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800493e:	7ffb      	ldrb	r3, [r7, #31]
 8004940:	2b00      	cmp	r3, #0
 8004942:	f040 809c 	bne.w	8004a7e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	899b      	ldrh	r3, [r3, #12]
 8004950:	461a      	mov	r2, r3
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	fbb3 f0f2 	udiv	r0, r3, r2
 8004958:	fb00 f202 	mul.w	r2, r0, r2
 800495c:	1a9b      	subs	r3, r3, r2
 800495e:	440b      	add	r3, r1
 8004960:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <put_fat+0x11a>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	091b      	lsrs	r3, r3, #4
 8004970:	b2db      	uxtb	r3, r3
 8004972:	e00e      	b.n	8004992 <put_fat+0x138>
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	b25b      	sxtb	r3, r3
 800497a:	f023 030f 	bic.w	r3, r3, #15
 800497e:	b25a      	sxtb	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	0a1b      	lsrs	r3, r3, #8
 8004984:	b25b      	sxtb	r3, r3
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	b25b      	sxtb	r3, r3
 800498c:	4313      	orrs	r3, r2
 800498e:	b25b      	sxtb	r3, r3
 8004990:	b2db      	uxtb	r3, r3
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	70da      	strb	r2, [r3, #3]
			break;
 800499c:	e074      	b.n	8004a88 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	899b      	ldrh	r3, [r3, #12]
 80049a6:	085b      	lsrs	r3, r3, #1
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	4619      	mov	r1, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80049b2:	4413      	add	r3, r2
 80049b4:	4619      	mov	r1, r3
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f7ff fdbe 	bl	8004538 <move_window>
 80049bc:	4603      	mov	r3, r0
 80049be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80049c0:	7ffb      	ldrb	r3, [r7, #31]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d15d      	bne.n	8004a82 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	8992      	ldrh	r2, [r2, #12]
 80049d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80049d8:	fb00 f202 	mul.w	r2, r0, r2
 80049dc:	1a9b      	subs	r3, r3, r2
 80049de:	440b      	add	r3, r1
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	b292      	uxth	r2, r2
 80049e4:	4611      	mov	r1, r2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff fb31 	bl	800404e <st_word>
			fs->wflag = 1;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2201      	movs	r2, #1
 80049f0:	70da      	strb	r2, [r3, #3]
			break;
 80049f2:	e049      	b.n	8004a88 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	899b      	ldrh	r3, [r3, #12]
 80049fc:	089b      	lsrs	r3, r3, #2
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	4619      	mov	r1, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a08:	4413      	add	r3, r2
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f7ff fd93 	bl	8004538 <move_window>
 8004a12:	4603      	mov	r3, r0
 8004a14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a16:	7ffb      	ldrb	r3, [r7, #31]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d134      	bne.n	8004a86 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	8992      	ldrh	r2, [r2, #12]
 8004a30:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a34:	fb00 f202 	mul.w	r2, r0, r2
 8004a38:	1a9b      	subs	r3, r3, r2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff fae3 	bl	8004008 <ld_dword>
 8004a42:	4603      	mov	r3, r0
 8004a44:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004a48:	4323      	orrs	r3, r4
 8004a4a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	8992      	ldrh	r2, [r2, #12]
 8004a5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a5e:	fb00 f202 	mul.w	r2, r0, r2
 8004a62:	1a9b      	subs	r3, r3, r2
 8004a64:	440b      	add	r3, r1
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7ff fb0b 	bl	8004084 <st_dword>
			fs->wflag = 1;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	70da      	strb	r2, [r3, #3]
			break;
 8004a74:	e008      	b.n	8004a88 <put_fat+0x22e>
		}
	}
 8004a76:	bf00      	nop
 8004a78:	e006      	b.n	8004a88 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004a7a:	bf00      	nop
 8004a7c:	e004      	b.n	8004a88 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004a7e:	bf00      	nop
 8004a80:	e002      	b.n	8004a88 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004a82:	bf00      	nop
 8004a84:	e000      	b.n	8004a88 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004a86:	bf00      	nop
	return res;
 8004a88:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3724      	adds	r7, #36	; 0x24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd90      	pop	{r4, r7, pc}

08004a92 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b088      	sub	sp, #32
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d904      	bls.n	8004ab8 <remove_chain+0x26>
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d301      	bcc.n	8004abc <remove_chain+0x2a>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	e04b      	b.n	8004b54 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00c      	beq.n	8004adc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	69b8      	ldr	r0, [r7, #24]
 8004aca:	f7ff fec6 	bl	800485a <put_fat>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004ad2:	7ffb      	ldrb	r3, [r7, #31]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <remove_chain+0x4a>
 8004ad8:	7ffb      	ldrb	r3, [r7, #31]
 8004ada:	e03b      	b.n	8004b54 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f7ff fde7 	bl	80046b2 <get_fat>
 8004ae4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d031      	beq.n	8004b50 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d101      	bne.n	8004af6 <remove_chain+0x64>
 8004af2:	2302      	movs	r3, #2
 8004af4:	e02e      	b.n	8004b54 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afc:	d101      	bne.n	8004b02 <remove_chain+0x70>
 8004afe:	2301      	movs	r3, #1
 8004b00:	e028      	b.n	8004b54 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004b02:	2200      	movs	r2, #0
 8004b04:	68b9      	ldr	r1, [r7, #8]
 8004b06:	69b8      	ldr	r0, [r7, #24]
 8004b08:	f7ff fea7 	bl	800485a <put_fat>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004b10:	7ffb      	ldrb	r3, [r7, #31]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <remove_chain+0x88>
 8004b16:	7ffb      	ldrb	r3, [r7, #31]
 8004b18:	e01c      	b.n	8004b54 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	699a      	ldr	r2, [r3, #24]
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	3b02      	subs	r3, #2
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d20b      	bcs.n	8004b40 <remove_chain+0xae>
			fs->free_clst++;
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	791b      	ldrb	r3, [r3, #4]
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	69db      	ldr	r3, [r3, #28]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d3c6      	bcc.n	8004adc <remove_chain+0x4a>
 8004b4e:	e000      	b.n	8004b52 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004b50:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3720      	adds	r7, #32
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b088      	sub	sp, #32
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10d      	bne.n	8004b8e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d004      	beq.n	8004b88 <create_chain+0x2c>
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d31b      	bcc.n	8004bc0 <create_chain+0x64>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	61bb      	str	r3, [r7, #24]
 8004b8c:	e018      	b.n	8004bc0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004b8e:	6839      	ldr	r1, [r7, #0]
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff fd8e 	bl	80046b2 <get_fat>
 8004b96:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d801      	bhi.n	8004ba2 <create_chain+0x46>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e070      	b.n	8004c84 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba8:	d101      	bne.n	8004bae <create_chain+0x52>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	e06a      	b.n	8004c84 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d201      	bcs.n	8004bbc <create_chain+0x60>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	e063      	b.n	8004c84 <create_chain+0x128>
		scl = clst;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d307      	bcc.n	8004be4 <create_chain+0x88>
				ncl = 2;
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d901      	bls.n	8004be4 <create_chain+0x88>
 8004be0:	2300      	movs	r3, #0
 8004be2:	e04f      	b.n	8004c84 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004be4:	69f9      	ldr	r1, [r7, #28]
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7ff fd63 	bl	80046b2 <get_fat>
 8004bec:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00e      	beq.n	8004c12 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d003      	beq.n	8004c02 <create_chain+0xa6>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c00:	d101      	bne.n	8004c06 <create_chain+0xaa>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	e03e      	b.n	8004c84 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004c06:	69fa      	ldr	r2, [r7, #28]
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d1da      	bne.n	8004bc4 <create_chain+0x68>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e038      	b.n	8004c84 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004c12:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004c14:	f04f 32ff 	mov.w	r2, #4294967295
 8004c18:	69f9      	ldr	r1, [r7, #28]
 8004c1a:	6938      	ldr	r0, [r7, #16]
 8004c1c:	f7ff fe1d 	bl	800485a <put_fat>
 8004c20:	4603      	mov	r3, r0
 8004c22:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004c24:	7dfb      	ldrb	r3, [r7, #23]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d109      	bne.n	8004c3e <create_chain+0xe2>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d006      	beq.n	8004c3e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	6839      	ldr	r1, [r7, #0]
 8004c34:	6938      	ldr	r0, [r7, #16]
 8004c36:	f7ff fe10 	bl	800485a <put_fat>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004c3e:	7dfb      	ldrb	r3, [r7, #23]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d116      	bne.n	8004c72 <create_chain+0x116>
		fs->last_clst = ncl;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	69fa      	ldr	r2, [r7, #28]
 8004c48:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	699a      	ldr	r2, [r3, #24]
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	3b02      	subs	r3, #2
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d804      	bhi.n	8004c62 <create_chain+0x106>
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	1e5a      	subs	r2, r3, #1
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	791b      	ldrb	r3, [r3, #4]
 8004c66:	f043 0301 	orr.w	r3, r3, #1
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	711a      	strb	r2, [r3, #4]
 8004c70:	e007      	b.n	8004c82 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004c72:	7dfb      	ldrb	r3, [r7, #23]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d102      	bne.n	8004c7e <create_chain+0x122>
 8004c78:	f04f 33ff 	mov.w	r3, #4294967295
 8004c7c:	e000      	b.n	8004c80 <create_chain+0x124>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004c82:	69fb      	ldr	r3, [r7, #28]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3720      	adds	r7, #32
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	899b      	ldrh	r3, [r3, #12]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	8952      	ldrh	r2, [r2, #10]
 8004cb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1d1a      	adds	r2, r3, #4
 8004cbe:	613a      	str	r2, [r7, #16]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <clmt_clust+0x42>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	e010      	b.n	8004cf0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d307      	bcc.n	8004ce6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004ce4:	e7e9      	b.n	8004cba <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004ce6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	4413      	add	r3, r2
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	371c      	adds	r7, #28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d12:	d204      	bcs.n	8004d1e <dir_sdi+0x22>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	f003 031f 	and.w	r3, r3, #31
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004d1e:	2302      	movs	r3, #2
 8004d20:	e071      	b.n	8004e06 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d106      	bne.n	8004d42 <dir_sdi+0x46>
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d902      	bls.n	8004d42 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10c      	bne.n	8004d62 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	8912      	ldrh	r2, [r2, #8]
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d301      	bcc.n	8004d58 <dir_sdi+0x5c>
 8004d54:	2302      	movs	r3, #2
 8004d56:	e056      	b.n	8004e06 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	61da      	str	r2, [r3, #28]
 8004d60:	e02d      	b.n	8004dbe <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	895b      	ldrh	r3, [r3, #10]
 8004d66:	461a      	mov	r2, r3
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	899b      	ldrh	r3, [r3, #12]
 8004d6c:	fb02 f303 	mul.w	r3, r2, r3
 8004d70:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d72:	e019      	b.n	8004da8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6979      	ldr	r1, [r7, #20]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff fc9a 	bl	80046b2 <get_fat>
 8004d7e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d86:	d101      	bne.n	8004d8c <dir_sdi+0x90>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e03c      	b.n	8004e06 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d904      	bls.n	8004d9c <dir_sdi+0xa0>
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d301      	bcc.n	8004da0 <dir_sdi+0xa4>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e032      	b.n	8004e06 <dir_sdi+0x10a>
			ofs -= csz;
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d2e1      	bcs.n	8004d74 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004db0:	6979      	ldr	r1, [r7, #20]
 8004db2:	6938      	ldr	r0, [r7, #16]
 8004db4:	f7ff fc5e 	bl	8004674 <clust2sect>
 8004db8:	4602      	mov	r2, r0
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <dir_sdi+0xd4>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e01a      	b.n	8004e06 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	69da      	ldr	r2, [r3, #28]
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	899b      	ldrh	r3, [r3, #12]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	fbb3 f3f1 	udiv	r3, r3, r1
 8004de0:	441a      	add	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	899b      	ldrh	r3, [r3, #12]
 8004df0:	461a      	mov	r2, r3
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	fbb3 f0f2 	udiv	r0, r3, r2
 8004df8:	fb00 f202 	mul.w	r2, r0, r2
 8004dfc:	1a9b      	subs	r3, r3, r2
 8004dfe:	18ca      	adds	r2, r1, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b086      	sub	sp, #24
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	3320      	adds	r3, #32
 8004e24:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <dir_next+0x28>
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e34:	d301      	bcc.n	8004e3a <dir_next+0x2c>
 8004e36:	2304      	movs	r3, #4
 8004e38:	e0bb      	b.n	8004fb2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	899b      	ldrh	r3, [r3, #12]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e46:	fb01 f202 	mul.w	r2, r1, r2
 8004e4a:	1a9b      	subs	r3, r3, r2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f040 809d 	bne.w	8004f8c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10b      	bne.n	8004e7c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	8912      	ldrh	r2, [r2, #8]
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	f0c0 808d 	bcc.w	8004f8c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	61da      	str	r2, [r3, #28]
 8004e78:	2304      	movs	r3, #4
 8004e7a:	e09a      	b.n	8004fb2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	899b      	ldrh	r3, [r3, #12]
 8004e80:	461a      	mov	r2, r3
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	8952      	ldrh	r2, [r2, #10]
 8004e8c:	3a01      	subs	r2, #1
 8004e8e:	4013      	ands	r3, r2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d17b      	bne.n	8004f8c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	f7ff fc08 	bl	80046b2 <get_fat>
 8004ea2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d801      	bhi.n	8004eae <dir_next+0xa0>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e081      	b.n	8004fb2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb4:	d101      	bne.n	8004eba <dir_next+0xac>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e07b      	b.n	8004fb2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d359      	bcc.n	8004f78 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d104      	bne.n	8004ed4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	61da      	str	r2, [r3, #28]
 8004ed0:	2304      	movs	r3, #4
 8004ed2:	e06e      	b.n	8004fb2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	4619      	mov	r1, r3
 8004edc:	4610      	mov	r0, r2
 8004ede:	f7ff fe3d 	bl	8004b5c <create_chain>
 8004ee2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <dir_next+0xe0>
 8004eea:	2307      	movs	r3, #7
 8004eec:	e061      	b.n	8004fb2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <dir_next+0xea>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e05c      	b.n	8004fb2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efe:	d101      	bne.n	8004f04 <dir_next+0xf6>
 8004f00:	2301      	movs	r3, #1
 8004f02:	e056      	b.n	8004fb2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f7ff fad3 	bl	80044b0 <sync_window>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <dir_next+0x106>
 8004f10:	2301      	movs	r3, #1
 8004f12:	e04e      	b.n	8004fb2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	899b      	ldrh	r3, [r3, #12]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	2100      	movs	r1, #0
 8004f22:	f7ff f8fc 	bl	800411e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004f26:	2300      	movs	r3, #0
 8004f28:	613b      	str	r3, [r7, #16]
 8004f2a:	6979      	ldr	r1, [r7, #20]
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f7ff fba1 	bl	8004674 <clust2sect>
 8004f32:	4602      	mov	r2, r0
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	635a      	str	r2, [r3, #52]	; 0x34
 8004f38:	e012      	b.n	8004f60 <dir_next+0x152>
						fs->wflag = 1;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f7ff fab5 	bl	80044b0 <sync_window>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <dir_next+0x142>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e030      	b.n	8004fb2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	3301      	adds	r3, #1
 8004f54:	613b      	str	r3, [r7, #16]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	635a      	str	r2, [r3, #52]	; 0x34
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	895b      	ldrh	r3, [r3, #10]
 8004f64:	461a      	mov	r2, r3
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d3e6      	bcc.n	8004f3a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad2      	subs	r2, r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004f7e:	6979      	ldr	r1, [r7, #20]
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f7ff fb77 	bl	8004674 <clust2sect>
 8004f86:	4602      	mov	r2, r0
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	899b      	ldrh	r3, [r3, #12]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	fbb3 f0f2 	udiv	r0, r3, r2
 8004fa4:	fb00 f202 	mul.w	r2, r0, r2
 8004fa8:	1a9b      	subs	r3, r3, r2
 8004faa:	18ca      	adds	r2, r1, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b086      	sub	sp, #24
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004fca:	2100      	movs	r1, #0
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff fe95 	bl	8004cfc <dir_sdi>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004fd6:	7dfb      	ldrb	r3, [r7, #23]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d12b      	bne.n	8005034 <dir_alloc+0x7a>
		n = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f7ff faa6 	bl	8004538 <move_window>
 8004fec:	4603      	mov	r3, r0
 8004fee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004ff0:	7dfb      	ldrb	r3, [r7, #23]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d11d      	bne.n	8005032 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2be5      	cmp	r3, #229	; 0xe5
 8004ffe:	d004      	beq.n	800500a <dir_alloc+0x50>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d107      	bne.n	800501a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	3301      	adds	r3, #1
 800500e:	613b      	str	r3, [r7, #16]
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	429a      	cmp	r2, r3
 8005016:	d102      	bne.n	800501e <dir_alloc+0x64>
 8005018:	e00c      	b.n	8005034 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800501a:	2300      	movs	r3, #0
 800501c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800501e:	2101      	movs	r1, #1
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7ff fef4 	bl	8004e0e <dir_next>
 8005026:	4603      	mov	r3, r0
 8005028:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800502a:	7dfb      	ldrb	r3, [r7, #23]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0d7      	beq.n	8004fe0 <dir_alloc+0x26>
 8005030:	e000      	b.n	8005034 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005032:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005034:	7dfb      	ldrb	r3, [r7, #23]
 8005036:	2b04      	cmp	r3, #4
 8005038:	d101      	bne.n	800503e <dir_alloc+0x84>
 800503a:	2307      	movs	r3, #7
 800503c:	75fb      	strb	r3, [r7, #23]
	return res;
 800503e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	331a      	adds	r3, #26
 8005056:	4618      	mov	r0, r3
 8005058:	f7fe ffbe 	bl	8003fd8 <ld_word>
 800505c:	4603      	mov	r3, r0
 800505e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b03      	cmp	r3, #3
 8005066:	d109      	bne.n	800507c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	3314      	adds	r3, #20
 800506c:	4618      	mov	r0, r3
 800506e:	f7fe ffb3 	bl	8003fd8 <ld_word>
 8005072:	4603      	mov	r3, r0
 8005074:	041b      	lsls	r3, r3, #16
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4313      	orrs	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800507c:	68fb      	ldr	r3, [r7, #12]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	331a      	adds	r3, #26
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	b292      	uxth	r2, r2
 800509a:	4611      	mov	r1, r2
 800509c:	4618      	mov	r0, r3
 800509e:	f7fe ffd6 	bl	800404e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b03      	cmp	r3, #3
 80050a8:	d109      	bne.n	80050be <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f103 0214 	add.w	r2, r3, #20
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	0c1b      	lsrs	r3, r3, #16
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	4619      	mov	r1, r3
 80050b8:	4610      	mov	r0, r2
 80050ba:	f7fe ffc8 	bl	800404e <st_word>
	}
}
 80050be:	bf00      	nop
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80050c8:	b590      	push	{r4, r7, lr}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	331a      	adds	r3, #26
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fe ff7e 	bl	8003fd8 <ld_word>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <cmp_lfn+0x1e>
 80050e2:	2300      	movs	r3, #0
 80050e4:	e059      	b.n	800519a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050ee:	1e5a      	subs	r2, r3, #1
 80050f0:	4613      	mov	r3, r2
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	4413      	add	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80050fc:	2301      	movs	r3, #1
 80050fe:	81fb      	strh	r3, [r7, #14]
 8005100:	2300      	movs	r3, #0
 8005102:	613b      	str	r3, [r7, #16]
 8005104:	e033      	b.n	800516e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005106:	4a27      	ldr	r2, [pc, #156]	; (80051a4 <cmp_lfn+0xdc>)
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	4413      	add	r3, r2
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	461a      	mov	r2, r3
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	4413      	add	r3, r2
 8005114:	4618      	mov	r0, r3
 8005116:	f7fe ff5f 	bl	8003fd8 <ld_word>
 800511a:	4603      	mov	r3, r0
 800511c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800511e:	89fb      	ldrh	r3, [r7, #14]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d01a      	beq.n	800515a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2bfe      	cmp	r3, #254	; 0xfe
 8005128:	d812      	bhi.n	8005150 <cmp_lfn+0x88>
 800512a:	89bb      	ldrh	r3, [r7, #12]
 800512c:	4618      	mov	r0, r3
 800512e:	f001 fe2d 	bl	8006d8c <ff_wtoupper>
 8005132:	4603      	mov	r3, r0
 8005134:	461c      	mov	r4, r3
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	617a      	str	r2, [r7, #20]
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	4413      	add	r3, r2
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	4618      	mov	r0, r3
 8005146:	f001 fe21 	bl	8006d8c <ff_wtoupper>
 800514a:	4603      	mov	r3, r0
 800514c:	429c      	cmp	r4, r3
 800514e:	d001      	beq.n	8005154 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005150:	2300      	movs	r3, #0
 8005152:	e022      	b.n	800519a <cmp_lfn+0xd2>
			}
			wc = uc;
 8005154:	89bb      	ldrh	r3, [r7, #12]
 8005156:	81fb      	strh	r3, [r7, #14]
 8005158:	e006      	b.n	8005168 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800515a:	89bb      	ldrh	r3, [r7, #12]
 800515c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005160:	4293      	cmp	r3, r2
 8005162:	d001      	beq.n	8005168 <cmp_lfn+0xa0>
 8005164:	2300      	movs	r3, #0
 8005166:	e018      	b.n	800519a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	3301      	adds	r3, #1
 800516c:	613b      	str	r3, [r7, #16]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	2b0c      	cmp	r3, #12
 8005172:	d9c8      	bls.n	8005106 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00b      	beq.n	8005198 <cmp_lfn+0xd0>
 8005180:	89fb      	ldrh	r3, [r7, #14]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d008      	beq.n	8005198 <cmp_lfn+0xd0>
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	4413      	add	r3, r2
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <cmp_lfn+0xd0>
 8005194:	2300      	movs	r3, #0
 8005196:	e000      	b.n	800519a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005198:	2301      	movs	r3, #1
}
 800519a:	4618      	mov	r0, r3
 800519c:	371c      	adds	r7, #28
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd90      	pop	{r4, r7, pc}
 80051a2:	bf00      	nop
 80051a4:	0800700c 	.word	0x0800700c

080051a8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	4611      	mov	r1, r2
 80051b4:	461a      	mov	r2, r3
 80051b6:	460b      	mov	r3, r1
 80051b8:	71fb      	strb	r3, [r7, #7]
 80051ba:	4613      	mov	r3, r2
 80051bc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	330d      	adds	r3, #13
 80051c2:	79ba      	ldrb	r2, [r7, #6]
 80051c4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	330b      	adds	r3, #11
 80051ca:	220f      	movs	r2, #15
 80051cc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	330c      	adds	r3, #12
 80051d2:	2200      	movs	r2, #0
 80051d4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	331a      	adds	r3, #26
 80051da:	2100      	movs	r1, #0
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fe ff36 	bl	800404e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	1e5a      	subs	r2, r3, #1
 80051e6:	4613      	mov	r3, r2
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	4413      	add	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80051f2:	2300      	movs	r3, #0
 80051f4:	82fb      	strh	r3, [r7, #22]
 80051f6:	2300      	movs	r3, #0
 80051f8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80051fa:	8afb      	ldrh	r3, [r7, #22]
 80051fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005200:	4293      	cmp	r3, r2
 8005202:	d007      	beq.n	8005214 <put_lfn+0x6c>
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	61fa      	str	r2, [r7, #28]
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005214:	4a17      	ldr	r2, [pc, #92]	; (8005274 <put_lfn+0xcc>)
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	4413      	add	r3, r2
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	4413      	add	r3, r2
 8005222:	8afa      	ldrh	r2, [r7, #22]
 8005224:	4611      	mov	r1, r2
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe ff11 	bl	800404e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800522c:	8afb      	ldrh	r3, [r7, #22]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d102      	bne.n	8005238 <put_lfn+0x90>
 8005232:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005236:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	3301      	adds	r3, #1
 800523c:	61bb      	str	r3, [r7, #24]
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	2b0c      	cmp	r3, #12
 8005242:	d9da      	bls.n	80051fa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005244:	8afb      	ldrh	r3, [r7, #22]
 8005246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800524a:	4293      	cmp	r3, r2
 800524c:	d006      	beq.n	800525c <put_lfn+0xb4>
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4413      	add	r3, r2
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d103      	bne.n	8005264 <put_lfn+0xbc>
 800525c:	79fb      	ldrb	r3, [r7, #7]
 800525e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005262:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	79fa      	ldrb	r2, [r7, #7]
 8005268:	701a      	strb	r2, [r3, #0]
}
 800526a:	bf00      	nop
 800526c:	3720      	adds	r7, #32
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	0800700c 	.word	0x0800700c

08005278 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08c      	sub	sp, #48	; 0x30
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005286:	220b      	movs	r2, #11
 8005288:	68b9      	ldr	r1, [r7, #8]
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f7fe ff26 	bl	80040dc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b05      	cmp	r3, #5
 8005294:	d92b      	bls.n	80052ee <gen_numname+0x76>
		sr = seq;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800529a:	e022      	b.n	80052e2 <gen_numname+0x6a>
			wc = *lfn++;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	1c9a      	adds	r2, r3, #2
 80052a0:	607a      	str	r2, [r7, #4]
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80052a6:	2300      	movs	r3, #0
 80052a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052aa:	e017      	b.n	80052dc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	005a      	lsls	r2, r3, #1
 80052b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	4413      	add	r3, r2
 80052b8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80052ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80052bc:	085b      	lsrs	r3, r3, #1
 80052be:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d005      	beq.n	80052d6 <gen_numname+0x5e>
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80052d0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80052d4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80052d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d8:	3301      	adds	r3, #1
 80052da:	62bb      	str	r3, [r7, #40]	; 0x28
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	2b0f      	cmp	r3, #15
 80052e0:	d9e4      	bls.n	80052ac <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1d8      	bne.n	800529c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80052ee:	2307      	movs	r3, #7
 80052f0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	3330      	adds	r3, #48	; 0x30
 80052fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8005302:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005306:	2b39      	cmp	r3, #57	; 0x39
 8005308:	d904      	bls.n	8005314 <gen_numname+0x9c>
 800530a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800530e:	3307      	adds	r3, #7
 8005310:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	1e5a      	subs	r2, r3, #1
 8005318:	62ba      	str	r2, [r7, #40]	; 0x28
 800531a:	3330      	adds	r3, #48	; 0x30
 800531c:	443b      	add	r3, r7
 800531e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005322:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	091b      	lsrs	r3, r3, #4
 800532a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1df      	bne.n	80052f2 <gen_numname+0x7a>
	ns[i] = '~';
 8005332:	f107 0214 	add.w	r2, r7, #20
 8005336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005338:	4413      	add	r3, r2
 800533a:	227e      	movs	r2, #126	; 0x7e
 800533c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800533e:	2300      	movs	r3, #0
 8005340:	627b      	str	r3, [r7, #36]	; 0x24
 8005342:	e002      	b.n	800534a <gen_numname+0xd2>
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	3301      	adds	r3, #1
 8005348:	627b      	str	r3, [r7, #36]	; 0x24
 800534a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800534c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534e:	429a      	cmp	r2, r3
 8005350:	d205      	bcs.n	800535e <gen_numname+0xe6>
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	4413      	add	r3, r2
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b20      	cmp	r3, #32
 800535c:	d1f2      	bne.n	8005344 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	2b07      	cmp	r3, #7
 8005362:	d807      	bhi.n	8005374 <gen_numname+0xfc>
 8005364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005366:	1c5a      	adds	r2, r3, #1
 8005368:	62ba      	str	r2, [r7, #40]	; 0x28
 800536a:	3330      	adds	r3, #48	; 0x30
 800536c:	443b      	add	r3, r7
 800536e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005372:	e000      	b.n	8005376 <gen_numname+0xfe>
 8005374:	2120      	movs	r1, #32
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	627a      	str	r2, [r7, #36]	; 0x24
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4413      	add	r3, r2
 8005380:	460a      	mov	r2, r1
 8005382:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	2b07      	cmp	r3, #7
 8005388:	d9e9      	bls.n	800535e <gen_numname+0xe6>
}
 800538a:	bf00      	nop
 800538c:	bf00      	nop
 800538e:	3730      	adds	r7, #48	; 0x30
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800539c:	2300      	movs	r3, #0
 800539e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80053a0:	230b      	movs	r3, #11
 80053a2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	0852      	lsrs	r2, r2, #1
 80053aa:	01db      	lsls	r3, r3, #7
 80053ac:	4313      	orrs	r3, r2
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	1c59      	adds	r1, r3, #1
 80053b4:	6079      	str	r1, [r7, #4]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	4413      	add	r3, r2
 80053ba:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	3b01      	subs	r3, #1
 80053c0:	60bb      	str	r3, [r7, #8]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1ed      	bne.n	80053a4 <sum_sfn+0x10>
	return sum;
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b086      	sub	sp, #24
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80053e4:	2100      	movs	r1, #0
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7ff fc88 	bl	8004cfc <dir_sdi>
 80053ec:	4603      	mov	r3, r0
 80053ee:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80053f0:	7dfb      	ldrb	r3, [r7, #23]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <dir_find+0x24>
 80053f6:	7dfb      	ldrb	r3, [r7, #23]
 80053f8:	e0a9      	b.n	800554e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80053fa:	23ff      	movs	r3, #255	; 0xff
 80053fc:	753b      	strb	r3, [r7, #20]
 80053fe:	7d3b      	ldrb	r3, [r7, #20]
 8005400:	757b      	strb	r3, [r7, #21]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f04f 32ff 	mov.w	r2, #4294967295
 8005408:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	4619      	mov	r1, r3
 8005410:	6938      	ldr	r0, [r7, #16]
 8005412:	f7ff f891 	bl	8004538 <move_window>
 8005416:	4603      	mov	r3, r0
 8005418:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800541a:	7dfb      	ldrb	r3, [r7, #23]
 800541c:	2b00      	cmp	r3, #0
 800541e:	f040 8090 	bne.w	8005542 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800542a:	7dbb      	ldrb	r3, [r7, #22]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d102      	bne.n	8005436 <dir_find+0x60>
 8005430:	2304      	movs	r3, #4
 8005432:	75fb      	strb	r3, [r7, #23]
 8005434:	e08a      	b.n	800554c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	330b      	adds	r3, #11
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005442:	73fb      	strb	r3, [r7, #15]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	7bfa      	ldrb	r2, [r7, #15]
 8005448:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800544a:	7dbb      	ldrb	r3, [r7, #22]
 800544c:	2be5      	cmp	r3, #229	; 0xe5
 800544e:	d007      	beq.n	8005460 <dir_find+0x8a>
 8005450:	7bfb      	ldrb	r3, [r7, #15]
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b00      	cmp	r3, #0
 8005458:	d009      	beq.n	800546e <dir_find+0x98>
 800545a:	7bfb      	ldrb	r3, [r7, #15]
 800545c:	2b0f      	cmp	r3, #15
 800545e:	d006      	beq.n	800546e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005460:	23ff      	movs	r3, #255	; 0xff
 8005462:	757b      	strb	r3, [r7, #21]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f04f 32ff 	mov.w	r2, #4294967295
 800546a:	631a      	str	r2, [r3, #48]	; 0x30
 800546c:	e05e      	b.n	800552c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800546e:	7bfb      	ldrb	r3, [r7, #15]
 8005470:	2b0f      	cmp	r3, #15
 8005472:	d136      	bne.n	80054e2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800547a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547e:	2b00      	cmp	r3, #0
 8005480:	d154      	bne.n	800552c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005482:	7dbb      	ldrb	r3, [r7, #22]
 8005484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00d      	beq.n	80054a8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	7b5b      	ldrb	r3, [r3, #13]
 8005492:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005494:	7dbb      	ldrb	r3, [r7, #22]
 8005496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800549a:	75bb      	strb	r3, [r7, #22]
 800549c:	7dbb      	ldrb	r3, [r7, #22]
 800549e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	695a      	ldr	r2, [r3, #20]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80054a8:	7dba      	ldrb	r2, [r7, #22]
 80054aa:	7d7b      	ldrb	r3, [r7, #21]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d115      	bne.n	80054dc <dir_find+0x106>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	330d      	adds	r3, #13
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	7d3a      	ldrb	r2, [r7, #20]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d10e      	bne.n	80054dc <dir_find+0x106>
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	691a      	ldr	r2, [r3, #16]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	4619      	mov	r1, r3
 80054c8:	4610      	mov	r0, r2
 80054ca:	f7ff fdfd 	bl	80050c8 <cmp_lfn>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <dir_find+0x106>
 80054d4:	7d7b      	ldrb	r3, [r7, #21]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	e000      	b.n	80054de <dir_find+0x108>
 80054dc:	23ff      	movs	r3, #255	; 0xff
 80054de:	757b      	strb	r3, [r7, #21]
 80054e0:	e024      	b.n	800552c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80054e2:	7d7b      	ldrb	r3, [r7, #21]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d109      	bne.n	80054fc <dir_find+0x126>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff ff51 	bl	8005394 <sum_sfn>
 80054f2:	4603      	mov	r3, r0
 80054f4:	461a      	mov	r2, r3
 80054f6:	7d3b      	ldrb	r3, [r7, #20]
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d024      	beq.n	8005546 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10a      	bne.n	8005520 <dir_find+0x14a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a18      	ldr	r0, [r3, #32]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3324      	adds	r3, #36	; 0x24
 8005512:	220b      	movs	r2, #11
 8005514:	4619      	mov	r1, r3
 8005516:	f7fe fe1d 	bl	8004154 <mem_cmp>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d014      	beq.n	800554a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005520:	23ff      	movs	r3, #255	; 0xff
 8005522:	757b      	strb	r3, [r7, #21]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f04f 32ff 	mov.w	r2, #4294967295
 800552a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800552c:	2100      	movs	r1, #0
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7ff fc6d 	bl	8004e0e <dir_next>
 8005534:	4603      	mov	r3, r0
 8005536:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005538:	7dfb      	ldrb	r3, [r7, #23]
 800553a:	2b00      	cmp	r3, #0
 800553c:	f43f af65 	beq.w	800540a <dir_find+0x34>
 8005540:	e004      	b.n	800554c <dir_find+0x176>
		if (res != FR_OK) break;
 8005542:	bf00      	nop
 8005544:	e002      	b.n	800554c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005546:	bf00      	nop
 8005548:	e000      	b.n	800554c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800554a:	bf00      	nop

	return res;
 800554c:	7dfb      	ldrb	r3, [r7, #23]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
	...

08005558 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08c      	sub	sp, #48	; 0x30
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800556c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <dir_register+0x20>
 8005574:	2306      	movs	r3, #6
 8005576:	e0e0      	b.n	800573a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005578:	2300      	movs	r3, #0
 800557a:	627b      	str	r3, [r7, #36]	; 0x24
 800557c:	e002      	b.n	8005584 <dir_register+0x2c>
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	3301      	adds	r3, #1
 8005582:	627b      	str	r3, [r7, #36]	; 0x24
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	4413      	add	r3, r2
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1f4      	bne.n	800557e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800559a:	f107 030c 	add.w	r3, r7, #12
 800559e:	220c      	movs	r2, #12
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7fe fd9b 	bl	80040dc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80055a6:	7dfb      	ldrb	r3, [r7, #23]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d032      	beq.n	8005616 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2240      	movs	r2, #64	; 0x40
 80055b4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80055b8:	2301      	movs	r3, #1
 80055ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80055bc:	e016      	b.n	80055ec <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	691a      	ldr	r2, [r3, #16]
 80055c8:	f107 010c 	add.w	r1, r7, #12
 80055cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ce:	f7ff fe53 	bl	8005278 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7ff feff 	bl	80053d6 <dir_find>
 80055d8:	4603      	mov	r3, r0
 80055da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80055de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80055e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e8:	3301      	adds	r3, #1
 80055ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	2b63      	cmp	r3, #99	; 0x63
 80055f0:	d9e5      	bls.n	80055be <dir_register+0x66>
 80055f2:	e000      	b.n	80055f6 <dir_register+0x9e>
			if (res != FR_OK) break;
 80055f4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80055f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f8:	2b64      	cmp	r3, #100	; 0x64
 80055fa:	d101      	bne.n	8005600 <dir_register+0xa8>
 80055fc:	2307      	movs	r3, #7
 80055fe:	e09c      	b.n	800573a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005600:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005604:	2b04      	cmp	r3, #4
 8005606:	d002      	beq.n	800560e <dir_register+0xb6>
 8005608:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800560c:	e095      	b.n	800573a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800560e:	7dfa      	ldrb	r2, [r7, #23]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005616:	7dfb      	ldrb	r3, [r7, #23]
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d007      	beq.n	8005630 <dir_register+0xd8>
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	330c      	adds	r3, #12
 8005624:	4a47      	ldr	r2, [pc, #284]	; (8005744 <dir_register+0x1ec>)
 8005626:	fba2 2303 	umull	r2, r3, r2, r3
 800562a:	089b      	lsrs	r3, r3, #2
 800562c:	3301      	adds	r3, #1
 800562e:	e000      	b.n	8005632 <dir_register+0xda>
 8005630:	2301      	movs	r3, #1
 8005632:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005634:	6a39      	ldr	r1, [r7, #32]
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7ff fcbf 	bl	8004fba <dir_alloc>
 800563c:	4603      	mov	r3, r0
 800563e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005642:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005646:	2b00      	cmp	r3, #0
 8005648:	d148      	bne.n	80056dc <dir_register+0x184>
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	3b01      	subs	r3, #1
 800564e:	623b      	str	r3, [r7, #32]
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d042      	beq.n	80056dc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	695a      	ldr	r2, [r3, #20]
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	015b      	lsls	r3, r3, #5
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	4619      	mov	r1, r3
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7ff fb4a 	bl	8004cfc <dir_sdi>
 8005668:	4603      	mov	r3, r0
 800566a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800566e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005672:	2b00      	cmp	r3, #0
 8005674:	d132      	bne.n	80056dc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3324      	adds	r3, #36	; 0x24
 800567a:	4618      	mov	r0, r3
 800567c:	f7ff fe8a 	bl	8005394 <sum_sfn>
 8005680:	4603      	mov	r3, r0
 8005682:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	4619      	mov	r1, r3
 800568a:	69f8      	ldr	r0, [r7, #28]
 800568c:	f7fe ff54 	bl	8004538 <move_window>
 8005690:	4603      	mov	r3, r0
 8005692:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8005696:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800569a:	2b00      	cmp	r3, #0
 800569c:	d11d      	bne.n	80056da <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	6918      	ldr	r0, [r3, #16]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a19      	ldr	r1, [r3, #32]
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	7efb      	ldrb	r3, [r7, #27]
 80056ac:	f7ff fd7c 	bl	80051a8 <put_lfn>
				fs->wflag = 1;
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	2201      	movs	r2, #1
 80056b4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80056b6:	2100      	movs	r1, #0
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff fba8 	bl	8004e0e <dir_next>
 80056be:	4603      	mov	r3, r0
 80056c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80056c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d107      	bne.n	80056dc <dir_register+0x184>
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	623b      	str	r3, [r7, #32]
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1d5      	bne.n	8005684 <dir_register+0x12c>
 80056d8:	e000      	b.n	80056dc <dir_register+0x184>
				if (res != FR_OK) break;
 80056da:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80056dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d128      	bne.n	8005736 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	4619      	mov	r1, r3
 80056ea:	69f8      	ldr	r0, [r7, #28]
 80056ec:	f7fe ff24 	bl	8004538 <move_window>
 80056f0:	4603      	mov	r3, r0
 80056f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80056f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d11b      	bne.n	8005736 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	2220      	movs	r2, #32
 8005704:	2100      	movs	r1, #0
 8005706:	4618      	mov	r0, r3
 8005708:	f7fe fd09 	bl	800411e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a18      	ldr	r0, [r3, #32]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3324      	adds	r3, #36	; 0x24
 8005714:	220b      	movs	r2, #11
 8005716:	4619      	mov	r1, r3
 8005718:	f7fe fce0 	bl	80040dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	330c      	adds	r3, #12
 8005728:	f002 0218 	and.w	r2, r2, #24
 800572c:	b2d2      	uxtb	r2, r2
 800572e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	2201      	movs	r2, #1
 8005734:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005736:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800573a:	4618      	mov	r0, r3
 800573c:	3730      	adds	r7, #48	; 0x30
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	4ec4ec4f 	.word	0x4ec4ec4f

08005748 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b08a      	sub	sp, #40	; 0x28
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	613b      	str	r3, [r7, #16]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	2300      	movs	r3, #0
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	61ba      	str	r2, [r7, #24]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4413      	add	r3, r2
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8005776:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005778:	2b1f      	cmp	r3, #31
 800577a:	d940      	bls.n	80057fe <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800577c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800577e:	2b2f      	cmp	r3, #47	; 0x2f
 8005780:	d006      	beq.n	8005790 <create_name+0x48>
 8005782:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005784:	2b5c      	cmp	r3, #92	; 0x5c
 8005786:	d110      	bne.n	80057aa <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005788:	e002      	b.n	8005790 <create_name+0x48>
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	3301      	adds	r3, #1
 800578e:	61bb      	str	r3, [r7, #24]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	4413      	add	r3, r2
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b2f      	cmp	r3, #47	; 0x2f
 800579a:	d0f6      	beq.n	800578a <create_name+0x42>
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	4413      	add	r3, r2
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b5c      	cmp	r3, #92	; 0x5c
 80057a6:	d0f0      	beq.n	800578a <create_name+0x42>
			break;
 80057a8:	e02a      	b.n	8005800 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2bfe      	cmp	r3, #254	; 0xfe
 80057ae:	d901      	bls.n	80057b4 <create_name+0x6c>
 80057b0:	2306      	movs	r3, #6
 80057b2:	e17d      	b.n	8005ab0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80057b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80057ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057bc:	2101      	movs	r1, #1
 80057be:	4618      	mov	r0, r3
 80057c0:	f001 faa8 	bl	8006d14 <ff_convert>
 80057c4:	4603      	mov	r3, r0
 80057c6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80057c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <create_name+0x8a>
 80057ce:	2306      	movs	r3, #6
 80057d0:	e16e      	b.n	8005ab0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80057d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057d4:	2b7f      	cmp	r3, #127	; 0x7f
 80057d6:	d809      	bhi.n	80057ec <create_name+0xa4>
 80057d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057da:	4619      	mov	r1, r3
 80057dc:	488d      	ldr	r0, [pc, #564]	; (8005a14 <create_name+0x2cc>)
 80057de:	f7fe fce0 	bl	80041a2 <chk_chr>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <create_name+0xa4>
 80057e8:	2306      	movs	r3, #6
 80057ea:	e161      	b.n	8005ab0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	617a      	str	r2, [r7, #20]
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4413      	add	r3, r2
 80057f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057fa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80057fc:	e7b4      	b.n	8005768 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80057fe:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	441a      	add	r2, r3
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800580a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800580c:	2b1f      	cmp	r3, #31
 800580e:	d801      	bhi.n	8005814 <create_name+0xcc>
 8005810:	2304      	movs	r3, #4
 8005812:	e000      	b.n	8005816 <create_name+0xce>
 8005814:	2300      	movs	r3, #0
 8005816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800581a:	e011      	b.n	8005840 <create_name+0xf8>
		w = lfn[di - 1];
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005822:	3b01      	subs	r3, #1
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4413      	add	r3, r2
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800582e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005830:	2b20      	cmp	r3, #32
 8005832:	d002      	beq.n	800583a <create_name+0xf2>
 8005834:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005836:	2b2e      	cmp	r3, #46	; 0x2e
 8005838:	d106      	bne.n	8005848 <create_name+0x100>
		di--;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	3b01      	subs	r3, #1
 800583e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1ea      	bne.n	800581c <create_name+0xd4>
 8005846:	e000      	b.n	800584a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005848:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4413      	add	r3, r2
 8005852:	2200      	movs	r2, #0
 8005854:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <create_name+0x118>
 800585c:	2306      	movs	r3, #6
 800585e:	e127      	b.n	8005ab0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3324      	adds	r3, #36	; 0x24
 8005864:	220b      	movs	r2, #11
 8005866:	2120      	movs	r1, #32
 8005868:	4618      	mov	r0, r3
 800586a:	f7fe fc58 	bl	800411e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800586e:	2300      	movs	r3, #0
 8005870:	61bb      	str	r3, [r7, #24]
 8005872:	e002      	b.n	800587a <create_name+0x132>
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	3301      	adds	r3, #1
 8005878:	61bb      	str	r3, [r7, #24]
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4413      	add	r3, r2
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	2b20      	cmp	r3, #32
 8005886:	d0f5      	beq.n	8005874 <create_name+0x12c>
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4413      	add	r3, r2
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	2b2e      	cmp	r3, #46	; 0x2e
 8005894:	d0ee      	beq.n	8005874 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d009      	beq.n	80058b0 <create_name+0x168>
 800589c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058a0:	f043 0303 	orr.w	r3, r3, #3
 80058a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80058a8:	e002      	b.n	80058b0 <create_name+0x168>
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d009      	beq.n	80058ca <create_name+0x182>
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80058bc:	3b01      	subs	r3, #1
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4413      	add	r3, r2
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	2b2e      	cmp	r3, #46	; 0x2e
 80058c8:	d1ef      	bne.n	80058aa <create_name+0x162>

	i = b = 0; ni = 8;
 80058ca:	2300      	movs	r3, #0
 80058cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80058d0:	2300      	movs	r3, #0
 80058d2:	623b      	str	r3, [r7, #32]
 80058d4:	2308      	movs	r3, #8
 80058d6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	61ba      	str	r2, [r7, #24]
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	4413      	add	r3, r2
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80058e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 8090 	beq.w	8005a10 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80058f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	d006      	beq.n	8005904 <create_name+0x1bc>
 80058f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058f8:	2b2e      	cmp	r3, #46	; 0x2e
 80058fa:	d10a      	bne.n	8005912 <create_name+0x1ca>
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	429a      	cmp	r2, r3
 8005902:	d006      	beq.n	8005912 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8005904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005908:	f043 0303 	orr.w	r3, r3, #3
 800590c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005910:	e07d      	b.n	8005a0e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005912:	6a3a      	ldr	r2, [r7, #32]
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	429a      	cmp	r2, r3
 8005918:	d203      	bcs.n	8005922 <create_name+0x1da>
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	429a      	cmp	r2, r3
 8005920:	d123      	bne.n	800596a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	2b0b      	cmp	r3, #11
 8005926:	d106      	bne.n	8005936 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800592c:	f043 0303 	orr.w	r3, r3, #3
 8005930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005934:	e075      	b.n	8005a22 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	429a      	cmp	r2, r3
 800593c:	d005      	beq.n	800594a <create_name+0x202>
 800593e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005942:	f043 0303 	orr.w	r3, r3, #3
 8005946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	429a      	cmp	r2, r3
 8005950:	d866      	bhi.n	8005a20 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	61bb      	str	r3, [r7, #24]
 8005956:	2308      	movs	r3, #8
 8005958:	623b      	str	r3, [r7, #32]
 800595a:	230b      	movs	r3, #11
 800595c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800595e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005968:	e051      	b.n	8005a0e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800596a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800596c:	2b7f      	cmp	r3, #127	; 0x7f
 800596e:	d914      	bls.n	800599a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005970:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005972:	2100      	movs	r1, #0
 8005974:	4618      	mov	r0, r3
 8005976:	f001 f9cd 	bl	8006d14 <ff_convert>
 800597a:	4603      	mov	r3, r0
 800597c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800597e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005980:	2b00      	cmp	r3, #0
 8005982:	d004      	beq.n	800598e <create_name+0x246>
 8005984:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005986:	3b80      	subs	r3, #128	; 0x80
 8005988:	4a23      	ldr	r2, [pc, #140]	; (8005a18 <create_name+0x2d0>)
 800598a:	5cd3      	ldrb	r3, [r2, r3]
 800598c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800598e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005992:	f043 0302 	orr.w	r3, r3, #2
 8005996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800599a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800599c:	2b00      	cmp	r3, #0
 800599e:	d007      	beq.n	80059b0 <create_name+0x268>
 80059a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059a2:	4619      	mov	r1, r3
 80059a4:	481d      	ldr	r0, [pc, #116]	; (8005a1c <create_name+0x2d4>)
 80059a6:	f7fe fbfc 	bl	80041a2 <chk_chr>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80059b0:	235f      	movs	r3, #95	; 0x5f
 80059b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80059b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059b8:	f043 0303 	orr.w	r3, r3, #3
 80059bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80059c0:	e01b      	b.n	80059fa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80059c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059c4:	2b40      	cmp	r3, #64	; 0x40
 80059c6:	d909      	bls.n	80059dc <create_name+0x294>
 80059c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059ca:	2b5a      	cmp	r3, #90	; 0x5a
 80059cc:	d806      	bhi.n	80059dc <create_name+0x294>
					b |= 2;
 80059ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80059d2:	f043 0302 	orr.w	r3, r3, #2
 80059d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80059da:	e00e      	b.n	80059fa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80059dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059de:	2b60      	cmp	r3, #96	; 0x60
 80059e0:	d90b      	bls.n	80059fa <create_name+0x2b2>
 80059e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059e4:	2b7a      	cmp	r3, #122	; 0x7a
 80059e6:	d808      	bhi.n	80059fa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80059e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80059ec:	f043 0301 	orr.w	r3, r3, #1
 80059f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80059f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059f6:	3b20      	subs	r3, #32
 80059f8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	623a      	str	r2, [r7, #32]
 8005a00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a02:	b2d1      	uxtb	r1, r2
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	4413      	add	r3, r2
 8005a08:	460a      	mov	r2, r1
 8005a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005a0e:	e763      	b.n	80058d8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005a10:	bf00      	nop
 8005a12:	e006      	b.n	8005a22 <create_name+0x2da>
 8005a14:	08006f2c 	.word	0x08006f2c
 8005a18:	08006f8c 	.word	0x08006f8c
 8005a1c:	08006f38 	.word	0x08006f38
			if (si > di) break;			/* No extension */
 8005a20:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a28:	2be5      	cmp	r3, #229	; 0xe5
 8005a2a:	d103      	bne.n	8005a34 <create_name+0x2ec>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2205      	movs	r2, #5
 8005a30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	2b08      	cmp	r3, #8
 8005a38:	d104      	bne.n	8005a44 <create_name+0x2fc>
 8005a3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005a44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a48:	f003 030c 	and.w	r3, r3, #12
 8005a4c:	2b0c      	cmp	r3, #12
 8005a4e:	d005      	beq.n	8005a5c <create_name+0x314>
 8005a50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a54:	f003 0303 	and.w	r3, r3, #3
 8005a58:	2b03      	cmp	r3, #3
 8005a5a:	d105      	bne.n	8005a68 <create_name+0x320>
 8005a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a60:	f043 0302 	orr.w	r3, r3, #2
 8005a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d117      	bne.n	8005aa4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005a74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a78:	f003 0303 	and.w	r3, r3, #3
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d105      	bne.n	8005a8c <create_name+0x344>
 8005a80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a84:	f043 0310 	orr.w	r3, r3, #16
 8005a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005a8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a90:	f003 030c 	and.w	r3, r3, #12
 8005a94:	2b04      	cmp	r3, #4
 8005a96:	d105      	bne.n	8005aa4 <create_name+0x35c>
 8005a98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a9c:	f043 0308 	orr.w	r3, r3, #8
 8005aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005aaa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8005aae:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3728      	adds	r7, #40	; 0x28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005acc:	e002      	b.n	8005ad4 <follow_path+0x1c>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	603b      	str	r3, [r7, #0]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b2f      	cmp	r3, #47	; 0x2f
 8005ada:	d0f8      	beq.n	8005ace <follow_path+0x16>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	2b5c      	cmp	r3, #92	; 0x5c
 8005ae2:	d0f4      	beq.n	8005ace <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	2b1f      	cmp	r3, #31
 8005af0:	d80a      	bhi.n	8005b08 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2280      	movs	r2, #128	; 0x80
 8005af6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005afa:	2100      	movs	r1, #0
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff f8fd 	bl	8004cfc <dir_sdi>
 8005b02:	4603      	mov	r3, r0
 8005b04:	75fb      	strb	r3, [r7, #23]
 8005b06:	e048      	b.n	8005b9a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005b08:	463b      	mov	r3, r7
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff fe1b 	bl	8005748 <create_name>
 8005b12:	4603      	mov	r3, r0
 8005b14:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005b16:	7dfb      	ldrb	r3, [r7, #23]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d139      	bne.n	8005b90 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff fc5a 	bl	80053d6 <dir_find>
 8005b22:	4603      	mov	r3, r0
 8005b24:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005b2c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005b2e:	7dfb      	ldrb	r3, [r7, #23]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00a      	beq.n	8005b4a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005b34:	7dfb      	ldrb	r3, [r7, #23]
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d12c      	bne.n	8005b94 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005b3a:	7afb      	ldrb	r3, [r7, #11]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d127      	bne.n	8005b94 <follow_path+0xdc>
 8005b44:	2305      	movs	r3, #5
 8005b46:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005b48:	e024      	b.n	8005b94 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005b4a:	7afb      	ldrb	r3, [r7, #11]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d121      	bne.n	8005b98 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	799b      	ldrb	r3, [r3, #6]
 8005b58:	f003 0310 	and.w	r3, r3, #16
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d102      	bne.n	8005b66 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005b60:	2305      	movs	r3, #5
 8005b62:	75fb      	strb	r3, [r7, #23]
 8005b64:	e019      	b.n	8005b9a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	8992      	ldrh	r2, [r2, #12]
 8005b74:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b78:	fb00 f202 	mul.w	r2, r0, r2
 8005b7c:	1a9b      	subs	r3, r3, r2
 8005b7e:	440b      	add	r3, r1
 8005b80:	4619      	mov	r1, r3
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f7ff fa60 	bl	8005048 <ld_clust>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005b8e:	e7bb      	b.n	8005b08 <follow_path+0x50>
			if (res != FR_OK) break;
 8005b90:	bf00      	nop
 8005b92:	e002      	b.n	8005b9a <follow_path+0xe2>
				break;
 8005b94:	bf00      	nop
 8005b96:	e000      	b.n	8005b9a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005b98:	bf00      	nop
			}
		}
	}

	return res;
 8005b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005bac:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d031      	beq.n	8005c1e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	e002      	b.n	8005bc8 <get_ldnumber+0x24>
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b1f      	cmp	r3, #31
 8005bce:	d903      	bls.n	8005bd8 <get_ldnumber+0x34>
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b3a      	cmp	r3, #58	; 0x3a
 8005bd6:	d1f4      	bne.n	8005bc2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	2b3a      	cmp	r3, #58	; 0x3a
 8005bde:	d11c      	bne.n	8005c1a <get_ldnumber+0x76>
			tp = *path;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	1c5a      	adds	r2, r3, #1
 8005bea:	60fa      	str	r2, [r7, #12]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	3b30      	subs	r3, #48	; 0x30
 8005bf0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2b09      	cmp	r3, #9
 8005bf6:	d80e      	bhi.n	8005c16 <get_ldnumber+0x72>
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d10a      	bne.n	8005c16 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d107      	bne.n	8005c16 <get_ldnumber+0x72>
					vol = (int)i;
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	e002      	b.n	8005c20 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005c1e:	693b      	ldr	r3, [r7, #16]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	371c      	adds	r7, #28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	70da      	strb	r2, [r3, #3]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c42:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7fe fc76 	bl	8004538 <move_window>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <check_fs+0x2a>
 8005c52:	2304      	movs	r3, #4
 8005c54:	e038      	b.n	8005cc8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3338      	adds	r3, #56	; 0x38
 8005c5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fe f9ba 	bl	8003fd8 <ld_word>
 8005c64:	4603      	mov	r3, r0
 8005c66:	461a      	mov	r2, r3
 8005c68:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d001      	beq.n	8005c74 <check_fs+0x48>
 8005c70:	2303      	movs	r3, #3
 8005c72:	e029      	b.n	8005cc8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c7a:	2be9      	cmp	r3, #233	; 0xe9
 8005c7c:	d009      	beq.n	8005c92 <check_fs+0x66>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c84:	2beb      	cmp	r3, #235	; 0xeb
 8005c86:	d11e      	bne.n	8005cc6 <check_fs+0x9a>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c8e:	2b90      	cmp	r3, #144	; 0x90
 8005c90:	d119      	bne.n	8005cc6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3338      	adds	r3, #56	; 0x38
 8005c96:	3336      	adds	r3, #54	; 0x36
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fe f9b5 	bl	8004008 <ld_dword>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ca4:	4a0a      	ldr	r2, [pc, #40]	; (8005cd0 <check_fs+0xa4>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d101      	bne.n	8005cae <check_fs+0x82>
 8005caa:	2300      	movs	r3, #0
 8005cac:	e00c      	b.n	8005cc8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	3338      	adds	r3, #56	; 0x38
 8005cb2:	3352      	adds	r3, #82	; 0x52
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fe f9a7 	bl	8004008 <ld_dword>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	4a05      	ldr	r2, [pc, #20]	; (8005cd4 <check_fs+0xa8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d101      	bne.n	8005cc6 <check_fs+0x9a>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e000      	b.n	8005cc8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005cc6:	2302      	movs	r3, #2
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	00544146 	.word	0x00544146
 8005cd4:	33544146 	.word	0x33544146

08005cd8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b096      	sub	sp, #88	; 0x58
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f7ff ff59 	bl	8005ba4 <get_ldnumber>
 8005cf2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	da01      	bge.n	8005cfe <find_volume+0x26>
 8005cfa:	230b      	movs	r3, #11
 8005cfc:	e265      	b.n	80061ca <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005cfe:	4a9f      	ldr	r2, [pc, #636]	; (8005f7c <find_volume+0x2a4>)
 8005d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d06:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <find_volume+0x3a>
 8005d0e:	230c      	movs	r3, #12
 8005d10:	e25b      	b.n	80061ca <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d16:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005d18:	79fb      	ldrb	r3, [r7, #7]
 8005d1a:	f023 0301 	bic.w	r3, r3, #1
 8005d1e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d01a      	beq.n	8005d5e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2a:	785b      	ldrb	r3, [r3, #1]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fe f8b5 	bl	8003e9c <disk_status>
 8005d32:	4603      	mov	r3, r0
 8005d34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005d38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10c      	bne.n	8005d5e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005d44:	79fb      	ldrb	r3, [r7, #7]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d007      	beq.n	8005d5a <find_volume+0x82>
 8005d4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005d56:	230a      	movs	r3, #10
 8005d58:	e237      	b.n	80061ca <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e235      	b.n	80061ca <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d60:	2200      	movs	r2, #0
 8005d62:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6e:	785b      	ldrb	r3, [r3, #1]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7fe f8ad 	bl	8003ed0 <disk_initialize>
 8005d76:	4603      	mov	r3, r0
 8005d78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005d7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e21e      	b.n	80061ca <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005d8c:	79fb      	ldrb	r3, [r7, #7]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d007      	beq.n	8005da2 <find_volume+0xca>
 8005d92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d96:	f003 0304 	and.w	r3, r3, #4
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005d9e:	230a      	movs	r3, #10
 8005da0:	e213      	b.n	80061ca <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da4:	7858      	ldrb	r0, [r3, #1]
 8005da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da8:	330c      	adds	r3, #12
 8005daa:	461a      	mov	r2, r3
 8005dac:	2102      	movs	r1, #2
 8005dae:	f7fe f8f5 	bl	8003f9c <disk_ioctl>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <find_volume+0xe4>
 8005db8:	2301      	movs	r3, #1
 8005dba:	e206      	b.n	80061ca <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbe:	899b      	ldrh	r3, [r3, #12]
 8005dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc4:	d80d      	bhi.n	8005de2 <find_volume+0x10a>
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc8:	899b      	ldrh	r3, [r3, #12]
 8005dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dce:	d308      	bcc.n	8005de2 <find_volume+0x10a>
 8005dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd2:	899b      	ldrh	r3, [r3, #12]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd8:	899b      	ldrh	r3, [r3, #12]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	4013      	ands	r3, r2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <find_volume+0x10e>
 8005de2:	2301      	movs	r3, #1
 8005de4:	e1f1      	b.n	80061ca <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005de6:	2300      	movs	r3, #0
 8005de8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005dea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005dec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005dee:	f7ff ff1d 	bl	8005c2c <check_fs>
 8005df2:	4603      	mov	r3, r0
 8005df4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005df8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d149      	bne.n	8005e94 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005e00:	2300      	movs	r3, #0
 8005e02:	643b      	str	r3, [r7, #64]	; 0x40
 8005e04:	e01e      	b.n	8005e44 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e08:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005e14:	4413      	add	r3, r2
 8005e16:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d006      	beq.n	8005e30 <find_volume+0x158>
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	3308      	adds	r3, #8
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fe f8ee 	bl	8004008 <ld_dword>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	e000      	b.n	8005e32 <find_volume+0x15a>
 8005e30:	2200      	movs	r2, #0
 8005e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	3358      	adds	r3, #88	; 0x58
 8005e38:	443b      	add	r3, r7
 8005e3a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e40:	3301      	adds	r3, #1
 8005e42:	643b      	str	r3, [r7, #64]	; 0x40
 8005e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	d9dd      	bls.n	8005e06 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <find_volume+0x182>
 8005e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e56:	3b01      	subs	r3, #1
 8005e58:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	3358      	adds	r3, #88	; 0x58
 8005e60:	443b      	add	r3, r7
 8005e62:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005e66:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <find_volume+0x1a2>
 8005e6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e72:	f7ff fedb 	bl	8005c2c <check_fs>
 8005e76:	4603      	mov	r3, r0
 8005e78:	e000      	b.n	8005e7c <find_volume+0x1a4>
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005e80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d905      	bls.n	8005e94 <find_volume+0x1bc>
 8005e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e90:	2b03      	cmp	r3, #3
 8005e92:	d9e2      	bls.n	8005e5a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005e94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	d101      	bne.n	8005ea0 <find_volume+0x1c8>
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e194      	b.n	80061ca <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005ea0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d901      	bls.n	8005eac <find_volume+0x1d4>
 8005ea8:	230d      	movs	r3, #13
 8005eaa:	e18e      	b.n	80061ca <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eae:	3338      	adds	r3, #56	; 0x38
 8005eb0:	330b      	adds	r3, #11
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fe f890 	bl	8003fd8 <ld_word>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	461a      	mov	r2, r3
 8005ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebe:	899b      	ldrh	r3, [r3, #12]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d001      	beq.n	8005ec8 <find_volume+0x1f0>
 8005ec4:	230d      	movs	r3, #13
 8005ec6:	e180      	b.n	80061ca <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eca:	3338      	adds	r3, #56	; 0x38
 8005ecc:	3316      	adds	r3, #22
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fe f882 	bl	8003fd8 <ld_word>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <find_volume+0x214>
 8005ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee0:	3338      	adds	r3, #56	; 0x38
 8005ee2:	3324      	adds	r3, #36	; 0x24
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fe f88f 	bl	8004008 <ld_dword>
 8005eea:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ef0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efe:	789b      	ldrb	r3, [r3, #2]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d005      	beq.n	8005f10 <find_volume+0x238>
 8005f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f06:	789b      	ldrb	r3, [r3, #2]
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d001      	beq.n	8005f10 <find_volume+0x238>
 8005f0c:	230d      	movs	r3, #13
 8005f0e:	e15c      	b.n	80061ca <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f12:	789b      	ldrb	r3, [r3, #2]
 8005f14:	461a      	mov	r2, r3
 8005f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f18:	fb02 f303 	mul.w	r3, r2, r3
 8005f1c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f28:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2c:	895b      	ldrh	r3, [r3, #10]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d008      	beq.n	8005f44 <find_volume+0x26c>
 8005f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f34:	895b      	ldrh	r3, [r3, #10]
 8005f36:	461a      	mov	r2, r3
 8005f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3a:	895b      	ldrh	r3, [r3, #10]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	4013      	ands	r3, r2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <find_volume+0x270>
 8005f44:	230d      	movs	r3, #13
 8005f46:	e140      	b.n	80061ca <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4a:	3338      	adds	r3, #56	; 0x38
 8005f4c:	3311      	adds	r3, #17
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fe f842 	bl	8003fd8 <ld_word>
 8005f54:	4603      	mov	r3, r0
 8005f56:	461a      	mov	r2, r3
 8005f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5e:	891b      	ldrh	r3, [r3, #8]
 8005f60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f62:	8992      	ldrh	r2, [r2, #12]
 8005f64:	0952      	lsrs	r2, r2, #5
 8005f66:	b292      	uxth	r2, r2
 8005f68:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f6c:	fb01 f202 	mul.w	r2, r1, r2
 8005f70:	1a9b      	subs	r3, r3, r2
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d003      	beq.n	8005f80 <find_volume+0x2a8>
 8005f78:	230d      	movs	r3, #13
 8005f7a:	e126      	b.n	80061ca <find_volume+0x4f2>
 8005f7c:	20002164 	.word	0x20002164

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f82:	3338      	adds	r3, #56	; 0x38
 8005f84:	3313      	adds	r3, #19
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fe f826 	bl	8003fd8 <ld_word>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <find_volume+0x2cc>
 8005f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f98:	3338      	adds	r3, #56	; 0x38
 8005f9a:	3320      	adds	r3, #32
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7fe f833 	bl	8004008 <ld_dword>
 8005fa2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa6:	3338      	adds	r3, #56	; 0x38
 8005fa8:	330e      	adds	r3, #14
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fe f814 	bl	8003fd8 <ld_word>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005fb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <find_volume+0x2e6>
 8005fba:	230d      	movs	r3, #13
 8005fbc:	e105      	b.n	80061ca <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005fbe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc2:	4413      	add	r3, r2
 8005fc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fc6:	8911      	ldrh	r1, [r2, #8]
 8005fc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fca:	8992      	ldrh	r2, [r2, #12]
 8005fcc:	0952      	lsrs	r2, r2, #5
 8005fce:	b292      	uxth	r2, r2
 8005fd0:	fbb1 f2f2 	udiv	r2, r1, r2
 8005fd4:	b292      	uxth	r2, r2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005fda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d201      	bcs.n	8005fe6 <find_volume+0x30e>
 8005fe2:	230d      	movs	r3, #13
 8005fe4:	e0f1      	b.n	80061ca <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005fe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fee:	8952      	ldrh	r2, [r2, #10]
 8005ff0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <find_volume+0x328>
 8005ffc:	230d      	movs	r3, #13
 8005ffe:	e0e4      	b.n	80061ca <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006000:	2303      	movs	r3, #3
 8006002:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800600c:	4293      	cmp	r3, r2
 800600e:	d802      	bhi.n	8006016 <find_volume+0x33e>
 8006010:	2302      	movs	r3, #2
 8006012:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	f640 72f5 	movw	r2, #4085	; 0xff5
 800601c:	4293      	cmp	r3, r2
 800601e:	d802      	bhi.n	8006026 <find_volume+0x34e>
 8006020:	2301      	movs	r3, #1
 8006022:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	1c9a      	adds	r2, r3, #2
 800602a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800602e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006030:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006032:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006034:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006038:	441a      	add	r2, r3
 800603a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800603e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006042:	441a      	add	r2, r3
 8006044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006046:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8006048:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800604c:	2b03      	cmp	r3, #3
 800604e:	d11e      	bne.n	800608e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006052:	3338      	adds	r3, #56	; 0x38
 8006054:	332a      	adds	r3, #42	; 0x2a
 8006056:	4618      	mov	r0, r3
 8006058:	f7fd ffbe 	bl	8003fd8 <ld_word>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <find_volume+0x38e>
 8006062:	230d      	movs	r3, #13
 8006064:	e0b1      	b.n	80061ca <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006068:	891b      	ldrh	r3, [r3, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <find_volume+0x39a>
 800606e:	230d      	movs	r3, #13
 8006070:	e0ab      	b.n	80061ca <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006074:	3338      	adds	r3, #56	; 0x38
 8006076:	332c      	adds	r3, #44	; 0x2c
 8006078:	4618      	mov	r0, r3
 800607a:	f7fd ffc5 	bl	8004008 <ld_dword>
 800607e:	4602      	mov	r2, r0
 8006080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006082:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	647b      	str	r3, [r7, #68]	; 0x44
 800608c:	e01f      	b.n	80060ce <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800608e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006090:	891b      	ldrh	r3, [r3, #8]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <find_volume+0x3c2>
 8006096:	230d      	movs	r3, #13
 8006098:	e097      	b.n	80061ca <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800609e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060a0:	441a      	add	r2, r3
 80060a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80060a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d103      	bne.n	80060b6 <find_volume+0x3de>
 80060ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	e00a      	b.n	80060cc <find_volume+0x3f4>
 80060b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b8:	69da      	ldr	r2, [r3, #28]
 80060ba:	4613      	mov	r3, r2
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	4413      	add	r3, r2
 80060c0:	085a      	lsrs	r2, r3, #1
 80060c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80060cc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80060ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d0:	6a1a      	ldr	r2, [r3, #32]
 80060d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d4:	899b      	ldrh	r3, [r3, #12]
 80060d6:	4619      	mov	r1, r3
 80060d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060da:	440b      	add	r3, r1
 80060dc:	3b01      	subs	r3, #1
 80060de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060e0:	8989      	ldrh	r1, [r1, #12]
 80060e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d201      	bcs.n	80060ee <find_volume+0x416>
 80060ea:	230d      	movs	r3, #13
 80060ec:	e06d      	b.n	80061ca <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80060ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f0:	f04f 32ff 	mov.w	r2, #4294967295
 80060f4:	619a      	str	r2, [r3, #24]
 80060f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f8:	699a      	ldr	r2, [r3, #24]
 80060fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80060fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006100:	2280      	movs	r2, #128	; 0x80
 8006102:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006104:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006108:	2b03      	cmp	r3, #3
 800610a:	d149      	bne.n	80061a0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610e:	3338      	adds	r3, #56	; 0x38
 8006110:	3330      	adds	r3, #48	; 0x30
 8006112:	4618      	mov	r0, r3
 8006114:	f7fd ff60 	bl	8003fd8 <ld_word>
 8006118:	4603      	mov	r3, r0
 800611a:	2b01      	cmp	r3, #1
 800611c:	d140      	bne.n	80061a0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800611e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006120:	3301      	adds	r3, #1
 8006122:	4619      	mov	r1, r3
 8006124:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006126:	f7fe fa07 	bl	8004538 <move_window>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d137      	bne.n	80061a0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006132:	2200      	movs	r2, #0
 8006134:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006138:	3338      	adds	r3, #56	; 0x38
 800613a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800613e:	4618      	mov	r0, r3
 8006140:	f7fd ff4a 	bl	8003fd8 <ld_word>
 8006144:	4603      	mov	r3, r0
 8006146:	461a      	mov	r2, r3
 8006148:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800614c:	429a      	cmp	r2, r3
 800614e:	d127      	bne.n	80061a0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006152:	3338      	adds	r3, #56	; 0x38
 8006154:	4618      	mov	r0, r3
 8006156:	f7fd ff57 	bl	8004008 <ld_dword>
 800615a:	4603      	mov	r3, r0
 800615c:	4a1d      	ldr	r2, [pc, #116]	; (80061d4 <find_volume+0x4fc>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d11e      	bne.n	80061a0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006164:	3338      	adds	r3, #56	; 0x38
 8006166:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800616a:	4618      	mov	r0, r3
 800616c:	f7fd ff4c 	bl	8004008 <ld_dword>
 8006170:	4603      	mov	r3, r0
 8006172:	4a19      	ldr	r2, [pc, #100]	; (80061d8 <find_volume+0x500>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d113      	bne.n	80061a0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	3338      	adds	r3, #56	; 0x38
 800617c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006180:	4618      	mov	r0, r3
 8006182:	f7fd ff41 	bl	8004008 <ld_dword>
 8006186:	4602      	mov	r2, r0
 8006188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800618c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618e:	3338      	adds	r3, #56	; 0x38
 8006190:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006194:	4618      	mov	r0, r3
 8006196:	f7fd ff37 	bl	8004008 <ld_dword>
 800619a:	4602      	mov	r2, r0
 800619c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80061a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80061a6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80061a8:	4b0c      	ldr	r3, [pc, #48]	; (80061dc <find_volume+0x504>)
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	3301      	adds	r3, #1
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	4b0a      	ldr	r3, [pc, #40]	; (80061dc <find_volume+0x504>)
 80061b2:	801a      	strh	r2, [r3, #0]
 80061b4:	4b09      	ldr	r3, [pc, #36]	; (80061dc <find_volume+0x504>)
 80061b6:	881a      	ldrh	r2, [r3, #0]
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80061bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061be:	4a08      	ldr	r2, [pc, #32]	; (80061e0 <find_volume+0x508>)
 80061c0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80061c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80061c4:	f7fe f950 	bl	8004468 <clear_lock>
#endif
	return FR_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3758      	adds	r7, #88	; 0x58
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	41615252 	.word	0x41615252
 80061d8:	61417272 	.word	0x61417272
 80061dc:	20002168 	.word	0x20002168
 80061e0:	2000218c 	.word	0x2000218c

080061e4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80061ee:	2309      	movs	r3, #9
 80061f0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d01c      	beq.n	8006232 <validate+0x4e>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d018      	beq.n	8006232 <validate+0x4e>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d013      	beq.n	8006232 <validate+0x4e>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	889a      	ldrh	r2, [r3, #4]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	88db      	ldrh	r3, [r3, #6]
 8006214:	429a      	cmp	r2, r3
 8006216:	d10c      	bne.n	8006232 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	785b      	ldrb	r3, [r3, #1]
 800621e:	4618      	mov	r0, r3
 8006220:	f7fd fe3c 	bl	8003e9c <disk_status>
 8006224:	4603      	mov	r3, r0
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <validate+0x4e>
			res = FR_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006232:	7bfb      	ldrb	r3, [r7, #15]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d102      	bne.n	800623e <validate+0x5a>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	e000      	b.n	8006240 <validate+0x5c>
 800623e:	2300      	movs	r3, #0
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	6013      	str	r3, [r2, #0]
	return res;
 8006244:	7bfb      	ldrb	r3, [r7, #15]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b088      	sub	sp, #32
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	4613      	mov	r3, r2
 800625c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006262:	f107 0310 	add.w	r3, r7, #16
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff fc9c 	bl	8005ba4 <get_ldnumber>
 800626c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	2b00      	cmp	r3, #0
 8006272:	da01      	bge.n	8006278 <f_mount+0x28>
 8006274:	230b      	movs	r3, #11
 8006276:	e02b      	b.n	80062d0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006278:	4a17      	ldr	r2, [pc, #92]	; (80062d8 <f_mount+0x88>)
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006280:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d005      	beq.n	8006294 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006288:	69b8      	ldr	r0, [r7, #24]
 800628a:	f7fe f8ed 	bl	8004468 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	2200      	movs	r2, #0
 8006292:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	490d      	ldr	r1, [pc, #52]	; (80062d8 <f_mount+0x88>)
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <f_mount+0x66>
 80062b0:	79fb      	ldrb	r3, [r7, #7]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d001      	beq.n	80062ba <f_mount+0x6a>
 80062b6:	2300      	movs	r3, #0
 80062b8:	e00a      	b.n	80062d0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80062ba:	f107 010c 	add.w	r1, r7, #12
 80062be:	f107 0308 	add.w	r3, r7, #8
 80062c2:	2200      	movs	r2, #0
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7ff fd07 	bl	8005cd8 <find_volume>
 80062ca:	4603      	mov	r3, r0
 80062cc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80062ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3720      	adds	r7, #32
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	20002164 	.word	0x20002164

080062dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b09a      	sub	sp, #104	; 0x68
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	4613      	mov	r3, r2
 80062e8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <f_open+0x18>
 80062f0:	2309      	movs	r3, #9
 80062f2:	e1bb      	b.n	800666c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80062f4:	79fb      	ldrb	r3, [r7, #7]
 80062f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062fa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80062fc:	79fa      	ldrb	r2, [r7, #7]
 80062fe:	f107 0114 	add.w	r1, r7, #20
 8006302:	f107 0308 	add.w	r3, r7, #8
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff fce6 	bl	8005cd8 <find_volume>
 800630c:	4603      	mov	r3, r0
 800630e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8006312:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006316:	2b00      	cmp	r3, #0
 8006318:	f040 819f 	bne.w	800665a <f_open+0x37e>
		dj.obj.fs = fs;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	f107 0318 	add.w	r3, r7, #24
 8006326:	4611      	mov	r1, r2
 8006328:	4618      	mov	r0, r3
 800632a:	f7ff fbc5 	bl	8005ab8 <follow_path>
 800632e:	4603      	mov	r3, r0
 8006330:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006334:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006338:	2b00      	cmp	r3, #0
 800633a:	d11a      	bne.n	8006372 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800633c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006340:	b25b      	sxtb	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	da03      	bge.n	800634e <f_open+0x72>
				res = FR_INVALID_NAME;
 8006346:	2306      	movs	r3, #6
 8006348:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800634c:	e011      	b.n	8006372 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800634e:	79fb      	ldrb	r3, [r7, #7]
 8006350:	f023 0301 	bic.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	bf14      	ite	ne
 8006358:	2301      	movne	r3, #1
 800635a:	2300      	moveq	r3, #0
 800635c:	b2db      	uxtb	r3, r3
 800635e:	461a      	mov	r2, r3
 8006360:	f107 0318 	add.w	r3, r7, #24
 8006364:	4611      	mov	r1, r2
 8006366:	4618      	mov	r0, r3
 8006368:	f7fd ff36 	bl	80041d8 <chk_lock>
 800636c:	4603      	mov	r3, r0
 800636e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006372:	79fb      	ldrb	r3, [r7, #7]
 8006374:	f003 031c 	and.w	r3, r3, #28
 8006378:	2b00      	cmp	r3, #0
 800637a:	d07f      	beq.n	800647c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800637c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006380:	2b00      	cmp	r3, #0
 8006382:	d017      	beq.n	80063b4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006384:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006388:	2b04      	cmp	r3, #4
 800638a:	d10e      	bne.n	80063aa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800638c:	f7fd ff80 	bl	8004290 <enq_lock>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d006      	beq.n	80063a4 <f_open+0xc8>
 8006396:	f107 0318 	add.w	r3, r7, #24
 800639a:	4618      	mov	r0, r3
 800639c:	f7ff f8dc 	bl	8005558 <dir_register>
 80063a0:	4603      	mov	r3, r0
 80063a2:	e000      	b.n	80063a6 <f_open+0xca>
 80063a4:	2312      	movs	r3, #18
 80063a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80063aa:	79fb      	ldrb	r3, [r7, #7]
 80063ac:	f043 0308 	orr.w	r3, r3, #8
 80063b0:	71fb      	strb	r3, [r7, #7]
 80063b2:	e010      	b.n	80063d6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80063b4:	7fbb      	ldrb	r3, [r7, #30]
 80063b6:	f003 0311 	and.w	r3, r3, #17
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <f_open+0xea>
					res = FR_DENIED;
 80063be:	2307      	movs	r3, #7
 80063c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80063c4:	e007      	b.n	80063d6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <f_open+0xfa>
 80063d0:	2308      	movs	r3, #8
 80063d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80063d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d168      	bne.n	80064b0 <f_open+0x1d4>
 80063de:	79fb      	ldrb	r3, [r7, #7]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d063      	beq.n	80064b0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80063e8:	f7fd fcfa 	bl	8003de0 <get_fattime>
 80063ec:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	330e      	adds	r3, #14
 80063f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7fd fe45 	bl	8004084 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80063fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fc:	3316      	adds	r3, #22
 80063fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006400:	4618      	mov	r0, r3
 8006402:	f7fd fe3f 	bl	8004084 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006408:	330b      	adds	r3, #11
 800640a:	2220      	movs	r2, #32
 800640c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006412:	4611      	mov	r1, r2
 8006414:	4618      	mov	r0, r3
 8006416:	f7fe fe17 	bl	8005048 <ld_clust>
 800641a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006420:	2200      	movs	r2, #0
 8006422:	4618      	mov	r0, r3
 8006424:	f7fe fe2f 	bl	8005086 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642a:	331c      	adds	r3, #28
 800642c:	2100      	movs	r1, #0
 800642e:	4618      	mov	r0, r3
 8006430:	f7fd fe28 	bl	8004084 <st_dword>
					fs->wflag = 1;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	2201      	movs	r2, #1
 8006438:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800643a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800643c:	2b00      	cmp	r3, #0
 800643e:	d037      	beq.n	80064b0 <f_open+0x1d4>
						dw = fs->winsect;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006444:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006446:	f107 0318 	add.w	r3, r7, #24
 800644a:	2200      	movs	r2, #0
 800644c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800644e:	4618      	mov	r0, r3
 8006450:	f7fe fb1f 	bl	8004a92 <remove_chain>
 8006454:	4603      	mov	r3, r0
 8006456:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800645a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800645e:	2b00      	cmp	r3, #0
 8006460:	d126      	bne.n	80064b0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006466:	4618      	mov	r0, r3
 8006468:	f7fe f866 	bl	8004538 <move_window>
 800646c:	4603      	mov	r3, r0
 800646e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006476:	3a01      	subs	r2, #1
 8006478:	615a      	str	r2, [r3, #20]
 800647a:	e019      	b.n	80064b0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800647c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006480:	2b00      	cmp	r3, #0
 8006482:	d115      	bne.n	80064b0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006484:	7fbb      	ldrb	r3, [r7, #30]
 8006486:	f003 0310 	and.w	r3, r3, #16
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <f_open+0x1ba>
					res = FR_NO_FILE;
 800648e:	2304      	movs	r3, #4
 8006490:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006494:	e00c      	b.n	80064b0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006496:	79fb      	ldrb	r3, [r7, #7]
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <f_open+0x1d4>
 80064a0:	7fbb      	ldrb	r3, [r7, #30]
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d002      	beq.n	80064b0 <f_open+0x1d4>
						res = FR_DENIED;
 80064aa:	2307      	movs	r3, #7
 80064ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80064b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d128      	bne.n	800650a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80064b8:	79fb      	ldrb	r3, [r7, #7]
 80064ba:	f003 0308 	and.w	r3, r3, #8
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064c8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80064d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80064d8:	79fb      	ldrb	r3, [r7, #7]
 80064da:	f023 0301 	bic.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	bf14      	ite	ne
 80064e2:	2301      	movne	r3, #1
 80064e4:	2300      	moveq	r3, #0
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	461a      	mov	r2, r3
 80064ea:	f107 0318 	add.w	r3, r7, #24
 80064ee:	4611      	mov	r1, r2
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fd feef 	bl	80042d4 <inc_lock>
 80064f6:	4602      	mov	r2, r0
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d102      	bne.n	800650a <f_open+0x22e>
 8006504:	2302      	movs	r3, #2
 8006506:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800650a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800650e:	2b00      	cmp	r3, #0
 8006510:	f040 80a3 	bne.w	800665a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006518:	4611      	mov	r1, r2
 800651a:	4618      	mov	r0, r3
 800651c:	f7fe fd94 	bl	8005048 <ld_clust>
 8006520:	4602      	mov	r2, r0
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006528:	331c      	adds	r3, #28
 800652a:	4618      	mov	r0, r3
 800652c:	f7fd fd6c 	bl	8004008 <ld_dword>
 8006530:	4602      	mov	r2, r0
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	88da      	ldrh	r2, [r3, #6]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	79fa      	ldrb	r2, [r7, #7]
 800654e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3330      	adds	r3, #48	; 0x30
 8006566:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800656a:	2100      	movs	r1, #0
 800656c:	4618      	mov	r0, r3
 800656e:	f7fd fdd6 	bl	800411e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006572:	79fb      	ldrb	r3, [r7, #7]
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b00      	cmp	r3, #0
 800657a:	d06e      	beq.n	800665a <f_open+0x37e>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d06a      	beq.n	800665a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	895b      	ldrh	r3, [r3, #10]
 8006590:	461a      	mov	r2, r3
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	899b      	ldrh	r3, [r3, #12]
 8006596:	fb02 f303 	mul.w	r3, r2, r3
 800659a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065a8:	e016      	b.n	80065d8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7fe f87f 	bl	80046b2 <get_fat>
 80065b4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80065b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d802      	bhi.n	80065c2 <f_open+0x2e6>
 80065bc:	2302      	movs	r3, #2
 80065be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80065c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c8:	d102      	bne.n	80065d0 <f_open+0x2f4>
 80065ca:	2301      	movs	r3, #1
 80065cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80065d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d103      	bne.n	80065e8 <f_open+0x30c>
 80065e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d8e0      	bhi.n	80065aa <f_open+0x2ce>
				}
				fp->clust = clst;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80065ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d131      	bne.n	800665a <f_open+0x37e>
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	899b      	ldrh	r3, [r3, #12]
 80065fa:	461a      	mov	r2, r3
 80065fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8006602:	fb01 f202 	mul.w	r2, r1, r2
 8006606:	1a9b      	subs	r3, r3, r2
 8006608:	2b00      	cmp	r3, #0
 800660a:	d026      	beq.n	800665a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006610:	4618      	mov	r0, r3
 8006612:	f7fe f82f 	bl	8004674 <clust2sect>
 8006616:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800661a:	2b00      	cmp	r3, #0
 800661c:	d103      	bne.n	8006626 <f_open+0x34a>
						res = FR_INT_ERR;
 800661e:	2302      	movs	r3, #2
 8006620:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006624:	e019      	b.n	800665a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	899b      	ldrh	r3, [r3, #12]
 800662a:	461a      	mov	r2, r3
 800662c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800662e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006634:	441a      	add	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	7858      	ldrb	r0, [r3, #1]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a1a      	ldr	r2, [r3, #32]
 8006648:	2301      	movs	r3, #1
 800664a:	f7fd fc67 	bl	8003f1c <disk_read>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <f_open+0x37e>
 8006654:	2301      	movs	r3, #1
 8006656:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800665a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800665e:	2b00      	cmp	r3, #0
 8006660:	d002      	beq.n	8006668 <f_open+0x38c>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006668:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800666c:	4618      	mov	r0, r3
 800666e:	3768      	adds	r7, #104	; 0x68
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b08c      	sub	sp, #48	; 0x30
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
 8006680:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2200      	movs	r2, #0
 800668a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f107 0210 	add.w	r2, r7, #16
 8006692:	4611      	mov	r1, r2
 8006694:	4618      	mov	r0, r3
 8006696:	f7ff fda5 	bl	80061e4 <validate>
 800669a:	4603      	mov	r3, r0
 800669c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80066a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d107      	bne.n	80066b8 <f_write+0x44>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	7d5b      	ldrb	r3, [r3, #21]
 80066ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80066b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <f_write+0x4a>
 80066b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066bc:	e16a      	b.n	8006994 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	7d1b      	ldrb	r3, [r3, #20]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <f_write+0x5a>
 80066ca:	2307      	movs	r3, #7
 80066cc:	e162      	b.n	8006994 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	699a      	ldr	r2, [r3, #24]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	441a      	add	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	429a      	cmp	r2, r3
 80066dc:	f080 814c 	bcs.w	8006978 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	43db      	mvns	r3, r3
 80066e6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80066e8:	e146      	b.n	8006978 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	8992      	ldrh	r2, [r2, #12]
 80066f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80066f6:	fb01 f202 	mul.w	r2, r1, r2
 80066fa:	1a9b      	subs	r3, r3, r2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f040 80f1 	bne.w	80068e4 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	8992      	ldrh	r2, [r2, #12]
 800670a:	fbb3 f3f2 	udiv	r3, r3, r2
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	8952      	ldrh	r2, [r2, #10]
 8006712:	3a01      	subs	r2, #1
 8006714:	4013      	ands	r3, r2
 8006716:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d143      	bne.n	80067a6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10c      	bne.n	8006740 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800672c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672e:	2b00      	cmp	r3, #0
 8006730:	d11a      	bne.n	8006768 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2100      	movs	r1, #0
 8006736:	4618      	mov	r0, r3
 8006738:	f7fe fa10 	bl	8004b5c <create_chain>
 800673c:	62b8      	str	r0, [r7, #40]	; 0x28
 800673e:	e013      	b.n	8006768 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	2b00      	cmp	r3, #0
 8006746:	d007      	beq.n	8006758 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	4619      	mov	r1, r3
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f7fe fa9c 	bl	8004c8c <clmt_clust>
 8006754:	62b8      	str	r0, [r7, #40]	; 0x28
 8006756:	e007      	b.n	8006768 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	4619      	mov	r1, r3
 8006760:	4610      	mov	r0, r2
 8006762:	f7fe f9fb 	bl	8004b5c <create_chain>
 8006766:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 8109 	beq.w	8006982 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006772:	2b01      	cmp	r3, #1
 8006774:	d104      	bne.n	8006780 <f_write+0x10c>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2202      	movs	r2, #2
 800677a:	755a      	strb	r2, [r3, #21]
 800677c:	2302      	movs	r3, #2
 800677e:	e109      	b.n	8006994 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006786:	d104      	bne.n	8006792 <f_write+0x11e>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2201      	movs	r2, #1
 800678c:	755a      	strb	r2, [r3, #21]
 800678e:	2301      	movs	r3, #1
 8006790:	e100      	b.n	8006994 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006796:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d102      	bne.n	80067a6 <f_write+0x132>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067a4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	7d1b      	ldrb	r3, [r3, #20]
 80067aa:	b25b      	sxtb	r3, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	da18      	bge.n	80067e2 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	7858      	ldrb	r0, [r3, #1]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6a1a      	ldr	r2, [r3, #32]
 80067be:	2301      	movs	r3, #1
 80067c0:	f7fd fbcc 	bl	8003f5c <disk_write>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d004      	beq.n	80067d4 <f_write+0x160>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2201      	movs	r2, #1
 80067ce:	755a      	strb	r2, [r3, #21]
 80067d0:	2301      	movs	r3, #1
 80067d2:	e0df      	b.n	8006994 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	7d1b      	ldrb	r3, [r3, #20]
 80067d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	4619      	mov	r1, r3
 80067ea:	4610      	mov	r0, r2
 80067ec:	f7fd ff42 	bl	8004674 <clust2sect>
 80067f0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d104      	bne.n	8006802 <f_write+0x18e>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2202      	movs	r2, #2
 80067fc:	755a      	strb	r2, [r3, #21]
 80067fe:	2302      	movs	r3, #2
 8006800:	e0c8      	b.n	8006994 <f_write+0x320>
			sect += csect;
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	4413      	add	r3, r2
 8006808:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	899b      	ldrh	r3, [r3, #12]
 800680e:	461a      	mov	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	fbb3 f3f2 	udiv	r3, r3, r2
 8006816:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d043      	beq.n	80068a6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	6a3b      	ldr	r3, [r7, #32]
 8006822:	4413      	add	r3, r2
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	8952      	ldrh	r2, [r2, #10]
 8006828:	4293      	cmp	r3, r2
 800682a:	d905      	bls.n	8006838 <f_write+0x1c4>
					cc = fs->csize - csect;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	895b      	ldrh	r3, [r3, #10]
 8006830:	461a      	mov	r2, r3
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	7858      	ldrb	r0, [r3, #1]
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	69f9      	ldr	r1, [r7, #28]
 8006842:	f7fd fb8b 	bl	8003f5c <disk_write>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d004      	beq.n	8006856 <f_write+0x1e2>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2201      	movs	r2, #1
 8006850:	755a      	strb	r2, [r3, #21]
 8006852:	2301      	movs	r3, #1
 8006854:	e09e      	b.n	8006994 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6a1a      	ldr	r2, [r3, #32]
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	6a3a      	ldr	r2, [r7, #32]
 8006860:	429a      	cmp	r2, r3
 8006862:	d918      	bls.n	8006896 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a1a      	ldr	r2, [r3, #32]
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	8992      	ldrh	r2, [r2, #12]
 8006876:	fb02 f303 	mul.w	r3, r2, r3
 800687a:	69fa      	ldr	r2, [r7, #28]
 800687c:	18d1      	adds	r1, r2, r3
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	899b      	ldrh	r3, [r3, #12]
 8006882:	461a      	mov	r2, r3
 8006884:	f7fd fc2a 	bl	80040dc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	7d1b      	ldrb	r3, [r3, #20]
 800688c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006890:	b2da      	uxtb	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	899b      	ldrh	r3, [r3, #12]
 800689a:	461a      	mov	r2, r3
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	fb02 f303 	mul.w	r3, r2, r3
 80068a2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80068a4:	e04b      	b.n	800693e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d016      	beq.n	80068de <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	699a      	ldr	r2, [r3, #24]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d210      	bcs.n	80068de <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	7858      	ldrb	r0, [r3, #1]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80068c6:	2301      	movs	r3, #1
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	f7fd fb27 	bl	8003f1c <disk_read>
 80068ce:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d004      	beq.n	80068de <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2201      	movs	r2, #1
 80068d8:	755a      	strb	r2, [r3, #21]
 80068da:	2301      	movs	r3, #1
 80068dc:	e05a      	b.n	8006994 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	899b      	ldrh	r3, [r3, #12]
 80068e8:	4618      	mov	r0, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	8992      	ldrh	r2, [r2, #12]
 80068f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80068f6:	fb01 f202 	mul.w	r2, r1, r2
 80068fa:	1a9b      	subs	r3, r3, r2
 80068fc:	1ac3      	subs	r3, r0, r3
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	429a      	cmp	r2, r3
 8006906:	d901      	bls.n	800690c <f_write+0x298>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	8992      	ldrh	r2, [r2, #12]
 800691a:	fbb3 f0f2 	udiv	r0, r3, r2
 800691e:	fb00 f202 	mul.w	r2, r0, r2
 8006922:	1a9b      	subs	r3, r3, r2
 8006924:	440b      	add	r3, r1
 8006926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006928:	69f9      	ldr	r1, [r7, #28]
 800692a:	4618      	mov	r0, r3
 800692c:	f7fd fbd6 	bl	80040dc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	7d1b      	ldrb	r3, [r3, #20]
 8006934:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006938:	b2da      	uxtb	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800693e:	69fa      	ldr	r2, [r7, #28]
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	4413      	add	r3, r2
 8006944:	61fb      	str	r3, [r7, #28]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	699a      	ldr	r2, [r3, #24]
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	441a      	add	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	619a      	str	r2, [r3, #24]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	429a      	cmp	r2, r3
 800695c:	bf38      	it	cc
 800695e:	461a      	movcc	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	60da      	str	r2, [r3, #12]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	441a      	add	r2, r3
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	601a      	str	r2, [r3, #0]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	f47f aeb5 	bne.w	80066ea <f_write+0x76>
 8006980:	e000      	b.n	8006984 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006982:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	7d1b      	ldrb	r3, [r3, #20]
 8006988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800698c:	b2da      	uxtb	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3730      	adds	r7, #48	; 0x30
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f107 0208 	add.w	r2, r7, #8
 80069aa:	4611      	mov	r1, r2
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff fc19 	bl	80061e4 <validate>
 80069b2:	4603      	mov	r3, r0
 80069b4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d168      	bne.n	8006a8e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	7d1b      	ldrb	r3, [r3, #20]
 80069c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d062      	beq.n	8006a8e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	7d1b      	ldrb	r3, [r3, #20]
 80069cc:	b25b      	sxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	da15      	bge.n	80069fe <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	7858      	ldrb	r0, [r3, #1]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a1a      	ldr	r2, [r3, #32]
 80069e0:	2301      	movs	r3, #1
 80069e2:	f7fd fabb 	bl	8003f5c <disk_write>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <f_sync+0x54>
 80069ec:	2301      	movs	r3, #1
 80069ee:	e04f      	b.n	8006a90 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	7d1b      	ldrb	r3, [r3, #20]
 80069f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80069fe:	f7fd f9ef 	bl	8003de0 <get_fattime>
 8006a02:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	f7fd fd93 	bl	8004538 <move_window>
 8006a12:	4603      	mov	r3, r0
 8006a14:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006a16:	7dfb      	ldrb	r3, [r7, #23]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d138      	bne.n	8006a8e <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a20:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	330b      	adds	r3, #11
 8006a26:	781a      	ldrb	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	330b      	adds	r3, #11
 8006a2c:	f042 0220 	orr.w	r2, r2, #32
 8006a30:	b2d2      	uxtb	r2, r2
 8006a32:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6818      	ldr	r0, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	68f9      	ldr	r1, [r7, #12]
 8006a40:	f7fe fb21 	bl	8005086 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f103 021c 	add.w	r2, r3, #28
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4610      	mov	r0, r2
 8006a52:	f7fd fb17 	bl	8004084 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	3316      	adds	r3, #22
 8006a5a:	6939      	ldr	r1, [r7, #16]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fd fb11 	bl	8004084 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	3312      	adds	r3, #18
 8006a66:	2100      	movs	r1, #0
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fd faf0 	bl	800404e <st_word>
					fs->wflag = 1;
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2201      	movs	r2, #1
 8006a72:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7fd fd8c 	bl	8004594 <sync_fs>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	7d1b      	ldrb	r3, [r3, #20]
 8006a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3718      	adds	r7, #24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7ff ff7b 	bl	800699c <f_sync>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d118      	bne.n	8006ae2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f107 0208 	add.w	r2, r7, #8
 8006ab6:	4611      	mov	r1, r2
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7ff fb93 	bl	80061e4 <validate>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10c      	bne.n	8006ae2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7fd fc8f 	bl	80043f0 <dec_lock>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006ad6:	7bfb      	ldrb	r3, [r7, #15]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d102      	bne.n	8006ae2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8006af8:	78fb      	ldrb	r3, [r7, #3]
 8006afa:	2b0a      	cmp	r3, #10
 8006afc:	d103      	bne.n	8006b06 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8006afe:	210d      	movs	r1, #13
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7ff fff3 	bl	8006aec <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	db25      	blt.n	8006b5e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	60fa      	str	r2, [r7, #12]
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	78fa      	ldrb	r2, [r7, #3]
 8006b1e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2b3c      	cmp	r3, #60	; 0x3c
 8006b24:	dd12      	ble.n	8006b4c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6818      	ldr	r0, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f103 010c 	add.w	r1, r3, #12
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	f107 0308 	add.w	r3, r7, #8
 8006b36:	f7ff fd9d 	bl	8006674 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d101      	bne.n	8006b46 <putc_bfd+0x5a>
 8006b42:	2300      	movs	r3, #0
 8006b44:	e001      	b.n	8006b4a <putc_bfd+0x5e>
 8006b46:	f04f 33ff 	mov.w	r3, #4294967295
 8006b4a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	1c5a      	adds	r2, r3, #1
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	609a      	str	r2, [r3, #8]
 8006b5c:	e000      	b.n	8006b60 <putc_bfd+0x74>
	if (i < 0) return;
 8006b5e:	bf00      	nop
}
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b084      	sub	sp, #16
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	db16      	blt.n	8006ba4 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6818      	ldr	r0, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f103 010c 	add.w	r1, r3, #12
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	461a      	mov	r2, r3
 8006b86:	f107 030c 	add.w	r3, r7, #12
 8006b8a:	f7ff fd73 	bl	8006674 <f_write>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d107      	bne.n	8006ba4 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d102      	bne.n	8006ba4 <putc_flush+0x3e>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	e001      	b.n	8006ba8 <putc_flush+0x42>
	return EOF;
 8006ba4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	605a      	str	r2, [r3, #4]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	609a      	str	r2, [r3, #8]
}
 8006bce:	bf00      	nop
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <f_putc>:

int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fp		/* Pointer to the file object */
)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b096      	sub	sp, #88	; 0x58
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	4603      	mov	r3, r0
 8006be2:	6039      	str	r1, [r7, #0]
 8006be4:	71fb      	strb	r3, [r7, #7]
	putbuff pb;


	putc_init(&pb, fp);
 8006be6:	f107 030c 	add.w	r3, r7, #12
 8006bea:	6839      	ldr	r1, [r7, #0]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7ff ffdf 	bl	8006bb0 <putc_init>
	putc_bfd(&pb, c);	/* Put the character */
 8006bf2:	79fa      	ldrb	r2, [r7, #7]
 8006bf4:	f107 030c 	add.w	r3, r7, #12
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff ff76 	bl	8006aec <putc_bfd>
	return putc_flush(&pb);
 8006c00:	f107 030c 	add.w	r3, r7, #12
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7ff ffae 	bl	8006b66 <putc_flush>
 8006c0a:	4603      	mov	r3, r0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3758      	adds	r7, #88	; 0x58
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b096      	sub	sp, #88	; 0x58
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8006c1e:	f107 030c 	add.w	r3, r7, #12
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff ffc3 	bl	8006bb0 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8006c2a:	e009      	b.n	8006c40 <f_puts+0x2c>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	1c5a      	adds	r2, r3, #1
 8006c30:	607a      	str	r2, [r7, #4]
 8006c32:	781a      	ldrb	r2, [r3, #0]
 8006c34:	f107 030c 	add.w	r3, r7, #12
 8006c38:	4611      	mov	r1, r2
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff ff56 	bl	8006aec <putc_bfd>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1f1      	bne.n	8006c2c <f_puts+0x18>
	return putc_flush(&pb);
 8006c48:	f107 030c 	add.w	r3, r7, #12
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff ff8a 	bl	8006b66 <putc_flush>
 8006c52:	4603      	mov	r3, r0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3758      	adds	r7, #88	; 0x58
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	4613      	mov	r3, r2
 8006c68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006c72:	4b1f      	ldr	r3, [pc, #124]	; (8006cf0 <FATFS_LinkDriverEx+0x94>)
 8006c74:	7a5b      	ldrb	r3, [r3, #9]
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d131      	bne.n	8006ce0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006c7c:	4b1c      	ldr	r3, [pc, #112]	; (8006cf0 <FATFS_LinkDriverEx+0x94>)
 8006c7e:	7a5b      	ldrb	r3, [r3, #9]
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	461a      	mov	r2, r3
 8006c84:	4b1a      	ldr	r3, [pc, #104]	; (8006cf0 <FATFS_LinkDriverEx+0x94>)
 8006c86:	2100      	movs	r1, #0
 8006c88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006c8a:	4b19      	ldr	r3, [pc, #100]	; (8006cf0 <FATFS_LinkDriverEx+0x94>)
 8006c8c:	7a5b      	ldrb	r3, [r3, #9]
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	4a17      	ldr	r2, [pc, #92]	; (8006cf0 <FATFS_LinkDriverEx+0x94>)
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006c9a:	4b15      	ldr	r3, [pc, #84]	; (8006cf0 <FATFS_LinkDriverEx+0x94>)
 8006c9c:	7a5b      	ldrb	r3, [r3, #9]
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	4b13      	ldr	r3, [pc, #76]	; (8006cf0 <FATFS_LinkDriverEx+0x94>)
 8006ca4:	4413      	add	r3, r2
 8006ca6:	79fa      	ldrb	r2, [r7, #7]
 8006ca8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006caa:	4b11      	ldr	r3, [pc, #68]	; (8006cf0 <FATFS_LinkDriverEx+0x94>)
 8006cac:	7a5b      	ldrb	r3, [r3, #9]
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	1c5a      	adds	r2, r3, #1
 8006cb2:	b2d1      	uxtb	r1, r2
 8006cb4:	4a0e      	ldr	r2, [pc, #56]	; (8006cf0 <FATFS_LinkDriverEx+0x94>)
 8006cb6:	7251      	strb	r1, [r2, #9]
 8006cb8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006cba:	7dbb      	ldrb	r3, [r7, #22]
 8006cbc:	3330      	adds	r3, #48	; 0x30
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	223a      	movs	r2, #58	; 0x3a
 8006cca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	3302      	adds	r3, #2
 8006cd0:	222f      	movs	r2, #47	; 0x2f
 8006cd2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	3303      	adds	r3, #3
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	2000238c 	.word	0x2000238c

08006cf4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006cfe:	2200      	movs	r2, #0
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7ff ffaa 	bl	8006c5c <FATFS_LinkDriverEx>
 8006d08:	4603      	mov	r3, r0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
	...

08006d14 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	6039      	str	r1, [r7, #0]
 8006d1e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006d20:	88fb      	ldrh	r3, [r7, #6]
 8006d22:	2b7f      	cmp	r3, #127	; 0x7f
 8006d24:	d802      	bhi.n	8006d2c <ff_convert+0x18>
		c = chr;
 8006d26:	88fb      	ldrh	r3, [r7, #6]
 8006d28:	81fb      	strh	r3, [r7, #14]
 8006d2a:	e025      	b.n	8006d78 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00b      	beq.n	8006d4a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006d32:	88fb      	ldrh	r3, [r7, #6]
 8006d34:	2bff      	cmp	r3, #255	; 0xff
 8006d36:	d805      	bhi.n	8006d44 <ff_convert+0x30>
 8006d38:	88fb      	ldrh	r3, [r7, #6]
 8006d3a:	3b80      	subs	r3, #128	; 0x80
 8006d3c:	4a12      	ldr	r2, [pc, #72]	; (8006d88 <ff_convert+0x74>)
 8006d3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d42:	e000      	b.n	8006d46 <ff_convert+0x32>
 8006d44:	2300      	movs	r3, #0
 8006d46:	81fb      	strh	r3, [r7, #14]
 8006d48:	e016      	b.n	8006d78 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	81fb      	strh	r3, [r7, #14]
 8006d4e:	e009      	b.n	8006d64 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8006d50:	89fb      	ldrh	r3, [r7, #14]
 8006d52:	4a0d      	ldr	r2, [pc, #52]	; (8006d88 <ff_convert+0x74>)
 8006d54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d58:	88fa      	ldrh	r2, [r7, #6]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d006      	beq.n	8006d6c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8006d5e:	89fb      	ldrh	r3, [r7, #14]
 8006d60:	3301      	adds	r3, #1
 8006d62:	81fb      	strh	r3, [r7, #14]
 8006d64:	89fb      	ldrh	r3, [r7, #14]
 8006d66:	2b7f      	cmp	r3, #127	; 0x7f
 8006d68:	d9f2      	bls.n	8006d50 <ff_convert+0x3c>
 8006d6a:	e000      	b.n	8006d6e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8006d6c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8006d6e:	89fb      	ldrh	r3, [r7, #14]
 8006d70:	3380      	adds	r3, #128	; 0x80
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006d78:	89fb      	ldrh	r3, [r7, #14]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	0800701c 	.word	0x0800701c

08006d8c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b087      	sub	sp, #28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	4603      	mov	r3, r0
 8006d94:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d9c:	d201      	bcs.n	8006da2 <ff_wtoupper+0x16>
 8006d9e:	4b3e      	ldr	r3, [pc, #248]	; (8006e98 <ff_wtoupper+0x10c>)
 8006da0:	e000      	b.n	8006da4 <ff_wtoupper+0x18>
 8006da2:	4b3e      	ldr	r3, [pc, #248]	; (8006e9c <ff_wtoupper+0x110>)
 8006da4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	1c9a      	adds	r2, r3, #2
 8006daa:	617a      	str	r2, [r7, #20]
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8006db0:	8a7b      	ldrh	r3, [r7, #18]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d068      	beq.n	8006e88 <ff_wtoupper+0xfc>
 8006db6:	88fa      	ldrh	r2, [r7, #6]
 8006db8:	8a7b      	ldrh	r3, [r7, #18]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d364      	bcc.n	8006e88 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	1c9a      	adds	r2, r3, #2
 8006dc2:	617a      	str	r2, [r7, #20]
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	823b      	strh	r3, [r7, #16]
 8006dc8:	8a3b      	ldrh	r3, [r7, #16]
 8006dca:	0a1b      	lsrs	r3, r3, #8
 8006dcc:	81fb      	strh	r3, [r7, #14]
 8006dce:	8a3b      	ldrh	r3, [r7, #16]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8006dd4:	88fa      	ldrh	r2, [r7, #6]
 8006dd6:	8a79      	ldrh	r1, [r7, #18]
 8006dd8:	8a3b      	ldrh	r3, [r7, #16]
 8006dda:	440b      	add	r3, r1
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	da49      	bge.n	8006e74 <ff_wtoupper+0xe8>
			switch (cmd) {
 8006de0:	89fb      	ldrh	r3, [r7, #14]
 8006de2:	2b08      	cmp	r3, #8
 8006de4:	d84f      	bhi.n	8006e86 <ff_wtoupper+0xfa>
 8006de6:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <ff_wtoupper+0x60>)
 8006de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dec:	08006e11 	.word	0x08006e11
 8006df0:	08006e23 	.word	0x08006e23
 8006df4:	08006e39 	.word	0x08006e39
 8006df8:	08006e41 	.word	0x08006e41
 8006dfc:	08006e49 	.word	0x08006e49
 8006e00:	08006e51 	.word	0x08006e51
 8006e04:	08006e59 	.word	0x08006e59
 8006e08:	08006e61 	.word	0x08006e61
 8006e0c:	08006e69 	.word	0x08006e69
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006e10:	88fa      	ldrh	r2, [r7, #6]
 8006e12:	8a7b      	ldrh	r3, [r7, #18]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	80fb      	strh	r3, [r7, #6]
 8006e20:	e027      	b.n	8006e72 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8006e22:	88fa      	ldrh	r2, [r7, #6]
 8006e24:	8a7b      	ldrh	r3, [r7, #18]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	88fa      	ldrh	r2, [r7, #6]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	80fb      	strh	r3, [r7, #6]
 8006e36:	e01c      	b.n	8006e72 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8006e38:	88fb      	ldrh	r3, [r7, #6]
 8006e3a:	3b10      	subs	r3, #16
 8006e3c:	80fb      	strh	r3, [r7, #6]
 8006e3e:	e018      	b.n	8006e72 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006e40:	88fb      	ldrh	r3, [r7, #6]
 8006e42:	3b20      	subs	r3, #32
 8006e44:	80fb      	strh	r3, [r7, #6]
 8006e46:	e014      	b.n	8006e72 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8006e48:	88fb      	ldrh	r3, [r7, #6]
 8006e4a:	3b30      	subs	r3, #48	; 0x30
 8006e4c:	80fb      	strh	r3, [r7, #6]
 8006e4e:	e010      	b.n	8006e72 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8006e50:	88fb      	ldrh	r3, [r7, #6]
 8006e52:	3b1a      	subs	r3, #26
 8006e54:	80fb      	strh	r3, [r7, #6]
 8006e56:	e00c      	b.n	8006e72 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8006e58:	88fb      	ldrh	r3, [r7, #6]
 8006e5a:	3308      	adds	r3, #8
 8006e5c:	80fb      	strh	r3, [r7, #6]
 8006e5e:	e008      	b.n	8006e72 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8006e60:	88fb      	ldrh	r3, [r7, #6]
 8006e62:	3b50      	subs	r3, #80	; 0x50
 8006e64:	80fb      	strh	r3, [r7, #6]
 8006e66:	e004      	b.n	8006e72 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006e68:	88fb      	ldrh	r3, [r7, #6]
 8006e6a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8006e6e:	80fb      	strh	r3, [r7, #6]
 8006e70:	bf00      	nop
			}
			break;
 8006e72:	e008      	b.n	8006e86 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8006e74:	89fb      	ldrh	r3, [r7, #14]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d195      	bne.n	8006da6 <ff_wtoupper+0x1a>
 8006e7a:	8a3b      	ldrh	r3, [r7, #16]
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	4413      	add	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8006e84:	e78f      	b.n	8006da6 <ff_wtoupper+0x1a>
			break;
 8006e86:	bf00      	nop
	}

	return chr;
 8006e88:	88fb      	ldrh	r3, [r7, #6]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	371c      	adds	r7, #28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	0800711c 	.word	0x0800711c
 8006e9c:	08007310 	.word	0x08007310

08006ea0 <__libc_init_array>:
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	4d0d      	ldr	r5, [pc, #52]	; (8006ed8 <__libc_init_array+0x38>)
 8006ea4:	4c0d      	ldr	r4, [pc, #52]	; (8006edc <__libc_init_array+0x3c>)
 8006ea6:	1b64      	subs	r4, r4, r5
 8006ea8:	10a4      	asrs	r4, r4, #2
 8006eaa:	2600      	movs	r6, #0
 8006eac:	42a6      	cmp	r6, r4
 8006eae:	d109      	bne.n	8006ec4 <__libc_init_array+0x24>
 8006eb0:	4d0b      	ldr	r5, [pc, #44]	; (8006ee0 <__libc_init_array+0x40>)
 8006eb2:	4c0c      	ldr	r4, [pc, #48]	; (8006ee4 <__libc_init_array+0x44>)
 8006eb4:	f000 f820 	bl	8006ef8 <_init>
 8006eb8:	1b64      	subs	r4, r4, r5
 8006eba:	10a4      	asrs	r4, r4, #2
 8006ebc:	2600      	movs	r6, #0
 8006ebe:	42a6      	cmp	r6, r4
 8006ec0:	d105      	bne.n	8006ece <__libc_init_array+0x2e>
 8006ec2:	bd70      	pop	{r4, r5, r6, pc}
 8006ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec8:	4798      	blx	r3
 8006eca:	3601      	adds	r6, #1
 8006ecc:	e7ee      	b.n	8006eac <__libc_init_array+0xc>
 8006ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed2:	4798      	blx	r3
 8006ed4:	3601      	adds	r6, #1
 8006ed6:	e7f2      	b.n	8006ebe <__libc_init_array+0x1e>
 8006ed8:	080073d4 	.word	0x080073d4
 8006edc:	080073d4 	.word	0x080073d4
 8006ee0:	080073d4 	.word	0x080073d4
 8006ee4:	080073d8 	.word	0x080073d8

08006ee8 <memset>:
 8006ee8:	4402      	add	r2, r0
 8006eea:	4603      	mov	r3, r0
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d100      	bne.n	8006ef2 <memset+0xa>
 8006ef0:	4770      	bx	lr
 8006ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ef6:	e7f9      	b.n	8006eec <memset+0x4>

08006ef8 <_init>:
 8006ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efa:	bf00      	nop
 8006efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efe:	bc08      	pop	{r3}
 8006f00:	469e      	mov	lr, r3
 8006f02:	4770      	bx	lr

08006f04 <_fini>:
 8006f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f06:	bf00      	nop
 8006f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0a:	bc08      	pop	{r3}
 8006f0c:	469e      	mov	lr, r3
 8006f0e:	4770      	bx	lr
